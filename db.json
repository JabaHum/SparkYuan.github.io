{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/Broadcast_UML.png","path":"images/Broadcast_UML.png","modified":0,"renderable":0},{"_id":"source/images/MVVM.png","path":"images/MVVM.png","modified":0,"renderable":0},{"_id":"source/images/mvp.png","path":"images/mvp.png","modified":0,"renderable":0},{"_id":"source/default_img/spark.png","path":"default_img/spark.png","modified":0,"renderable":0},{"_id":"source/images/build.png","path":"images/build.png","modified":0,"renderable":0},{"_id":"source/images/Broadcast_UML2.png","path":"images/Broadcast_UML2.png","modified":0,"renderable":0},{"_id":"source/images/jvm_memory.png","path":"images/jvm_memory.png","modified":0,"renderable":0},{"_id":"source/images/service_UML.png","path":"images/service_UML.png","modified":0,"renderable":0},{"_id":"source/images/threads.png","path":"images/threads.png","modified":0,"renderable":0},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":0,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"source/images/Activity_UML.png","path":"images/Activity_UML.png","modified":0,"renderable":0},{"_id":"source/images/contentprovider_UML.png","path":"images/contentprovider_UML.png","modified":0,"renderable":0},{"_id":"source/images/android_build_process_detail.png","path":"images/android_build_process_detail.png","modified":0,"renderable":0},{"_id":"source/images/service_UML2.png","path":"images/service_UML2.png","modified":0,"renderable":0},{"_id":"source/images/qidong.png","path":"images/qidong.png","modified":0,"renderable":0},{"_id":"themes/yilia/source/main.d221b8.css","path":"main.d221b8.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.c853ad.js","path":"mobile.c853ad.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.59dfdc.js","path":"slider.59dfdc.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.d221b8.js","path":"main.d221b8.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.59e68b.eot","path":"fonts/iconfont.59e68b.eot","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.ca3627.woff","path":"fonts/iconfont.ca3627.woff","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b7ae25.ttf","path":"fonts/iconfont.b7ae25.ttf","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.dba24b.svg","path":"fonts/iconfont.dba24b.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1482927499000},{"_id":"themes/yilia/.DS_Store","hash":"6af8f32fdd90d1feda22f73e43bcf2830b52fd50","modified":1482928872000},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1482927499000},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1482927499000},{"_id":"themes/yilia/.gitignore","hash":"9c4b7d27a1e3e5efa0c8ed143a032a85d586b03b","modified":1482927499000},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1482927499000},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1482927499000},{"_id":"themes/yilia/README.md","hash":"0becd9c18f9d44fc364788a34a4f3ec82ca7940a","modified":1483582009000},{"_id":"themes/yilia/_config.yml","hash":"75f086e6f15e826e9d40189d9be412201f86b6fc","modified":1483582009000},{"_id":"themes/yilia/package.json","hash":"bbd736a2e0b68c1838441ee1c3e0f09398aaef59","modified":1483582009000},{"_id":"themes/yilia/webpack.config.js","hash":"eed8e87c05ed8f72995b507870f364253f826317","modified":1483582009000},{"_id":"source/CNAME","hash":"2cbb9049f9dc66b40e468f84842019af40c07036","modified":1482927266000},{"_id":"themes/yilia/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1482927499000},{"_id":"themes/yilia/.git/config","hash":"256e47c5a4386e6881318e44d2a716fdc3197863","modified":1482927499000},{"_id":"themes/yilia/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1482927485000},{"_id":"themes/yilia/.git/index","hash":"7700bbb52a4252097989aaa6df4992e23790d9a4","modified":1483582280000},{"_id":"themes/yilia/.git/packed-refs","hash":"d2bd7a98cdb8de9b4aa7181168aeafb335cb1e50","modified":1482927499000},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1482927499000},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1482927499000},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1482927499000},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1482927499000},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1482927499000},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1482927499000},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1482927499000},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1482927499000},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1482927499000},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1482927499000},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1482927499000},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1482927499000},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1482927499000},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1482927499000},{"_id":"themes/yilia/source-src/script.ejs","hash":"946b5e60b24438e8b876fa22b8a9864068e859ae","modified":1483582009000},{"_id":"themes/yilia/source/main.css","hash":"17ab4ed79d8280efa9c6e80cb64f9de8c702a7da","modified":1482927499000},{"_id":"source/tags/index.md","hash":"81c210bc8f25236fc346fb6d62d59dd49d156131","modified":1482927266000},{"_id":"source/_posts/AIDL.md","hash":"2320c21bcb53ea94d8c6e4956ab8a54fbb33eebd","modified":1482927266000},{"_id":"source/_posts/Activity在异常情况下的生命周期.md","hash":"4854b3de09b603cc08dab00656f22622c6ecc43e","modified":1482927266000},{"_id":"source/_posts/Android安全机制.md","hash":"5fa6962cd507950df2dbe15b854adf4b422a43a0","modified":1482927266000},{"_id":"source/_posts/AsyncTask源码剖析(API 23).md","hash":"3465919302fef52045caf6a60b9b92561a8ba576","modified":1482927266000},{"_id":"source/_posts/IntentFilter匹配规则.md","hash":"41740cb53ffff126569859d11abd0d76a27a48e6","modified":1482927266000},{"_id":"source/_posts/Android的线程和线程池.md","hash":"ca659b725f0a7f19fe85f17827c5431ee611ef12","modified":1482927266000},{"_id":"source/_posts/JVM运行时数据区域.md","hash":"0190dbfcce215deb101cb26f935128daf3e72298","modified":1482927266000},{"_id":"source/_posts/Meizi.md","hash":"2c20297bb0dc6a80bc7f11707a860c49ae04974e","modified":1482927266000},{"_id":"source/_posts/SubmitButton动效按钮.md","hash":"12c446bd2d7bc6fa3bba484c7bb8a420603a3d05","modified":1482927266000},{"_id":"source/_posts/View的弹性滑动.md","hash":"b95beb62ebda7401beb626c62f74791e273bd29b","modified":1482927266000},{"_id":"source/_posts/View事件分发机制.md","hash":"bc0fadcf65fe0e17c12f9bcd4638df8293a59dba","modified":1482927266000},{"_id":"source/_posts/从源码到APK.md","hash":"f818ac2a9bfecc17c512ab0191d03313a4b01844","modified":1482927266000},{"_id":"source/_posts/View的工作原理.md","hash":"76be2b0b97553a2f31e738342f5942bc203deebb","modified":1482927266000},{"_id":"source/_posts/Windows和WindowManager.md","hash":"304af758c13c95bd62d4a83b6aa6b774b3e80301","modified":1482927266000},{"_id":"source/_posts/四大组件的工作过程.md","hash":"0d10ffc14724ff5add3c2ad1e52b343d899f88ed","modified":1482927266000},{"_id":"source/_posts/使用UncaughtExceptionHandler来处理未捕获的异常.md","hash":"88a070ca36aec5b91e1f296e443d93c554aff7b2","modified":1482927266000},{"_id":"source/_posts/一个规范的自定义View.md","hash":"c72e74735515938085bd05a600f422cd2b044ca3","modified":1482927266000},{"_id":"source/_posts/属性动画.md","hash":"dfca25f8fd7c3367746429cca78e84911ecc5bdc","modified":1482927266000},{"_id":"source/_posts/自定义注解的例子.md","hash":"0f96391b9b8850945705cf3a6fb6c3327b32247a","modified":1482927266000},{"_id":"source/_posts/我的Android Studio的配置.md","hash":"64de9f9a5b039c6cac0fe102d34f726be166a572","modified":1482927266000},{"_id":"source/images/Broadcast_UML.png","hash":"dc4a97d2b8ef1f6592717204788d9f716117fdee","modified":1482927266000},{"_id":"source/images/MVVM.png","hash":"95cde74b2e30419ee379ce1b7afecd4f3e20a9c4","modified":1482927266000},{"_id":"source/images/mvp.png","hash":"18ab1cbe44b405c660a4b3ae301d7f93f5425507","modified":1482927266000},{"_id":"source/default_img/spark.png","hash":"f1a8ed0ac077dd6001965f2e8529bafe2a3feeb3","modified":1482927266000},{"_id":"source/images/build.png","hash":"cb7db6d636ea86ff4c31325c8ae8174a0766be4f","modified":1482927266000},{"_id":"source/images/Broadcast_UML2.png","hash":"173269356b75bfe4213c28374a19e3a4938fd36b","modified":1482927266000},{"_id":"source/images/jvm_memory.png","hash":"318de2ebe17ff8184523361f18ae39795fd68ec6","modified":1482927266000},{"_id":"source/images/service_UML.png","hash":"30b35c17a3e468fcbbaab25990439bad304acfa1","modified":1482927266000},{"_id":"themes/yilia/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1482927485000},{"_id":"themes/yilia/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1482927485000},{"_id":"themes/yilia/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1482927485000},{"_id":"themes/yilia/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1482927485000},{"_id":"source/images/threads.png","hash":"11cb33726d2454c9bd4e161c9ded9d371087b90b","modified":1482927266000},{"_id":"themes/yilia/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1482927485000},{"_id":"themes/yilia/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1482927485000},{"_id":"themes/yilia/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1482927485000},{"_id":"themes/yilia/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1482927485000},{"_id":"themes/yilia/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1482927485000},{"_id":"themes/yilia/.git/logs/HEAD","hash":"650ba6a28ba8f7d01bfc7aa172783aa583293c0d","modified":1483582280000},{"_id":"themes/yilia/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1482927485000},{"_id":"themes/yilia/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1482927485000},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"143710485f734c5a997e0b1c26192bbba2982bcc","modified":1483582009000},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1482927499000},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1482927499000},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"ac767232c49faf3e755e7906e2b875dce786355c","modified":1483582009000},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1482927499000},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1483582009000},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"2387d91cf94b0b36e8a36841992a5fce63ebd069","modified":1483582009000},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1482927499000},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1482927499000},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1482927499000},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1483582009000},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1482927499000},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"f5e98b6013c968afb867626ed6617cd1cedc3d3a","modified":1483582009000},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1482927499000},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1482927499000},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1482927499000},{"_id":"themes/yilia/source-src/js/fix.js","hash":"17be4f27eb8951835c29dafd0f6ba1b18e47cc6b","modified":1483582009000},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1483582009000},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1482927499000},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1482927499000},{"_id":"themes/yilia/source-src/js/slider.js","hash":"0adaf1e0d0dac9099fa0186fe784262a88f5b004","modified":1483582009000},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1482927499000},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"808a2e1ed407984cfdc929b827d3638f70ec9a2a","modified":1482927499000},{"_id":"themes/yilia/source-src/js/main.js","hash":"d665f4cf30450984591bc8ad2348a1baf720d04b","modified":1482927499000},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1482927499000},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1482927499000},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1482927499000},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"ce24ab7049be634c17a163e2db39f1f0b1f7c119","modified":1482927499000},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"b68772aa2b47d0ed89ce95d4e9d3d27931fe885c","modified":1482927499000},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1482927499000},{"_id":"themes/yilia/source-src/css/duoshuo.scss","hash":"7c00f9102c9b102aa1370a346a0730e743351fbb","modified":1482927499000},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1482927499000},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"b750499d5120f963b683d0c96ac3f345c714e448","modified":1482927499000},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"a73d37ff38d44c774e3ac081d59416b0e8592ca4","modified":1482927499000},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1482927499000},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1482927499000},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0ce6345a86c44e3fea5a4aa439614541112538f3","modified":1483582009000},{"_id":"themes/yilia/source-src/css/main.scss","hash":"40c055e8360973a75db7c13f3280a4f465f9e5e3","modified":1482927499000},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1482927499000},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"12abb65289eed5391d657b963a20f96a473b1cbd","modified":1483582009000},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1482927499000},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1482927499000},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1482927499000},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1482927499000},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1482927499000},{"_id":"themes/yilia/source-src/css/social.scss","hash":"a14f37a57ce7a720a36196f6469d8be955284f8c","modified":1482927499000},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1483582009000},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"61917c928d09783a3bc8a91503a59ab3a8696e90","modified":1482927499000},{"_id":"themes/yilia/source/fonts/default-skin.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1482927499000},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1482927499000},{"_id":"themes/yilia/source/fonts/iconfont.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1482927499000},{"_id":"themes/yilia/source/fonts/iconfont.svg","hash":"3313bf984fbee56b022942a5d19c916b4734fd60","modified":1482927499000},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1483582009000},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"819774a2979d0d94eb4e3ebf62afc96f803bac67","modified":1482927499000},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1482927499000},{"_id":"themes/yilia/source/fonts/iconfont.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1482927499000},{"_id":"themes/yilia/source/fonts/iconfont.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1482927499000},{"_id":"themes/yilia/source/fonts/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1482927499000},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1482927499000},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1482927499000},{"_id":"themes/yilia/source/mobile.9097f5.js","hash":"7a22440524cc4469c26aab5ad800eb12fec29d29","modified":1482927499000},{"_id":"source/images/Activity_UML.png","hash":"9d8bda879c62adc0b71cd26262603850ca16ab05","modified":1482927266000},{"_id":"source/images/contentprovider_UML.png","hash":"9dbe7f17e629d0f36218b5dd3c3941cd8aa320f0","modified":1482927266000},{"_id":"source/images/android_build_process_detail.png","hash":"e46dbc800ec2abb1d0aacdb53de8339477f152bf","modified":1482927266000},{"_id":"source/images/service_UML2.png","hash":"afdf0ded0d671ec79a03fddbd253de15eb5248ea","modified":1482927266000},{"_id":"themes/yilia/.git/refs/heads/master","hash":"d0e8334b89b014e03ff9f03aca790ed7256e3bb3","modified":1483582280000},{"_id":"themes/yilia/.git/objects/pack/pack-d33249d0cf39cceaff4ab45cef46b76c54551a68.idx","hash":"28ca45f290bd97016f0fbc22921dbc080eff3bb3","modified":1482927499000},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1482927499000},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"8d8ce25f9a0f9d975bc04c36933844a0ef7bb45d","modified":1483582009000},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1482927499000},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"341103df70d0b476e3acd0afbc507a4a120d8f5f","modified":1482927499000},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1482927499000},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"7d6c08c650c54f2ae86ccdb47ef43f038b0a4385","modified":1483582009000},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1482927499000},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1483582009000},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1482927499000},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1482927499000},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1482927499000},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1482927499000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"3313bf984fbee56b022942a5d19c916b4734fd60","modified":1482927499000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1482927499000},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1482927499000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1482927499000},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1482927499000},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1482927499000},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1482927499000},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1482927499000},{"_id":"themes/yilia/.git/logs/refs/heads/master","hash":"650ba6a28ba8f7d01bfc7aa172783aa583293c0d","modified":1483582280000},{"_id":"themes/yilia/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1482927499000},{"_id":"themes/yilia/source/slider.72cb6f.js","hash":"d993470917b2ad46a823b87e6881bce10e72286c","modified":1482927499000},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/HEAD","hash":"48cc686ae326e595a2f2ab14cfaf266e76e0b481","modified":1482927499000},{"_id":"themes/yilia/source/main.235424.js","hash":"8c64828398e823ab9e18f7952e7f0dfc03c24e3e","modified":1482927499000},{"_id":"source/images/qidong.png","hash":"4ca0c748f33f34dc0de0e852a382118f37d74aa8","modified":1482927266000},{"_id":"themes/yilia/.git/objects/pack/pack-d33249d0cf39cceaff4ab45cef46b76c54551a68.pack","hash":"a7314f3445fab44eabb1550047fac0077441b166","modified":1482927499000},{"_id":"public/content.json","hash":"8c03d7b0f5f39f0d7aee5e5a37d01d5607661a5a","modified":1482929337464},{"_id":"public/tags/index.html","hash":"20ab5ca75e183b623b7f4daf3452391caa4a0154","modified":1483582438399},{"_id":"public/2016/07/20/SubmitButton动效按钮/index.html","hash":"ed969f358c5fa241a1ea2ce41e0d3a668fbef7c9","modified":1483582438399},{"_id":"public/2016/06/10/自定义注解的例子/index.html","hash":"dab0dc1bff38ce00465fc7721f51d8cbb45b7c44","modified":1483582438399},{"_id":"public/2016/04/22/JVM运行时数据区域/index.html","hash":"9089532bb63f4b3d14b933e3c6ea7b10b11673bd","modified":1483582438399},{"_id":"public/2016/04/05/Android安全机制/index.html","hash":"78dbf85daaea83a71b9b3a3efaf19a855dd1cb0c","modified":1483582438399},{"_id":"public/2016/04/01/从源码到APK/index.html","hash":"89b3139b634500fab08bc54df2227247d3a67a87","modified":1483582438399},{"_id":"public/2016/03/28/使用UncaughtExceptionHandler来处理未捕获的异常/index.html","hash":"0dcc68c9368e24a5bfaa04f22a3631eee3e578d1","modified":1483582438399},{"_id":"public/2016/03/25/Android的线程和线程池/index.html","hash":"2e0ff3452f2471a935a05ed294492967f4464d26","modified":1483582438400},{"_id":"public/2016/03/23/AsyncTask源码剖析(API 23)/index.html","hash":"581b791ac0b37761a46157d294c64712cdcd289d","modified":1483582438400},{"_id":"public/2016/03/14/四大组件的工作过程/index.html","hash":"37bf5f4f3086e6e04d90cec61a9bdd4b89cfd10c","modified":1483582438400},{"_id":"public/2016/03/11/View事件分发机制/index.html","hash":"08ef936a1b9383b14cba1d1568577491868a9cdc","modified":1483582438400},{"_id":"public/2016/03/11/属性动画/index.html","hash":"636849ae31728a584244cf3dbc74ef1e38b84cb5","modified":1483582438400},{"_id":"public/2016/03/11/Meizi/index.html","hash":"8a16f1297024b410acf315ef49483e88e19c6ea1","modified":1483582438400},{"_id":"public/2016/03/11/View的工作原理/index.html","hash":"520db3e4b87a31c34b426f1cdbb2108a2220658d","modified":1483582438400},{"_id":"public/2016/03/11/Windows和WindowManager/index.html","hash":"cea52c347095248b1476d49527830ddd784f4efe","modified":1483582438400},{"_id":"public/2016/03/11/AIDL/index.html","hash":"4ae71f0d4c8830acd2574a2649d4ec3d19b48321","modified":1483582438400},{"_id":"public/2016/03/11/View的弹性滑动/index.html","hash":"9dc6fae9517b81834d4236c682a602377262caad","modified":1483582438400},{"_id":"public/2016/03/11/一个规范的自定义View/index.html","hash":"34a37ccb70814d6f0d47113c3197ba5d3405410b","modified":1483582438400},{"_id":"public/2016/02/06/IntentFilter匹配规则/index.html","hash":"c3dab2307e277839367e17074ebf29c9128f3849","modified":1483582438400},{"_id":"public/2016/02/05/Activity在异常情况下的生命周期/index.html","hash":"99a8d9a79c298a1dd76f94c4c39d2efdc45e2604","modified":1483582438401},{"_id":"public/2015/10/04/我的Android Studio的配置/index.html","hash":"96b9ccadbc52ebd94e841b55f4b9cf7b497e0dcb","modified":1483582438401},{"_id":"public/archives/index.html","hash":"bc8d14875c77236a2681b6f4eeb45619d06cc982","modified":1483582438401},{"_id":"public/archives/page/2/index.html","hash":"585d6121532b0c6c99117b994d9f7f045232a9c9","modified":1483582438401},{"_id":"public/archives/2015/index.html","hash":"ce8ea08fa6258b938f9dddddaf54c1b940c1b0d3","modified":1483582438401},{"_id":"public/archives/2015/10/index.html","hash":"c90734dbb588d8ce61daa0e76c20d4a9519602b6","modified":1483582438402},{"_id":"public/archives/2016/index.html","hash":"5e947541b5e127aeb222e6d7b880a9bc0ab3eaeb","modified":1483582438402},{"_id":"public/archives/2016/page/2/index.html","hash":"e2e4be8bd0feb8564d5d184e0f81de5e4246cef0","modified":1483582438402},{"_id":"public/archives/2016/02/index.html","hash":"0e979acfd3bc2e362116f56b8970ae0cadd256bd","modified":1483582438402},{"_id":"public/archives/2016/03/index.html","hash":"a67cf2c5700fdf296c03d870d4825ed294a47296","modified":1483582438402},{"_id":"public/archives/2016/03/page/2/index.html","hash":"938a964cf6d58af012a390be5cd845b41ed71c84","modified":1483582438402},{"_id":"public/archives/2016/04/index.html","hash":"222cda65f6153bf16ecc16344bb761c9c1cadc05","modified":1483582438402},{"_id":"public/archives/2016/06/index.html","hash":"382a5a635ef2e592544c6f4c5a6780f2abbdbd8e","modified":1483582438402},{"_id":"public/archives/2016/07/index.html","hash":"43d715ff53a5086ecd057b1fb9a770c61343f665","modified":1483582438402},{"_id":"public/index.html","hash":"aa2fae10eb4f864bc039f5ef0367fe105a995682","modified":1483582438401},{"_id":"public/page/2/index.html","hash":"cee90a11435c6a22c8dcae00cd7ab37e964929ad","modified":1483582438401},{"_id":"public/categories/Android/index.html","hash":"4ef1922cec4d572c9252dfd81fbfe68b06dc075a","modified":1483582438401},{"_id":"public/categories/Android/page/2/index.html","hash":"10028a5904918188aa6ff50db097999887f3e0a2","modified":1483582438401},{"_id":"public/categories/Android/Android开发艺术探索笔记/index.html","hash":"71d71ac79705dd6f9913b35e673b7b59f6de5c4b","modified":1483582438401},{"_id":"public/categories/Android/Android开发艺术探索笔记/page/2/index.html","hash":"cac2cf7a7f2c4573bc405a2ab4054e96f1aca325","modified":1483582438401},{"_id":"public/categories/JVM/index.html","hash":"10a84409a0da2c101bdc51669f242f30d60202f7","modified":1483582438401},{"_id":"public/categories/Java/index.html","hash":"2b40d4cf08df4387398454d6d87f8f8c0d755fed","modified":1483582438401},{"_id":"public/categories/Android/Android-Studio/index.html","hash":"40fc58e55d1627ffd6a17710d40e2dd524927b92","modified":1483582438401},{"_id":"public/tags/AIDL/index.html","hash":"aadeb24e6d16b8c81395b940f437481afe1c4065","modified":1483582438402},{"_id":"public/tags/IPC/index.html","hash":"bb422d0d4b6c0c2970cb3167e8f88593f542a5cc","modified":1483582438402},{"_id":"public/tags/Activity/index.html","hash":"4476ac19f92813460dfabfdc677abd968219f7bc","modified":1483582438402},{"_id":"public/tags/安全机制/index.html","hash":"5302c47cf34c2ee97cd03fdcf9cbafd0309435f9","modified":1483582438403},{"_id":"public/tags/Android/index.html","hash":"40243c34a1597108990fc245aabf97c3beebcb76","modified":1483582438403},{"_id":"public/tags/AsyncTask/index.html","hash":"e4f956a690c11ae889f6905c7d1bff10439d4ba6","modified":1483582438403},{"_id":"public/tags/源码剖析/index.html","hash":"c3b13defbd50454e5fdf46736dc1fd0ff5d4364c","modified":1483582438403},{"_id":"public/tags/IntentFilter/index.html","hash":"9d951c2584381bd8e5e2a5fbd2be63d548534af2","modified":1483582438403},{"_id":"public/tags/匹配规则/index.html","hash":"faf3ea907e7e82d654ba5d0bdbd5540b4ec1e31a","modified":1483582438403},{"_id":"public/tags/深入理解JVM虚拟机/index.html","hash":"2eac20619afaa4f2272ea208a687a0fb573b057e","modified":1483582438403},{"_id":"public/tags/HandlerThread/index.html","hash":"93e9f502cb512be952f2afa080479f7775bcea0f","modified":1483582438403},{"_id":"public/tags/IntentService/index.html","hash":"04ba285de47804e78b539a88b043861532bfe041","modified":1483582438403},{"_id":"public/tags/Thread/index.html","hash":"4371f4d7dfa622fe3ba92e368eedb9f1ed54d50a","modified":1483582438403},{"_id":"public/tags/View/index.html","hash":"48cadda099cee347a3b8da7a6668e5872a3154a7","modified":1483582438403},{"_id":"public/tags/弹性滑动/index.html","hash":"51f13c773336e142b56de733920bb6259b909bbe","modified":1483582438403},{"_id":"public/tags/事件分发机制/index.html","hash":"fa6f1b962ccffd1e53f4917c2f410de72870ef40","modified":1483582438403},{"_id":"public/tags/apk/index.html","hash":"bcf3b92181e0f4b2ca242e48da93147fe0117f7f","modified":1483582438403},{"_id":"public/tags/Window/index.html","hash":"7ec24b6f57265361efc2b6f244e7bdcfc9562757","modified":1483582438403},{"_id":"public/tags/WindowManager/index.html","hash":"abcf328916006ed9e342d41fb5ee524418cae66d","modified":1483582438403},{"_id":"public/tags/Service/index.html","hash":"ccef10da821fceac92972d950f8eff64aeb5873b","modified":1483582438403},{"_id":"public/tags/BroadcastReceiver/index.html","hash":"c9877080196adf014c794be52359633fdf0e91b7","modified":1483582438403},{"_id":"public/tags/ContentProvider/index.html","hash":"d9cef1cc746ed51c4bdf0cb4841c5100c00d70d1","modified":1483582438403},{"_id":"public/tags/crash/index.html","hash":"c3b7310ba9e1408bf869e4377e5ed794cd499aea","modified":1483582438403},{"_id":"public/tags/自定义View/index.html","hash":"610e520e8a10c8aba0e3cadc103e4e7cdeddb332","modified":1483582438403},{"_id":"public/tags/属性动画/index.html","hash":"48498b25d883181b1460a4421ea97561189b8d69","modified":1483582438403},{"_id":"public/tags/Annotation/index.html","hash":"1a8c110293d9a2d3fb252d318ebe24eb77f81b8a","modified":1483582438404},{"_id":"public/CNAME","hash":"2cbb9049f9dc66b40e468f84842019af40c07036","modified":1482929338088},{"_id":"public/images/Broadcast_UML.png","hash":"dc4a97d2b8ef1f6592717204788d9f716117fdee","modified":1482929338088},{"_id":"public/images/MVVM.png","hash":"95cde74b2e30419ee379ce1b7afecd4f3e20a9c4","modified":1482929338088},{"_id":"public/fonts/iconfont.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1482929338088},{"_id":"public/fonts/default-skin.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1482929338088},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1482929338088},{"_id":"public/fonts/iconfont.svg","hash":"3313bf984fbee56b022942a5d19c916b4734fd60","modified":1482929338088},{"_id":"public/fonts/iconfont.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1482929338088},{"_id":"public/fonts/iconfont.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1482929338088},{"_id":"public/fonts/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1482929338088},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1482929338088},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1482929338088},{"_id":"public/images/mvp.png","hash":"18ab1cbe44b405c660a4b3ae301d7f93f5425507","modified":1482929338088},{"_id":"public/images/build.png","hash":"cb7db6d636ea86ff4c31325c8ae8174a0766be4f","modified":1482929338100},{"_id":"public/default_img/spark.png","hash":"f1a8ed0ac077dd6001965f2e8529bafe2a3feeb3","modified":1482929338101},{"_id":"public/images/Broadcast_UML2.png","hash":"173269356b75bfe4213c28374a19e3a4938fd36b","modified":1482929338119},{"_id":"public/images/jvm_memory.png","hash":"318de2ebe17ff8184523361f18ae39795fd68ec6","modified":1482929338119},{"_id":"public/images/service_UML.png","hash":"30b35c17a3e468fcbbaab25990439bad304acfa1","modified":1482929338119},{"_id":"public/images/threads.png","hash":"11cb33726d2454c9bd4e161c9ded9d371087b90b","modified":1482929338119},{"_id":"public/main.css","hash":"17ab4ed79d8280efa9c6e80cb64f9de8c702a7da","modified":1482929338122},{"_id":"public/mobile.9097f5.js","hash":"7a22440524cc4469c26aab5ad800eb12fec29d29","modified":1482929338123},{"_id":"public/slider.72cb6f.js","hash":"d993470917b2ad46a823b87e6881bce10e72286c","modified":1482929338123},{"_id":"public/main.235424.js","hash":"8c64828398e823ab9e18f7952e7f0dfc03c24e3e","modified":1482929338123},{"_id":"public/images/Activity_UML.png","hash":"9d8bda879c62adc0b71cd26262603850ca16ab05","modified":1482929338123},{"_id":"public/images/contentprovider_UML.png","hash":"9dbe7f17e629d0f36218b5dd3c3941cd8aa320f0","modified":1482929338123},{"_id":"public/images/android_build_process_detail.png","hash":"e46dbc800ec2abb1d0aacdb53de8339477f152bf","modified":1482929338130},{"_id":"public/images/service_UML2.png","hash":"afdf0ded0d671ec79a03fddbd253de15eb5248ea","modified":1482929338130},{"_id":"public/images/qidong.png","hash":"4ca0c748f33f34dc0de0e852a382118f37d74aa8","modified":1482929338142},{"_id":"themes/yilia/.git/COMMIT_EDITMSG","hash":"6b803d3e9f72c81b4370fa11710e092f3f3e1000","modified":1483582280000},{"_id":"themes/yilia/.git/FETCH_HEAD","hash":"d0ed7dadf547e7d0b242aefd19bff8552e950380","modified":1483582317000},{"_id":"themes/yilia/.git/ORIG_HEAD","hash":"d0e8334b89b014e03ff9f03aca790ed7256e3bb3","modified":1483582317000},{"_id":"themes/yilia/source/main.d221b8.css","hash":"9e853b14b4c70a560bb6c12c9c98600d0abf798d","modified":1483582009000},{"_id":"themes/yilia/source/mobile.c853ad.js","hash":"527ce9d0d479ed467c24113ed8833b09f2aa2300","modified":1483582009000},{"_id":"themes/yilia/source/slider.59dfdc.js","hash":"28e623e183fd004ac5e0fe7984b904bd398b55c4","modified":1483582009000},{"_id":"themes/yilia/source-src/css.ejs","hash":"edc89a945d271abfb24240ab31d5ea0285530b23","modified":1483582009000},{"_id":"themes/yilia/source/main.d221b8.js","hash":"79cb6470c3a7e6851121c545a992029293b5b401","modified":1483582009000},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"facc996e4a5bb798e0e5476e233699c4ccc0630e","modified":1483582009000},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1483582009000},{"_id":"themes/yilia/source/fonts/iconfont.59e68b.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1483582009000},{"_id":"themes/yilia/source/fonts/iconfont.ca3627.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1483582009000},{"_id":"themes/yilia/source/fonts/iconfont.b7ae25.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1483582009000},{"_id":"themes/yilia/source/fonts/iconfont.dba24b.svg","hash":"3313bf984fbee56b022942a5d19c916b4734fd60","modified":1483582009000},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1483582009000},{"_id":"themes/yilia/.git/objects/0d/185c684579316c640a194c1b109c349b53fb67","hash":"f6654372d6ff7ea5bd433d4e9adc320d5c24e89d","modified":1483581804000},{"_id":"themes/yilia/.git/objects/13/66fbedb68f21f43563d69dda802cb98747cc8a","hash":"18a0f4cc2e0417c2fa48f0f2b44bb36e5e8c91b4","modified":1483581808000},{"_id":"themes/yilia/.git/objects/14/857d8a6d26617e0df51d1a28b80773baea5456","hash":"92611b27f91a059082e586b0327f2b8c88fad8dc","modified":1483581808000},{"_id":"themes/yilia/.git/objects/1b/2382955fb33446c8e556cd61f55f7a5675ecab","hash":"073b7142b65b06d3e5c61073d2c1887a8f3aa1e3","modified":1483582009000},{"_id":"themes/yilia/.git/objects/1e/0218515c98fcb1618756eeb91675d1c0f0a013","hash":"44fe70e89555f09fdb3817e8b8f4123ac2b26d5a","modified":1483582009000},{"_id":"themes/yilia/.git/objects/1e/aea0c83d96f9dbc0ede917a16172e614810f0c","hash":"8197f0d5510baaf0f41c6ae26d0fa1f627a457f8","modified":1483581808000},{"_id":"themes/yilia/.git/objects/25/4e085c7b68c2b1aaf3e6b31e78f0fdb41104e5","hash":"2c1f6b2bc752f097ab59c3948564c63be25da473","modified":1483581808000},{"_id":"themes/yilia/.git/objects/08/4391d6807cd15f815a13f1f0971555ce369c02","hash":"7f2a4572d2f00f14cc26cadfeb9717e83e0582a3","modified":1483581808000},{"_id":"themes/yilia/.git/objects/2a/e850d2753f7f8e0c0030404f6b1c5feadf370d","hash":"289fb9d7672e42d8e123f95813d456c7f04bf17d","modified":1483582009000},{"_id":"themes/yilia/.git/objects/2b/4b57a4dffb3f7dc0b4925ff4504999333f0c9f","hash":"7767cc11a91ba976460f25f52b9832abef7f4224","modified":1483581808000},{"_id":"themes/yilia/.git/objects/2b/bc592510127c30020238d7d4c0a303e3932051","hash":"13748bdb250b618b2496c00eb31cd3dbfee8f5ae","modified":1483581808000},{"_id":"themes/yilia/.git/objects/0f/e0be3954fe2127d6c66fb29bcf37fbe394f70f","hash":"02c72793134cb1d94f528156b37c7992b9afff90","modified":1483581807000},{"_id":"themes/yilia/.git/objects/10/7f56d60dd644f531a6be27f46d5548120595e2","hash":"ce930a0000cfef4fcff8d115639abd44821148ce","modified":1483581807000},{"_id":"themes/yilia/.git/objects/32/ed62421ad00df0151df99d2f99aad8824d07b6","hash":"f3f39155d5c4bbbee3d9eb15d797ae98a9a8b020","modified":1483581807000},{"_id":"themes/yilia/.git/objects/33/6cb310d217b2fef31c8ac4ca6e3aae7bc08bff","hash":"3f0041217a3e6911b7e6afd512ae29325c54889b","modified":1483581804000},{"_id":"themes/yilia/.git/objects/25/c85e982a29ffc748e9ceb71d0e67b459dd92c8","hash":"692e4da563634b8b504c3329e24922238e298060","modified":1483581808000},{"_id":"themes/yilia/.git/objects/39/5ea86865117ea69db59dc9f106da110306219a","hash":"3d435aa34bac362ea3c25d75b4a09dbec01fd588","modified":1483581808000},{"_id":"themes/yilia/.git/objects/3b/5024adedd06eb26ff9d35e0a0ad1350adbacae","hash":"110679993c11e589a5deb2e3934785c69c8e4f01","modified":1483581808000},{"_id":"themes/yilia/.git/objects/2c/444a19651a297287144d7d5800e7884f565c36","hash":"c3a25dd9c4894c789679029832b7788acd7a26b1","modified":1483581807000},{"_id":"themes/yilia/.git/objects/3e/0717034c89cec26d48820b4ce5517f1a054ffd","hash":"3cc7d11e797c61e4698773d01489e9d2a0c7735f","modified":1483581807000},{"_id":"themes/yilia/.git/objects/46/c246acf0cca9e8e82d8fdc42a48178e02628d4","hash":"c35e60156b1f4ef816d5cb21a2c08627e726793f","modified":1483581808000},{"_id":"themes/yilia/.git/objects/32/6689fed4be21a7781f1c2b5a6cb1f4010d6384","hash":"9175d98d4e016a466ae2480fb1b72030decf10a5","modified":1483581804000},{"_id":"themes/yilia/.git/objects/4c/3c2b3b4c5c6be07076f22bfc11cf3d6c0991af","hash":"8e037005ee84268b4e3ba10ecea8b52578ffab8c","modified":1483581807000},{"_id":"themes/yilia/.git/objects/34/5a035715e51a2a1da0fdb0fd9581799136de8f","hash":"43bd8af3355883fe644529dca765e09aaf685bf1","modified":1483581808000},{"_id":"themes/yilia/.git/objects/54/138c61984d36d9f822cc0cd43e9d3b42a6a705","hash":"9109f265d187f855ce85609daf7cd61c1bafb13f","modified":1483581993000},{"_id":"themes/yilia/.git/objects/54/ca212c68ef588716b376ac88a6f8884b042679","hash":"0265c6e54219107b971bc3c817dd4706d78894fb","modified":1483581808000},{"_id":"themes/yilia/.git/objects/60/35f47a95abbbd8be79f6a03744dc0c90ba77e2","hash":"f0b4576818fa079688156196928de2a986dbc3bd","modified":1483581808000},{"_id":"themes/yilia/.git/objects/50/e6d44bc75e60af8d61af89f8ebf115c3e1e9ec","hash":"e0f107809791bea4b1eebe26ab363897d2fa3164","modified":1483581807000},{"_id":"themes/yilia/.git/objects/62/104d9fbab4fe0964a841a9121bac5b7d3b2f40","hash":"ff48059eb1e9d79a61148f949ae080abe7336c6c","modified":1483582009000},{"_id":"themes/yilia/.git/objects/41/5150083ba474801a4140f0f3710ecaa9b03ca3","hash":"5ff3d9d0ea0b155ccb935cccc1689aad31b8f634","modified":1483581808000},{"_id":"themes/yilia/.git/objects/4f/8e1932bc35bccd0731cea8a7a2dfe601fed3fc","hash":"1b24d8aa5959590edf187f1f61de22426ff4c3e9","modified":1483581807000},{"_id":"themes/yilia/.git/objects/66/bbc963e2247a4c1da66a228ed173e62eea87a4","hash":"382640820c6af099a8fa40bf448e6b9a0be47d0b","modified":1483581808000},{"_id":"themes/yilia/.git/objects/6d/7b17dea0b1b0c2581117a78e4d8fb3f6ba888a","hash":"fd509996a873b2c5e96798dc8fcac6a0f68dcefd","modified":1483582009000},{"_id":"themes/yilia/.git/objects/6d/8ba68dbcd1c3ddc935d07c373a4e8846f9f999","hash":"fa4de30bdb5f4468a8273af4790abb133011bafe","modified":1483581808000},{"_id":"themes/yilia/.git/objects/68/6c769bc2878fe7ee9b7bbe3a890549cacab117","hash":"1414e5044c194cf0f4acaf14474348170c40a464","modified":1483581808000},{"_id":"themes/yilia/.git/objects/71/8e2d57a659f25985e470e5935958a96eb19b50","hash":"1718e0fd8d478f10130f02015846281dd276e508","modified":1483582009000},{"_id":"themes/yilia/.git/objects/71/c0953b4a68f29a05f8b0ef7180927699db1705","hash":"80ee8935a6c43a8bf634e7d4d5670a28248617f5","modified":1483581808000},{"_id":"themes/yilia/.git/objects/74/b0cf477d375a95b48ba05d2aac12b8c74dc440","hash":"d6f4f34862ee0ea60664979c27b79cf23b80caca","modified":1483581804000},{"_id":"themes/yilia/.git/objects/74/c1756c4d1759f48b3e56bd0664558641ee4703","hash":"5282ee9d67cf9aa897341f62c53b5991d4753bef","modified":1483581807000},{"_id":"themes/yilia/.git/objects/75/9123d43f429523d7bf69885a6f3d29e6ead0a3","hash":"29719cdfff538da9cd0478667b860655f83ea599","modified":1483581808000},{"_id":"themes/yilia/.git/objects/87/bbb620aa44b373f5d15b93dda40300e194edf6","hash":"241a9bd6a239867c89dabe9b23e0bca7409e966d","modified":1483581804000},{"_id":"themes/yilia/.git/objects/8d/0a59894af722b41f55106985e7e964e0ec55e9","hash":"d58f864cb6c99ca8a5c5317b018581940109dd33","modified":1483581804000},{"_id":"themes/yilia/.git/objects/69/2dc8b149dd90904274919a295792b549e2b289","hash":"64e459dc7244b8185166012e9c705c55279febde","modified":1483581808000},{"_id":"themes/yilia/.git/objects/6b/a04006bd9c4ae8aed92febd7ecb79a8b739767","hash":"db737a68538b7a04e365da7f5d68935ee9b2209a","modified":1483581807000},{"_id":"themes/yilia/.git/objects/9f/7102960949fac6c95e349ee21cd81d715ada9a","hash":"0be3530b064b79bfef2943dc1adb2dd9e45fe1f8","modified":1483581807000},{"_id":"themes/yilia/.git/objects/8d/ab34fdb879d5aca1c962a892f719748cb58848","hash":"ee694894053d4919e2b2775f3eab1265abd57099","modified":1483581808000},{"_id":"themes/yilia/.git/objects/8e/8365c5e50f1a7057c1c914342859144707da88","hash":"0840ceae42b50bdb2265a599247c959143fe7538","modified":1483581808000},{"_id":"themes/yilia/.git/objects/a1/6e557bf1a8290ea80a0a516142a19f92d51238","hash":"90e179c1d88b0b2ff975d7d5dd3e70b50bd70c23","modified":1483582009000},{"_id":"themes/yilia/.git/objects/a7/777847ee095696963d26581d035f1d796ea2a0","hash":"6cb28beb8ab880fcec5b534a90bca1dce977a5d8","modified":1483581808000},{"_id":"themes/yilia/.git/objects/71/0f0b7683e7174a7fafe38bd40d83b3ca9b30a9","hash":"cc10c78fd0ef486f2de164a13e0b52bd669a2406","modified":1483581808000},{"_id":"themes/yilia/.git/objects/a2/402f000112f33db77f7a8f9769cec06a20dbd1","hash":"c5fea50839c97b6e5984d77a1653fa722c464d2e","modified":1483581808000},{"_id":"themes/yilia/.git/objects/ab/be9a485d3fc53624455ceb962e746727353a89","hash":"160451243e72f0ad9371d54b9c37209b34132b52","modified":1483581808000},{"_id":"themes/yilia/.git/objects/ac/0358e961a0c08b8de53d8bd28281b03dcfea45","hash":"f97403cb6d0a213680294892f70d4aab68136584","modified":1483581808000},{"_id":"themes/yilia/.git/objects/af/4ee0a4e6a1a452771cabce53b1cfdbd8c184d5","hash":"e106fa22f01b647144153db8326edc1018838d48","modified":1483581808000},{"_id":"themes/yilia/.git/objects/aa/7bdd135742e047e2fe19f906e948df5a3549e7","hash":"03bcf902de1ab310ece7b040365a1efa031412fe","modified":1483581808000},{"_id":"themes/yilia/.git/objects/a3/adf1e7a13a83f2989cd2c1d04b97c83e0e178a","hash":"70c85790a94f7e0e9440495e95fe93c8535bc929","modified":1483581807000},{"_id":"themes/yilia/.git/objects/b5/8613c04ea8b0d9ffad8d321f82647262c5d922","hash":"abecfb085fa732db05dbcc9089ecb8484d394ad0","modified":1483581804000},{"_id":"themes/yilia/.git/objects/b7/822e9083a498eecac4a1598ec6f8f55fbdfc84","hash":"6f40d28199cf3b32632c53f1a1ad58f6b7f49ead","modified":1483581808000},{"_id":"themes/yilia/.git/objects/a9/a2c02a4c8dc82a740a92362420bdd487f99b55","hash":"33f045274da83725b07aa723f7a14037df7132ae","modified":1483581808000},{"_id":"themes/yilia/.git/objects/be/0ad08c858d1ac7159eb1c0e9ef62bf349a8d59","hash":"ca43de38062a514a7e1bdb82c1dc7d88f9487e2a","modified":1483581808000},{"_id":"themes/yilia/.git/objects/b8/ba13c480202653bf2b59d7e4c9e5835df09d6d","hash":"8fa3039d4b604e260b13d11883c1911adcd3968a","modified":1483581807000},{"_id":"themes/yilia/.git/objects/bd/7eb01378a3f3ad6961daed11383f58a47e999f","hash":"1b7b445c72e6b917d3f1f33c6dd39e205afb16f7","modified":1483581807000},{"_id":"themes/yilia/.git/objects/c6/cd0285893aefc4ce128a348f36eaea6b035295","hash":"e3618625b9d0778af91830699f31d4fbf2f322b1","modified":1483582009000},{"_id":"themes/yilia/.git/objects/c0/a73166d7c131290882e2c796c32893f23e558d","hash":"03ed583da8dbaf9afaff2b1f12474175d78d3eaf","modified":1483581807000},{"_id":"themes/yilia/.git/objects/c1/c54bd81cad0d0abf16296da82cda4ddbed174b","hash":"d9a6b347a699b55bf31eaf332423425ff7649a95","modified":1483581808000},{"_id":"themes/yilia/.git/objects/ca/970623cc607bf843927cd774966192c671b26f","hash":"0e4575580c234205ea595e66c0d75ca295dcd9b0","modified":1483581993000},{"_id":"themes/yilia/.git/objects/af/5e9019f48b950d0cb88da7c27d6106e311f986","hash":"70fa04d61feaf226e8e7d7bffe47ca92fc52c3c1","modified":1483581807000},{"_id":"themes/yilia/.git/objects/cd/0c5bb534d6dde79397b715d480d10e0fbc63a1","hash":"d2ea682ed7563219c8c3826b96609fd00ae10ad8","modified":1483582009000},{"_id":"themes/yilia/.git/objects/ca/5971c6e561ca3851d76a50b0e40ab4c0d2f8f2","hash":"7593c7d3180318b6abae593b6727c99231eb66ea","modified":1483581808000},{"_id":"themes/yilia/.git/objects/d5/75df04e5cc79babaadd1c659ab897003eb73a5","hash":"67bdfc9891fd4e7188ea4e3f4cbcfa18bd6626f6","modified":1483581808000},{"_id":"themes/yilia/.git/objects/c7/071aefeed62c7b3852ac812a9f5e352cca5fc1","hash":"48a9b54c371b87bb98c140a2970b69717282473b","modified":1483581807000},{"_id":"themes/yilia/.git/objects/d9/d498bdf0f1e6597af069bfd3f6393b8370803d","hash":"f3e2868bf32e7686711d06e0e1ddaee3b9fdd35d","modified":1483581808000},{"_id":"themes/yilia/.git/objects/d8/8eb171960469951d903bc3686f9577ae7c4f13","hash":"82e2b150c4aa05049f7c53e0e8dfe9eafd00a0a8","modified":1483581808000},{"_id":"themes/yilia/.git/objects/db/b19bbfc8f4bb91b8d797023c0ee87e75a4f9a5","hash":"36dc77f057f16bd771625948043cc9f4a3ae45fa","modified":1483581808000},{"_id":"themes/yilia/.git/objects/de/416781f472c7784d0eed715b60568de2bc065a","hash":"6c38f8f7a2b5fec340fdf9bc61cf31cd4952000f","modified":1483581807000},{"_id":"themes/yilia/.git/objects/d8/3ade75cd39ff71d100ff8e17982e9557649000","hash":"fd73f697277cf554ea49e8b38c59b51747999072","modified":1483581808000},{"_id":"themes/yilia/.git/objects/df/34fb46a06512092181a3abcab8d07944e183a0","hash":"d07c7aace4bd5820432599f3d7618440ba705ab1","modified":1483582009000},{"_id":"themes/yilia/.git/objects/e4/4512d32c67f1352d7c08285350649d00f608bd","hash":"d9a82b1bbed39f515291748099db932c82c894f6","modified":1483582280000},{"_id":"themes/yilia/.git/objects/e5/c599f8e75b1c7d40da7ef9fa295639c4719620","hash":"2e75ce6b59bec5d5eb7751c9caa3c14937473b38","modified":1483581808000},{"_id":"themes/yilia/.git/objects/da/9df938be203da2e0ed948dbaaf76c09edd66c8","hash":"f3bff8ab148979dd36f7dc809af544ac9e372e39","modified":1483581807000},{"_id":"themes/yilia/.git/objects/da/298e0933d088cd1c316e2320fbb6ec52153921","hash":"863fed2cd2a9a4ccd71863950fb2c7b882a6daa3","modified":1483581808000},{"_id":"themes/yilia/.git/objects/ed/5be7e90f243ae10b2e8144409d4825e9d6b1bc","hash":"b8f9086141a8a0f3429f71467eaa29b173cdf555","modified":1483581808000},{"_id":"themes/yilia/.git/objects/ee/5fb2151615f1a1f90db0244cd03dff01d33fb7","hash":"209df1a2751d081bf92275d7c5e4bf5703dd34a0","modified":1483581807000},{"_id":"themes/yilia/.git/objects/e4/78d1a3f3850f1c29f09e4e228ee98e255ace58","hash":"5584a735d056ca54c6c279fa999bfca582acd2f5","modified":1483581808000},{"_id":"themes/yilia/.git/objects/e8/8aebcdb80da567922cbb7b92d487d1c39f9a46","hash":"f5e0f1216a4a5cfe719f58a33c6fa849d14c782b","modified":1483581807000},{"_id":"themes/yilia/.git/objects/fd/1aa275fba1ea2998c07f5653e8d21d02bb2182","hash":"9c568b63d89db3eb3620cf93f9b0a4f75f77b60e","modified":1483581993000},{"_id":"themes/yilia/.git/objects/eb/af4f97c23f36d4c717618ccc993de9c06681f6","hash":"d1107b85970400e01ca383029ba8de5cb2afe97a","modified":1483581807000},{"_id":"themes/yilia/.git/objects/f8/20ea1c241d21775cd722a692864cc3799f26fd","hash":"219a68cb98f212a0003e214b5782732648b989db","modified":1483581807000},{"_id":"themes/yilia/.git/objects/fe/5da61eb56c80a600f3bb73539bc6e51faa23c6","hash":"9d4bd49c939d2414b1b0b7fb9cbaeb731260c1eb","modified":1483581807000},{"_id":"themes/yilia/.git/objects/fb/4a15ba198c4ba3146709ea75e6cb46da8224ef","hash":"47d037243ca2b91e94c7786b2465d72fd5f1522d","modified":1483581807000},{"_id":"themes/yilia/.git/objects/ff/343a2223f135fc8633730d027df495c90911b1","hash":"a2f1d9dde1bd682d74f8fdc6e66bf227c5c9c104","modified":1483581804000},{"_id":"themes/yilia/.git/refs/remotes/origin/master","hash":"d8581514d9fcdef2803a87f7ea3e386c648ef01f","modified":1483581808000},{"_id":"themes/yilia/.git/logs/refs/remotes/origin/master","hash":"5bffec776d1711513856745f8673211ba9b35ee0","modified":1483581808000},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1483582438407},{"_id":"public/fonts/iconfont.59e68b.eot","hash":"b7f28dc802d6e32281e8fe7930d4dd2022d00717","modified":1483582438407},{"_id":"public/fonts/iconfont.ca3627.woff","hash":"cda0ea1dc25dc3d329d7637afe2cd6aec37e351b","modified":1483582438407},{"_id":"public/fonts/iconfont.b7ae25.ttf","hash":"697449e7790edd12e208706ecaa8d5d0eed44cde","modified":1483582438407},{"_id":"public/fonts/iconfont.dba24b.svg","hash":"3313bf984fbee56b022942a5d19c916b4734fd60","modified":1483582438407},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1483582438407},{"_id":"public/main.d221b8.css","hash":"9e853b14b4c70a560bb6c12c9c98600d0abf798d","modified":1483582438409},{"_id":"public/mobile.c853ad.js","hash":"527ce9d0d479ed467c24113ed8833b09f2aa2300","modified":1483582438409},{"_id":"public/slider.59dfdc.js","hash":"28e623e183fd004ac5e0fe7984b904bd398b55c4","modified":1483582438409},{"_id":"public/main.d221b8.js","hash":"79cb6470c3a7e6851121c545a992029293b5b401","modified":1483582438409}],"Category":[{"name":"Android","_id":"cix8xu7070003wwv6raso05xp"},{"name":"Android开发艺术探索笔记","parent":"cix8xu7070003wwv6raso05xp","_id":"cix8xu70s000iwwv6e3qwm8mx"},{"name":"JVM","_id":"cix8xu711000wwwv642w1n8b9"},{"name":"Java","_id":"cix8xu71h001iwwv6z2mfhdsw"},{"name":"Android Studio","parent":"cix8xu7070003wwv6raso05xp","_id":"cix8xu71j001owwv6y7x8dox4"}],"Data":[],"Page":[{"title":"tags","date":"2016-03-11T11:51:26.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-03-11 19:51:26\n---\n","updated":"2016-12-28T12:14:26.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cix8xu6zz0000wwv60za0thba","content":"","excerpt":"","more":""}],"Post":[{"title":"AIDL","date":"2016-03-11T12:46:25.000Z","_content":"\n# 介绍\nAndroid Interface Definition Language (AIDL)， Android接口定义语言。系统中的进程之间不能共享内存，因此，需要提供一些机制在不同进程之间进行数据通信Interprocess communication (IPC)。AIDL就是解决这个问题的。\n阅读本文需要了解Service的相关知识，关于Service的讲解请参考[http://blog.csdn.net/l664675249/article/details/48899323](http://blog.csdn.net/l664675249/article/details/48899323)\n<!-- more -->\n\n# 创建.aidl文件\naidl是用Java语法编写的，后缀为.aidl的文件。\n\n- 每一个aidl文件必须定义一个接口，在这个接口里声明方法\n- 在aidl里不能有static属性（field）\n- aidl支持基本的数据类型，当你需要使用额外的数据类型时需要把它们import进来，即使它们跟这个文件在同一个包中。\n\n\n## 示例\n\n```java\n// IRemoteService.aidl\npackage com.example.android;\n\n// Declare any non-default types here with import statements\n\n/** Example service interface */\ninterface IRemoteService {\n    /** Request the process ID of this service, to do evil things with it. */\n    int getPid();\n\n    /** Demonstrates some basic types that you can use as parameters\n     * and return values in AIDL.\n     */\n    void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat,\n            double aDouble, String aString);\n}\n```\n\n把aidl文件存在src/目录下，当你build项目的时候，SDK工具会在gen/目录下生成一个与.aidl文件名字相同的.java文件。\n# 实现接口\n生成的IRemoteService.java如下\n\n```java\npublic interface IRemoteService extends android.os.IInterface\n{\n/** Local-side IPC implementation stub class. */\npublic static abstract class Stub extends android.os.Binder implements com.spark.meizi.IRemoteService\n{\nprivate static final java.lang.String DESCRIPTOR = \"com.spark.meizi.IRemoteService\";\n/** Construct the stub at attach it to the interface. */\npublic Stub()\n{\nthis.attachInterface(this, DESCRIPTOR);\n}\n/**\n * Cast an IBinder object into an com.spark.meizi.IRemoteService interface,\n * generating a proxy if needed.\n */\npublic static com.spark.meizi.IRemoteService asInterface(android.os.IBinder obj)\n{\nif ((obj==null)) {\nreturn null;\n}\nandroid.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);\nif (((iin!=null)&&(iin instanceof com.spark.meizi.IRemoteService))) {\nreturn ((com.spark.meizi.IRemoteService)iin);\n}\nreturn new com.spark.meizi.IRemoteService.Stub.Proxy(obj);\n}\n@Override public android.os.IBinder asBinder()\n{\nreturn this;\n}\n@Override public boolean onTransact(int code, android.os.Parcel data, android.os.Parcel reply, int flags) throws android.os.RemoteException\n{\nswitch (code)\n{\ncase INTERFACE_TRANSACTION:\n{\nreply.writeString(DESCRIPTOR);\nreturn true;\n}\ncase TRANSACTION_basicTypes:\n{\ndata.enforceInterface(DESCRIPTOR);\nint _arg0;\n_arg0 = data.readInt();\nlong _arg1;\n_arg1 = data.readLong();\nboolean _arg2;\n_arg2 = (0!=data.readInt());\nfloat _arg3;\n_arg3 = data.readFloat();\ndouble _arg4;\n_arg4 = data.readDouble();\njava.lang.String _arg5;\n_arg5 = data.readString();\nthis.basicTypes(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5);\nreply.writeNoException();\nreturn true;\n}\n}\nreturn super.onTransact(code, data, reply, flags);\n}\nprivate static class Proxy implements com.spark.meizi.IRemoteService\n{\nprivate android.os.IBinder mRemote;\nProxy(android.os.IBinder remote)\n{\nmRemote = remote;\n}\n@Override public android.os.IBinder asBinder()\n{\nreturn mRemote;\n}\npublic java.lang.String getInterfaceDescriptor()\n{\nreturn DESCRIPTOR;\n}\n/**\n     * Demonstrates some basic types that you can use as parameters\n     * and return values in AIDL.\n     */\n@Override public void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat, double aDouble, java.lang.String aString) throws android.os.RemoteException\n{\nandroid.os.Parcel _data = android.os.Parcel.obtain();\nandroid.os.Parcel _reply = android.os.Parcel.obtain();\ntry {\n_data.writeInterfaceToken(DESCRIPTOR);\n_data.writeInt(anInt);\n_data.writeLong(aLong);\n_data.writeInt(((aBoolean)?(1):(0)));\n_data.writeFloat(aFloat);\n_data.writeDouble(aDouble);\n_data.writeString(aString);\nmRemote.transact(Stub.TRANSACTION_basicTypes, _data, _reply, 0);\n_reply.readException();\n}\nfinally {\n_reply.recycle();\n_data.recycle();\n}\n}\n}\nstatic final int TRANSACTION_basicTypes = (android.os.IBinder.FIRST_CALL_TRANSACTION + 0);\n}\n/**\n     * Demonstrates some basic types that you can use as parameters\n     * and return values in AIDL.\n     */\npublic void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat, double aDouble, java.lang.String aString) throws android.os.RemoteException;\n}\n```\n在这个文件中有一个**内部类Stub**，这是父接口的一个抽象实现，并声明了aidl中的所有方法。为了实现由aidl生成的接口，我们需要继承Stub并实现从aidl继承过来的方法。下面是一个使用匿名类的例子\n\n```java\nprivate final IRemoteService.Stub mBinder = new IRemoteService.Stub() {\n    public int getPid(){\n        return Process.myPid();\n    }\n    public void basicTypes(int anInt, long aLong, boolean aBoolean,\n        float aFloat, double aDouble, String aString) {\n        // Does nothing\n    }\n};\n```\n这样mBinder就是一个Stub的实例了，下一步就是如何在client端使用，与service端产生交互了。\n注：\n\n- 不能保证请求是在主线程被执行的，所以从构建到使用要考虑Service线程的安全性\n- 默认情况下，请求是同步的，所以尽量不要在主线程中发出请求\n- 所有的异常都不会返回给请求者（Caller）\n\n# 在Client中使用接口\n当你已经实现你的Service之后，你需把它暴露在Client中使Client可以绑定它。继承Service并实现onBind()方法，来返回一个实现了Stub的实例。下面就是一个把IRemoteService暴露给Client的例子：\n\n```java\npublic class RemoteService extends Service {\n    @Override\n    public void onCreate() {\n        super.onCreate();\n    }\n\n    @Override\n    public IBinder onBind(Intent intent) {\n        // Return the interface\n        return mBinder;\n    }\n\n    private final IRemoteService.Stub mBinder = new IRemoteService.Stub() {\n        public int getPid(){\n            return Process.myPid();\n        }\n        public void basicTypes(int anInt, long aLong, boolean aBoolean,\n            float aFloat, double aDouble, String aString) {\n            // Does nothing\n        }\n    };\n}\n\n```\n现在client（比如是一个Activity）可以调用bindService()来连接这个Service，通过onServiceConnected()来接收Service中 onBind() 返回的mBinder，最后使用YourServiceInterface.Stub.asInterface(service)来把返回的mBinder转换成YourServiceInterface类型。例子如下：\n\n```java\nIRemoteService mIRemoteService;\nprivate ServiceConnection mConnection = new ServiceConnection() {\n    // Called when the connection with the service is established\n    public void onServiceConnected(ComponentName className, IBinder service) {\n        // Following the example above for an AIDL interface,\n        // this gets an instance of the IRemoteInterface, which we can use to call on the service\n        mIRemoteService = IRemoteService.Stub.asInterface(service);\n    }\n\n    // Called when the connection with the service disconnects unexpectedly\n    public void onServiceDisconnected(ComponentName className) {\n        Log.e(TAG, \"Service has unexpectedly disconnected\");\n        mIRemoteService = null;\n    }\n};\n```\n注：\n如果Service和Client在两个不同的Application中，Client的Application的src/目录下必须也有对应的.aidl文件。\n# 一个Client的例子\n```java\npublic static class Binding extends Activity {\n    /** The primary interface we will be calling on the service. */\n    IRemoteService mService = null;\n    /** Another interface we use on the service. */\n    ISecondary mSecondaryService = null;\n\n    Button mKillButton;\n    TextView mCallbackText;\n\n    private boolean mIsBound;\n\n    /**\n     * Standard initialization of this activity.  Set up the UI, then wait\n     * for the user to poke it before doing anything.\n     */\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.remote_service_binding);\n\n        // Watch for button clicks.\n        Button button = (Button)findViewById(R.id.bind);\n        button.setOnClickListener(mBindListener);\n        button = (Button)findViewById(R.id.unbind);\n        button.setOnClickListener(mUnbindListener);\n        mKillButton = (Button)findViewById(R.id.kill);\n        mKillButton.setOnClickListener(mKillListener);\n        mKillButton.setEnabled(false);\n\n        mCallbackText = (TextView)findViewById(R.id.callback);\n        mCallbackText.setText(\"Not attached.\");\n    }\n\n    /**\n     * Class for interacting with the main interface of the service.\n     */\n    private ServiceConnection mConnection = new ServiceConnection() {\n        public void onServiceConnected(ComponentName className,\n                IBinder service) {\n            // This is called when the connection with the service has been\n            // established, giving us the service object we can use to\n            // interact with the service.  We are communicating with our\n            // service through an IDL interface, so get a client-side\n            // representation of that from the raw service object.\n            mService = IRemoteService.Stub.asInterface(service);\n            mKillButton.setEnabled(true);\n            mCallbackText.setText(\"Attached.\");\n\n            // We want to monitor the service for as long as we are\n            // connected to it.\n            try {\n                mService.registerCallback(mCallback);\n            } catch (RemoteException e) {\n                // In this case the service has crashed before we could even\n                // do anything with it; we can count on soon being\n                // disconnected (and then reconnected if it can be restarted)\n                // so there is no need to do anything here.\n            }\n\n            // As part of the sample, tell the user what happened.\n            Toast.makeText(Binding.this, R.string.remote_service_connected,\n                    Toast.LENGTH_SHORT).show();\n        }\n\n        public void onServiceDisconnected(ComponentName className) {\n            // This is called when the connection with the service has been\n            // unexpectedly disconnected -- that is, its process crashed.\n            mService = null;\n            mKillButton.setEnabled(false);\n            mCallbackText.setText(\"Disconnected.\");\n\n            // As part of the sample, tell the user what happened.\n            Toast.makeText(Binding.this, R.string.remote_service_disconnected,\n                    Toast.LENGTH_SHORT).show();\n        }\n    };\n\n    /**\n     * Class for interacting with the secondary interface of the service.\n     */\n    private ServiceConnection mSecondaryConnection = new ServiceConnection() {\n        public void onServiceConnected(ComponentName className,\n                IBinder service) {\n            // Connecting to a secondary interface is the same as any\n            // other interface.\n            mSecondaryService = ISecondary.Stub.asInterface(service);\n            mKillButton.setEnabled(true);\n        }\n\n        public void onServiceDisconnected(ComponentName className) {\n            mSecondaryService = null;\n            mKillButton.setEnabled(false);\n        }\n    };\n\n    private OnClickListener mBindListener = new OnClickListener() {\n        public void onClick(View v) {\n            // Establish a couple connections with the service, binding\n            // by interface names.  This allows other applications to be\n            // installed that replace the remote service by implementing\n            // the same interface.\n            Intent intent = new Intent(Binding.this, RemoteService.class);\n            intent.setAction(IRemoteService.class.getName());\n            bindService(intent, mConnection, Context.BIND_AUTO_CREATE);\n            intent.setAction(ISecondary.class.getName());\n            bindService(intent, mSecondaryConnection, Context.BIND_AUTO_CREATE);\n            mIsBound = true;\n            mCallbackText.setText(\"Binding.\");\n        }\n    };\n\n    private OnClickListener mUnbindListener = new OnClickListener() {\n        public void onClick(View v) {\n            if (mIsBound) {\n                // If we have received the service, and hence registered with\n                // it, then now is the time to unregister.\n                if (mService != null) {\n                    try {\n                        mService.unregisterCallback(mCallback);\n                    } catch (RemoteException e) {\n                        // There is nothing special we need to do if the service\n                        // has crashed.\n                    }\n                }\n\n                // Detach our existing connection.\n                unbindService(mConnection);\n                unbindService(mSecondaryConnection);\n                mKillButton.setEnabled(false);\n                mIsBound = false;\n                mCallbackText.setText(\"Unbinding.\");\n            }\n        }\n    };\n\n    private OnClickListener mKillListener = new OnClickListener() {\n        public void onClick(View v) {\n            // To kill the process hosting our service, we need to know its\n            // PID.  Conveniently our service has a call that will return\n            // to us that information.\n            if (mSecondaryService != null) {\n                try {\n                    int pid = mSecondaryService.getPid();\n                    // Note that, though this API allows us to request to\n                    // kill any process based on its PID, the kernel will\n                    // still impose standard restrictions on which PIDs you\n                    // are actually able to kill.  Typically this means only\n                    // the process running your application and any additional\n                    // processes created by that app as shown here; packages\n                    // sharing a common UID will also be able to kill each\n                    // other's processes.\n                    Process.killProcess(pid);\n                    mCallbackText.setText(\"Killed service process.\");\n                } catch (RemoteException ex) {\n                    // Recover gracefully from the process hosting the\n                    // server dying.\n                    // Just for purposes of the sample, put up a notification.\n                    Toast.makeText(Binding.this,\n                            R.string.remote_call_failed,\n                            Toast.LENGTH_SHORT).show();\n                }\n            }\n        }\n    };\n\n    // ----------------------------------------------------------------------\n    // Code showing how to deal with callbacks.\n    // ----------------------------------------------------------------------\n\n    /**\n     * This implementation is used to receive callbacks from the remote\n     * service.\n     */\n    private IRemoteServiceCallback mCallback = new IRemoteServiceCallback.Stub() {\n        /**\n         * This is called by the remote service regularly to tell us about\n         * new values.  Note that IPC calls are dispatched through a thread\n         * pool running in each process, so the code executing here will\n         * NOT be running in our main thread like most other things -- so,\n         * to update the UI, we need to use a Handler to hop over there.\n         */\n        public void valueChanged(int value) {\n            mHandler.sendMessage(mHandler.obtainMessage(BUMP_MSG, value, 0));\n        }\n    };\n\n    private static final int BUMP_MSG = 1;\n\n    private Handler mHandler = new Handler() {\n        @Override public void handleMessage(Message msg) {\n            switch (msg.what) {\n                case BUMP_MSG:\n                    mCallbackText.setText(\"Received from service: \" + msg.arg1);\n                    break;\n                default:\n                    super.handleMessage(msg);\n            }\n        }\n\n    };\n}\n```","source":"_posts/AIDL.md","raw":"title: AIDL\ndate: 2016/3/11 20:46:25\ncategories:\n- Android\n- Android开发艺术探索笔记\ntags:\n- AIDL\n- IPC\n---\n\n# 介绍\nAndroid Interface Definition Language (AIDL)， Android接口定义语言。系统中的进程之间不能共享内存，因此，需要提供一些机制在不同进程之间进行数据通信Interprocess communication (IPC)。AIDL就是解决这个问题的。\n阅读本文需要了解Service的相关知识，关于Service的讲解请参考[http://blog.csdn.net/l664675249/article/details/48899323](http://blog.csdn.net/l664675249/article/details/48899323)\n<!-- more -->\n\n# 创建.aidl文件\naidl是用Java语法编写的，后缀为.aidl的文件。\n\n- 每一个aidl文件必须定义一个接口，在这个接口里声明方法\n- 在aidl里不能有static属性（field）\n- aidl支持基本的数据类型，当你需要使用额外的数据类型时需要把它们import进来，即使它们跟这个文件在同一个包中。\n\n\n## 示例\n\n```java\n// IRemoteService.aidl\npackage com.example.android;\n\n// Declare any non-default types here with import statements\n\n/** Example service interface */\ninterface IRemoteService {\n    /** Request the process ID of this service, to do evil things with it. */\n    int getPid();\n\n    /** Demonstrates some basic types that you can use as parameters\n     * and return values in AIDL.\n     */\n    void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat,\n            double aDouble, String aString);\n}\n```\n\n把aidl文件存在src/目录下，当你build项目的时候，SDK工具会在gen/目录下生成一个与.aidl文件名字相同的.java文件。\n# 实现接口\n生成的IRemoteService.java如下\n\n```java\npublic interface IRemoteService extends android.os.IInterface\n{\n/** Local-side IPC implementation stub class. */\npublic static abstract class Stub extends android.os.Binder implements com.spark.meizi.IRemoteService\n{\nprivate static final java.lang.String DESCRIPTOR = \"com.spark.meizi.IRemoteService\";\n/** Construct the stub at attach it to the interface. */\npublic Stub()\n{\nthis.attachInterface(this, DESCRIPTOR);\n}\n/**\n * Cast an IBinder object into an com.spark.meizi.IRemoteService interface,\n * generating a proxy if needed.\n */\npublic static com.spark.meizi.IRemoteService asInterface(android.os.IBinder obj)\n{\nif ((obj==null)) {\nreturn null;\n}\nandroid.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);\nif (((iin!=null)&&(iin instanceof com.spark.meizi.IRemoteService))) {\nreturn ((com.spark.meizi.IRemoteService)iin);\n}\nreturn new com.spark.meizi.IRemoteService.Stub.Proxy(obj);\n}\n@Override public android.os.IBinder asBinder()\n{\nreturn this;\n}\n@Override public boolean onTransact(int code, android.os.Parcel data, android.os.Parcel reply, int flags) throws android.os.RemoteException\n{\nswitch (code)\n{\ncase INTERFACE_TRANSACTION:\n{\nreply.writeString(DESCRIPTOR);\nreturn true;\n}\ncase TRANSACTION_basicTypes:\n{\ndata.enforceInterface(DESCRIPTOR);\nint _arg0;\n_arg0 = data.readInt();\nlong _arg1;\n_arg1 = data.readLong();\nboolean _arg2;\n_arg2 = (0!=data.readInt());\nfloat _arg3;\n_arg3 = data.readFloat();\ndouble _arg4;\n_arg4 = data.readDouble();\njava.lang.String _arg5;\n_arg5 = data.readString();\nthis.basicTypes(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5);\nreply.writeNoException();\nreturn true;\n}\n}\nreturn super.onTransact(code, data, reply, flags);\n}\nprivate static class Proxy implements com.spark.meizi.IRemoteService\n{\nprivate android.os.IBinder mRemote;\nProxy(android.os.IBinder remote)\n{\nmRemote = remote;\n}\n@Override public android.os.IBinder asBinder()\n{\nreturn mRemote;\n}\npublic java.lang.String getInterfaceDescriptor()\n{\nreturn DESCRIPTOR;\n}\n/**\n     * Demonstrates some basic types that you can use as parameters\n     * and return values in AIDL.\n     */\n@Override public void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat, double aDouble, java.lang.String aString) throws android.os.RemoteException\n{\nandroid.os.Parcel _data = android.os.Parcel.obtain();\nandroid.os.Parcel _reply = android.os.Parcel.obtain();\ntry {\n_data.writeInterfaceToken(DESCRIPTOR);\n_data.writeInt(anInt);\n_data.writeLong(aLong);\n_data.writeInt(((aBoolean)?(1):(0)));\n_data.writeFloat(aFloat);\n_data.writeDouble(aDouble);\n_data.writeString(aString);\nmRemote.transact(Stub.TRANSACTION_basicTypes, _data, _reply, 0);\n_reply.readException();\n}\nfinally {\n_reply.recycle();\n_data.recycle();\n}\n}\n}\nstatic final int TRANSACTION_basicTypes = (android.os.IBinder.FIRST_CALL_TRANSACTION + 0);\n}\n/**\n     * Demonstrates some basic types that you can use as parameters\n     * and return values in AIDL.\n     */\npublic void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat, double aDouble, java.lang.String aString) throws android.os.RemoteException;\n}\n```\n在这个文件中有一个**内部类Stub**，这是父接口的一个抽象实现，并声明了aidl中的所有方法。为了实现由aidl生成的接口，我们需要继承Stub并实现从aidl继承过来的方法。下面是一个使用匿名类的例子\n\n```java\nprivate final IRemoteService.Stub mBinder = new IRemoteService.Stub() {\n    public int getPid(){\n        return Process.myPid();\n    }\n    public void basicTypes(int anInt, long aLong, boolean aBoolean,\n        float aFloat, double aDouble, String aString) {\n        // Does nothing\n    }\n};\n```\n这样mBinder就是一个Stub的实例了，下一步就是如何在client端使用，与service端产生交互了。\n注：\n\n- 不能保证请求是在主线程被执行的，所以从构建到使用要考虑Service线程的安全性\n- 默认情况下，请求是同步的，所以尽量不要在主线程中发出请求\n- 所有的异常都不会返回给请求者（Caller）\n\n# 在Client中使用接口\n当你已经实现你的Service之后，你需把它暴露在Client中使Client可以绑定它。继承Service并实现onBind()方法，来返回一个实现了Stub的实例。下面就是一个把IRemoteService暴露给Client的例子：\n\n```java\npublic class RemoteService extends Service {\n    @Override\n    public void onCreate() {\n        super.onCreate();\n    }\n\n    @Override\n    public IBinder onBind(Intent intent) {\n        // Return the interface\n        return mBinder;\n    }\n\n    private final IRemoteService.Stub mBinder = new IRemoteService.Stub() {\n        public int getPid(){\n            return Process.myPid();\n        }\n        public void basicTypes(int anInt, long aLong, boolean aBoolean,\n            float aFloat, double aDouble, String aString) {\n            // Does nothing\n        }\n    };\n}\n\n```\n现在client（比如是一个Activity）可以调用bindService()来连接这个Service，通过onServiceConnected()来接收Service中 onBind() 返回的mBinder，最后使用YourServiceInterface.Stub.asInterface(service)来把返回的mBinder转换成YourServiceInterface类型。例子如下：\n\n```java\nIRemoteService mIRemoteService;\nprivate ServiceConnection mConnection = new ServiceConnection() {\n    // Called when the connection with the service is established\n    public void onServiceConnected(ComponentName className, IBinder service) {\n        // Following the example above for an AIDL interface,\n        // this gets an instance of the IRemoteInterface, which we can use to call on the service\n        mIRemoteService = IRemoteService.Stub.asInterface(service);\n    }\n\n    // Called when the connection with the service disconnects unexpectedly\n    public void onServiceDisconnected(ComponentName className) {\n        Log.e(TAG, \"Service has unexpectedly disconnected\");\n        mIRemoteService = null;\n    }\n};\n```\n注：\n如果Service和Client在两个不同的Application中，Client的Application的src/目录下必须也有对应的.aidl文件。\n# 一个Client的例子\n```java\npublic static class Binding extends Activity {\n    /** The primary interface we will be calling on the service. */\n    IRemoteService mService = null;\n    /** Another interface we use on the service. */\n    ISecondary mSecondaryService = null;\n\n    Button mKillButton;\n    TextView mCallbackText;\n\n    private boolean mIsBound;\n\n    /**\n     * Standard initialization of this activity.  Set up the UI, then wait\n     * for the user to poke it before doing anything.\n     */\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.remote_service_binding);\n\n        // Watch for button clicks.\n        Button button = (Button)findViewById(R.id.bind);\n        button.setOnClickListener(mBindListener);\n        button = (Button)findViewById(R.id.unbind);\n        button.setOnClickListener(mUnbindListener);\n        mKillButton = (Button)findViewById(R.id.kill);\n        mKillButton.setOnClickListener(mKillListener);\n        mKillButton.setEnabled(false);\n\n        mCallbackText = (TextView)findViewById(R.id.callback);\n        mCallbackText.setText(\"Not attached.\");\n    }\n\n    /**\n     * Class for interacting with the main interface of the service.\n     */\n    private ServiceConnection mConnection = new ServiceConnection() {\n        public void onServiceConnected(ComponentName className,\n                IBinder service) {\n            // This is called when the connection with the service has been\n            // established, giving us the service object we can use to\n            // interact with the service.  We are communicating with our\n            // service through an IDL interface, so get a client-side\n            // representation of that from the raw service object.\n            mService = IRemoteService.Stub.asInterface(service);\n            mKillButton.setEnabled(true);\n            mCallbackText.setText(\"Attached.\");\n\n            // We want to monitor the service for as long as we are\n            // connected to it.\n            try {\n                mService.registerCallback(mCallback);\n            } catch (RemoteException e) {\n                // In this case the service has crashed before we could even\n                // do anything with it; we can count on soon being\n                // disconnected (and then reconnected if it can be restarted)\n                // so there is no need to do anything here.\n            }\n\n            // As part of the sample, tell the user what happened.\n            Toast.makeText(Binding.this, R.string.remote_service_connected,\n                    Toast.LENGTH_SHORT).show();\n        }\n\n        public void onServiceDisconnected(ComponentName className) {\n            // This is called when the connection with the service has been\n            // unexpectedly disconnected -- that is, its process crashed.\n            mService = null;\n            mKillButton.setEnabled(false);\n            mCallbackText.setText(\"Disconnected.\");\n\n            // As part of the sample, tell the user what happened.\n            Toast.makeText(Binding.this, R.string.remote_service_disconnected,\n                    Toast.LENGTH_SHORT).show();\n        }\n    };\n\n    /**\n     * Class for interacting with the secondary interface of the service.\n     */\n    private ServiceConnection mSecondaryConnection = new ServiceConnection() {\n        public void onServiceConnected(ComponentName className,\n                IBinder service) {\n            // Connecting to a secondary interface is the same as any\n            // other interface.\n            mSecondaryService = ISecondary.Stub.asInterface(service);\n            mKillButton.setEnabled(true);\n        }\n\n        public void onServiceDisconnected(ComponentName className) {\n            mSecondaryService = null;\n            mKillButton.setEnabled(false);\n        }\n    };\n\n    private OnClickListener mBindListener = new OnClickListener() {\n        public void onClick(View v) {\n            // Establish a couple connections with the service, binding\n            // by interface names.  This allows other applications to be\n            // installed that replace the remote service by implementing\n            // the same interface.\n            Intent intent = new Intent(Binding.this, RemoteService.class);\n            intent.setAction(IRemoteService.class.getName());\n            bindService(intent, mConnection, Context.BIND_AUTO_CREATE);\n            intent.setAction(ISecondary.class.getName());\n            bindService(intent, mSecondaryConnection, Context.BIND_AUTO_CREATE);\n            mIsBound = true;\n            mCallbackText.setText(\"Binding.\");\n        }\n    };\n\n    private OnClickListener mUnbindListener = new OnClickListener() {\n        public void onClick(View v) {\n            if (mIsBound) {\n                // If we have received the service, and hence registered with\n                // it, then now is the time to unregister.\n                if (mService != null) {\n                    try {\n                        mService.unregisterCallback(mCallback);\n                    } catch (RemoteException e) {\n                        // There is nothing special we need to do if the service\n                        // has crashed.\n                    }\n                }\n\n                // Detach our existing connection.\n                unbindService(mConnection);\n                unbindService(mSecondaryConnection);\n                mKillButton.setEnabled(false);\n                mIsBound = false;\n                mCallbackText.setText(\"Unbinding.\");\n            }\n        }\n    };\n\n    private OnClickListener mKillListener = new OnClickListener() {\n        public void onClick(View v) {\n            // To kill the process hosting our service, we need to know its\n            // PID.  Conveniently our service has a call that will return\n            // to us that information.\n            if (mSecondaryService != null) {\n                try {\n                    int pid = mSecondaryService.getPid();\n                    // Note that, though this API allows us to request to\n                    // kill any process based on its PID, the kernel will\n                    // still impose standard restrictions on which PIDs you\n                    // are actually able to kill.  Typically this means only\n                    // the process running your application and any additional\n                    // processes created by that app as shown here; packages\n                    // sharing a common UID will also be able to kill each\n                    // other's processes.\n                    Process.killProcess(pid);\n                    mCallbackText.setText(\"Killed service process.\");\n                } catch (RemoteException ex) {\n                    // Recover gracefully from the process hosting the\n                    // server dying.\n                    // Just for purposes of the sample, put up a notification.\n                    Toast.makeText(Binding.this,\n                            R.string.remote_call_failed,\n                            Toast.LENGTH_SHORT).show();\n                }\n            }\n        }\n    };\n\n    // ----------------------------------------------------------------------\n    // Code showing how to deal with callbacks.\n    // ----------------------------------------------------------------------\n\n    /**\n     * This implementation is used to receive callbacks from the remote\n     * service.\n     */\n    private IRemoteServiceCallback mCallback = new IRemoteServiceCallback.Stub() {\n        /**\n         * This is called by the remote service regularly to tell us about\n         * new values.  Note that IPC calls are dispatched through a thread\n         * pool running in each process, so the code executing here will\n         * NOT be running in our main thread like most other things -- so,\n         * to update the UI, we need to use a Handler to hop over there.\n         */\n        public void valueChanged(int value) {\n            mHandler.sendMessage(mHandler.obtainMessage(BUMP_MSG, value, 0));\n        }\n    };\n\n    private static final int BUMP_MSG = 1;\n\n    private Handler mHandler = new Handler() {\n        @Override public void handleMessage(Message msg) {\n            switch (msg.what) {\n                case BUMP_MSG:\n                    mCallbackText.setText(\"Received from service: \" + msg.arg1);\n                    break;\n                default:\n                    super.handleMessage(msg);\n            }\n        }\n\n    };\n}\n```","slug":"AIDL","published":1,"updated":"2016-12-28T12:14:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix8xu7010001wwv65n4dtr8e","content":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>Android Interface Definition Language (AIDL)， Android接口定义语言。系统中的进程之间不能共享内存，因此，需要提供一些机制在不同进程之间进行数据通信Interprocess communication (IPC)。AIDL就是解决这个问题的。<br>阅读本文需要了解Service的相关知识，关于Service的讲解请参考<a href=\"http://blog.csdn.net/l664675249/article/details/48899323\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/l664675249/article/details/48899323</a><br><a id=\"more\"></a></p>\n<h1 id=\"创建-aidl文件\"><a href=\"#创建-aidl文件\" class=\"headerlink\" title=\"创建.aidl文件\"></a>创建.aidl文件</h1><p>aidl是用Java语法编写的，后缀为.aidl的文件。</p>\n<ul>\n<li>每一个aidl文件必须定义一个接口，在这个接口里声明方法</li>\n<li>在aidl里不能有static属性（field）</li>\n<li>aidl支持基本的数据类型，当你需要使用额外的数据类型时需要把它们import进来，即使它们跟这个文件在同一个包中。</li>\n</ul>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// IRemoteService.aidl</span></div><div class=\"line\"><span class=\"keyword\">package</span> com.example.android;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Declare any non-default types here with import statements</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/** Example service interface */</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IRemoteService</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/** Request the process ID of this service, to do evil things with it. */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getPid</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** Demonstrates some basic types that you can use as parameters</span></div><div class=\"line\">     * and return values in AIDL.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">basicTypes</span><span class=\"params\">(<span class=\"keyword\">int</span> anInt, <span class=\"keyword\">long</span> aLong, <span class=\"keyword\">boolean</span> aBoolean, <span class=\"keyword\">float</span> aFloat,</span></span></div><div class=\"line\">            <span class=\"keyword\">double</span> aDouble, String aString);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>把aidl文件存在src/目录下，当你build项目的时候，SDK工具会在gen/目录下生成一个与.aidl文件名字相同的.java文件。</p>\n<h1 id=\"实现接口\"><a href=\"#实现接口\" class=\"headerlink\" title=\"实现接口\"></a>实现接口</h1><p>生成的IRemoteService.java如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IRemoteService</span> <span class=\"keyword\">extends</span> <span class=\"title\">android</span>.<span class=\"title\">os</span>.<span class=\"title\">IInterface</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"comment\">/** Local-side IPC implementation stub class. */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stub</span> <span class=\"keyword\">extends</span> <span class=\"title\">android</span>.<span class=\"title\">os</span>.<span class=\"title\">Binder</span> <span class=\"keyword\">implements</span> <span class=\"title\">com</span>.<span class=\"title\">spark</span>.<span class=\"title\">meizi</span>.<span class=\"title\">IRemoteService</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> java.lang.String DESCRIPTOR = <span class=\"string\">\"com.spark.meizi.IRemoteService\"</span>;</div><div class=\"line\"><span class=\"comment\">/** Construct the stub at attach it to the interface. */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Stub</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">this</span>.attachInterface(<span class=\"keyword\">this</span>, DESCRIPTOR);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Cast an IBinder object into an com.spark.meizi.IRemoteService interface,</div><div class=\"line\"> * generating a proxy if needed.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> com.spark.meizi.<span class=\"function\">IRemoteService <span class=\"title\">asInterface</span><span class=\"params\">(android.os.IBinder obj)</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">if</span> ((obj==<span class=\"keyword\">null</span>)) &#123;</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);</div><div class=\"line\"><span class=\"keyword\">if</span> (((iin!=<span class=\"keyword\">null</span>)&amp;&amp;(iin <span class=\"keyword\">instanceof</span> com.spark.meizi.IRemoteService))) &#123;</div><div class=\"line\"><span class=\"keyword\">return</span> ((com.spark.meizi.IRemoteService)iin);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> com.spark.meizi.IRemoteService.Stub.Proxy(obj);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">@Override</span> <span class=\"keyword\">public</span> android.os.<span class=\"function\">IBinder <span class=\"title\">asBinder</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTransact</span><span class=\"params\">(<span class=\"keyword\">int</span> code, android.os.Parcel data, android.os.Parcel reply, <span class=\"keyword\">int</span> flags)</span> <span class=\"keyword\">throws</span> android.os.RemoteException</span></div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">switch</span> (code)</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">case</span> INTERFACE_TRANSACTION:</div><div class=\"line\">&#123;</div><div class=\"line\">reply.writeString(DESCRIPTOR);</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">case</span> TRANSACTION_basicTypes:</div><div class=\"line\">&#123;</div><div class=\"line\">data.enforceInterface(DESCRIPTOR);</div><div class=\"line\"><span class=\"keyword\">int</span> _arg0;</div><div class=\"line\">_arg0 = data.readInt();</div><div class=\"line\"><span class=\"keyword\">long</span> _arg1;</div><div class=\"line\">_arg1 = data.readLong();</div><div class=\"line\"><span class=\"keyword\">boolean</span> _arg2;</div><div class=\"line\">_arg2 = (<span class=\"number\">0</span>!=data.readInt());</div><div class=\"line\"><span class=\"keyword\">float</span> _arg3;</div><div class=\"line\">_arg3 = data.readFloat();</div><div class=\"line\"><span class=\"keyword\">double</span> _arg4;</div><div class=\"line\">_arg4 = data.readDouble();</div><div class=\"line\">java.lang.String _arg5;</div><div class=\"line\">_arg5 = data.readString();</div><div class=\"line\"><span class=\"keyword\">this</span>.basicTypes(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5);</div><div class=\"line\">reply.writeNoException();</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onTransact(code, data, reply, flags);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">com</span>.<span class=\"title\">spark</span>.<span class=\"title\">meizi</span>.<span class=\"title\">IRemoteService</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">private</span> android.os.IBinder mRemote;</div><div class=\"line\">Proxy(android.os.IBinder remote)</div><div class=\"line\">&#123;</div><div class=\"line\">mRemote = remote;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">@Override</span> <span class=\"keyword\">public</span> android.os.<span class=\"function\">IBinder <span class=\"title\">asBinder</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">return</span> mRemote;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> java.lang.<span class=\"function\">String <span class=\"title\">getInterfaceDescriptor</span><span class=\"params\">()</span></span></div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">return</span> DESCRIPTOR;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">     * Demonstrates some basic types that you can use as parameters</div><div class=\"line\">     * and return values in AIDL.</div><div class=\"line\">     */</div><div class=\"line\"><span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">basicTypes</span><span class=\"params\">(<span class=\"keyword\">int</span> anInt, <span class=\"keyword\">long</span> aLong, <span class=\"keyword\">boolean</span> aBoolean, <span class=\"keyword\">float</span> aFloat, <span class=\"keyword\">double</span> aDouble, java.lang.String aString)</span> <span class=\"keyword\">throws</span> android.os.RemoteException</span></div><div class=\"line\">&#123;</div><div class=\"line\">android.os.Parcel _data = android.os.Parcel.obtain();</div><div class=\"line\">android.os.Parcel _reply = android.os.Parcel.obtain();</div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">_data.writeInterfaceToken(DESCRIPTOR);</div><div class=\"line\">_data.writeInt(anInt);</div><div class=\"line\">_data.writeLong(aLong);</div><div class=\"line\">_data.writeInt(((aBoolean)?(<span class=\"number\">1</span>):(<span class=\"number\">0</span>)));</div><div class=\"line\">_data.writeFloat(aFloat);</div><div class=\"line\">_data.writeDouble(aDouble);</div><div class=\"line\">_data.writeString(aString);</div><div class=\"line\">mRemote.transact(Stub.TRANSACTION_basicTypes, _data, _reply, <span class=\"number\">0</span>);</div><div class=\"line\">_reply.readException();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">_reply.recycle();</div><div class=\"line\">_data.recycle();</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TRANSACTION_basicTypes = (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class=\"number\">0</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\">     * Demonstrates some basic types that you can use as parameters</div><div class=\"line\">     * and return values in AIDL.</div><div class=\"line\">     */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">basicTypes</span><span class=\"params\">(<span class=\"keyword\">int</span> anInt, <span class=\"keyword\">long</span> aLong, <span class=\"keyword\">boolean</span> aBoolean, <span class=\"keyword\">float</span> aFloat, <span class=\"keyword\">double</span> aDouble, java.lang.String aString)</span> <span class=\"keyword\">throws</span> android.os.RemoteException</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在这个文件中有一个<strong>内部类Stub</strong>，这是父接口的一个抽象实现，并声明了aidl中的所有方法。为了实现由aidl生成的接口，我们需要继承Stub并实现从aidl继承过来的方法。下面是一个使用匿名类的例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> IRemoteService.Stub mBinder = <span class=\"keyword\">new</span> IRemoteService.Stub() &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getPid</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> Process.myPid();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">basicTypes</span><span class=\"params\">(<span class=\"keyword\">int</span> anInt, <span class=\"keyword\">long</span> aLong, <span class=\"keyword\">boolean</span> aBoolean,</span></span></div><div class=\"line\">        <span class=\"keyword\">float</span> aFloat, <span class=\"keyword\">double</span> aDouble, String aString) &#123;</div><div class=\"line\">        <span class=\"comment\">// Does nothing</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>这样mBinder就是一个Stub的实例了，下一步就是如何在client端使用，与service端产生交互了。<br>注：</p>\n<ul>\n<li>不能保证请求是在主线程被执行的，所以从构建到使用要考虑Service线程的安全性</li>\n<li>默认情况下，请求是同步的，所以尽量不要在主线程中发出请求</li>\n<li>所有的异常都不会返回给请求者（Caller）</li>\n</ul>\n<h1 id=\"在Client中使用接口\"><a href=\"#在Client中使用接口\" class=\"headerlink\" title=\"在Client中使用接口\"></a>在Client中使用接口</h1><p>当你已经实现你的Service之后，你需把它暴露在Client中使Client可以绑定它。继承Service并实现onBind()方法，来返回一个实现了Stub的实例。下面就是一个把IRemoteService暴露给Client的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RemoteService</span> <span class=\"keyword\">extends</span> <span class=\"title\">Service</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">onBind</span><span class=\"params\">(Intent intent)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Return the interface</span></div><div class=\"line\">        <span class=\"keyword\">return</span> mBinder;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> IRemoteService.Stub mBinder = <span class=\"keyword\">new</span> IRemoteService.Stub() &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getPid</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> Process.myPid();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">basicTypes</span><span class=\"params\">(<span class=\"keyword\">int</span> anInt, <span class=\"keyword\">long</span> aLong, <span class=\"keyword\">boolean</span> aBoolean,</span></span></div><div class=\"line\">            <span class=\"keyword\">float</span> aFloat, <span class=\"keyword\">double</span> aDouble, String aString) &#123;</div><div class=\"line\">            <span class=\"comment\">// Does nothing</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>现在client（比如是一个Activity）可以调用bindService()来连接这个Service，通过onServiceConnected()来接收Service中 onBind() 返回的mBinder，最后使用YourServiceInterface.Stub.asInterface(service)来把返回的mBinder转换成YourServiceInterface类型。例子如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">IRemoteService mIRemoteService;</div><div class=\"line\"><span class=\"keyword\">private</span> ServiceConnection mConnection = <span class=\"keyword\">new</span> ServiceConnection() &#123;</div><div class=\"line\">    <span class=\"comment\">// Called when the connection with the service is established</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">(ComponentName className, IBinder service)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Following the example above for an AIDL interface,</span></div><div class=\"line\">        <span class=\"comment\">// this gets an instance of the IRemoteInterface, which we can use to call on the service</span></div><div class=\"line\">        mIRemoteService = IRemoteService.Stub.asInterface(service);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Called when the connection with the service disconnects unexpectedly</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceDisconnected</span><span class=\"params\">(ComponentName className)</span> </span>&#123;</div><div class=\"line\">        Log.e(TAG, <span class=\"string\">\"Service has unexpectedly disconnected\"</span>);</div><div class=\"line\">        mIRemoteService = <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>注：<br>如果Service和Client在两个不同的Application中，Client的Application的src/目录下必须也有对应的.aidl文件。</p>\n<h1 id=\"一个Client的例子\"><a href=\"#一个Client的例子\" class=\"headerlink\" title=\"一个Client的例子\"></a>一个Client的例子</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Binding</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/** The primary interface we will be calling on the service. */</span></div><div class=\"line\">    IRemoteService mService = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"comment\">/** Another interface we use on the service. */</span></div><div class=\"line\">    ISecondary mSecondaryService = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    Button mKillButton;</div><div class=\"line\">    TextView mCallbackText;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> mIsBound;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Standard initialization of this activity.  Set up the UI, then wait</div><div class=\"line\">     * for the user to poke it before doing anything.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\"></div><div class=\"line\">        setContentView(R.layout.remote_service_binding);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Watch for button clicks.</span></div><div class=\"line\">        Button button = (Button)findViewById(R.id.bind);</div><div class=\"line\">        button.setOnClickListener(mBindListener);</div><div class=\"line\">        button = (Button)findViewById(R.id.unbind);</div><div class=\"line\">        button.setOnClickListener(mUnbindListener);</div><div class=\"line\">        mKillButton = (Button)findViewById(R.id.kill);</div><div class=\"line\">        mKillButton.setOnClickListener(mKillListener);</div><div class=\"line\">        mKillButton.setEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\"></div><div class=\"line\">        mCallbackText = (TextView)findViewById(R.id.callback);</div><div class=\"line\">        mCallbackText.setText(<span class=\"string\">\"Not attached.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Class for interacting with the main interface of the service.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">private</span> ServiceConnection mConnection = <span class=\"keyword\">new</span> ServiceConnection() &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">(ComponentName className,</span></span></div><div class=\"line\">                IBinder service) &#123;</div><div class=\"line\">            <span class=\"comment\">// This is called when the connection with the service has been</span></div><div class=\"line\">            <span class=\"comment\">// established, giving us the service object we can use to</span></div><div class=\"line\">            <span class=\"comment\">// interact with the service.  We are communicating with our</span></div><div class=\"line\">            <span class=\"comment\">// service through an IDL interface, so get a client-side</span></div><div class=\"line\">            <span class=\"comment\">// representation of that from the raw service object.</span></div><div class=\"line\">            mService = IRemoteService.Stub.asInterface(service);</div><div class=\"line\">            mKillButton.setEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">            mCallbackText.setText(<span class=\"string\">\"Attached.\"</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// We want to monitor the service for as long as we are</span></div><div class=\"line\">            <span class=\"comment\">// connected to it.</span></div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                mService.registerCallback(mCallback);</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">                <span class=\"comment\">// In this case the service has crashed before we could even</span></div><div class=\"line\">                <span class=\"comment\">// do anything with it; we can count on soon being</span></div><div class=\"line\">                <span class=\"comment\">// disconnected (and then reconnected if it can be restarted)</span></div><div class=\"line\">                <span class=\"comment\">// so there is no need to do anything here.</span></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// As part of the sample, tell the user what happened.</span></div><div class=\"line\">            Toast.makeText(Binding.<span class=\"keyword\">this</span>, R.string.remote_service_connected,</div><div class=\"line\">                    Toast.LENGTH_SHORT).show();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceDisconnected</span><span class=\"params\">(ComponentName className)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// This is called when the connection with the service has been</span></div><div class=\"line\">            <span class=\"comment\">// unexpectedly disconnected -- that is, its process crashed.</span></div><div class=\"line\">            mService = <span class=\"keyword\">null</span>;</div><div class=\"line\">            mKillButton.setEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\">            mCallbackText.setText(<span class=\"string\">\"Disconnected.\"</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// As part of the sample, tell the user what happened.</span></div><div class=\"line\">            Toast.makeText(Binding.<span class=\"keyword\">this</span>, R.string.remote_service_disconnected,</div><div class=\"line\">                    Toast.LENGTH_SHORT).show();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * Class for interacting with the secondary interface of the service.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">private</span> ServiceConnection mSecondaryConnection = <span class=\"keyword\">new</span> ServiceConnection() &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">(ComponentName className,</span></span></div><div class=\"line\">                IBinder service) &#123;</div><div class=\"line\">            <span class=\"comment\">// Connecting to a secondary interface is the same as any</span></div><div class=\"line\">            <span class=\"comment\">// other interface.</span></div><div class=\"line\">            mSecondaryService = ISecondary.Stub.asInterface(service);</div><div class=\"line\">            mKillButton.setEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceDisconnected</span><span class=\"params\">(ComponentName className)</span> </span>&#123;</div><div class=\"line\">            mSecondaryService = <span class=\"keyword\">null</span>;</div><div class=\"line\">            mKillButton.setEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> OnClickListener mBindListener = <span class=\"keyword\">new</span> OnClickListener() &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// Establish a couple connections with the service, binding</span></div><div class=\"line\">            <span class=\"comment\">// by interface names.  This allows other applications to be</span></div><div class=\"line\">            <span class=\"comment\">// installed that replace the remote service by implementing</span></div><div class=\"line\">            <span class=\"comment\">// the same interface.</span></div><div class=\"line\">            Intent intent = <span class=\"keyword\">new</span> Intent(Binding.<span class=\"keyword\">this</span>, RemoteService.class);</div><div class=\"line\">            intent.setAction(IRemoteService.class.getName());</div><div class=\"line\">            bindService(intent, mConnection, Context.BIND_AUTO_CREATE);</div><div class=\"line\">            intent.setAction(ISecondary.class.getName());</div><div class=\"line\">            bindService(intent, mSecondaryConnection, Context.BIND_AUTO_CREATE);</div><div class=\"line\">            mIsBound = <span class=\"keyword\">true</span>;</div><div class=\"line\">            mCallbackText.setText(<span class=\"string\">\"Binding.\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> OnClickListener mUnbindListener = <span class=\"keyword\">new</span> OnClickListener() &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mIsBound) &#123;</div><div class=\"line\">                <span class=\"comment\">// If we have received the service, and hence registered with</span></div><div class=\"line\">                <span class=\"comment\">// it, then now is the time to unregister.</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (mService != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                        mService.unregisterCallback(mCallback);</div><div class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">                        <span class=\"comment\">// There is nothing special we need to do if the service</span></div><div class=\"line\">                        <span class=\"comment\">// has crashed.</span></div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// Detach our existing connection.</span></div><div class=\"line\">                unbindService(mConnection);</div><div class=\"line\">                unbindService(mSecondaryConnection);</div><div class=\"line\">                mKillButton.setEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\">                mIsBound = <span class=\"keyword\">false</span>;</div><div class=\"line\">                mCallbackText.setText(<span class=\"string\">\"Unbinding.\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> OnClickListener mKillListener = <span class=\"keyword\">new</span> OnClickListener() &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// To kill the process hosting our service, we need to know its</span></div><div class=\"line\">            <span class=\"comment\">// PID.  Conveniently our service has a call that will return</span></div><div class=\"line\">            <span class=\"comment\">// to us that information.</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (mSecondaryService != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    <span class=\"keyword\">int</span> pid = mSecondaryService.getPid();</div><div class=\"line\">                    <span class=\"comment\">// Note that, though this API allows us to request to</span></div><div class=\"line\">                    <span class=\"comment\">// kill any process based on its PID, the kernel will</span></div><div class=\"line\">                    <span class=\"comment\">// still impose standard restrictions on which PIDs you</span></div><div class=\"line\">                    <span class=\"comment\">// are actually able to kill.  Typically this means only</span></div><div class=\"line\">                    <span class=\"comment\">// the process running your application and any additional</span></div><div class=\"line\">                    <span class=\"comment\">// processes created by that app as shown here; packages</span></div><div class=\"line\">                    <span class=\"comment\">// sharing a common UID will also be able to kill each</span></div><div class=\"line\">                    <span class=\"comment\">// other's processes.</span></div><div class=\"line\">                    Process.killProcess(pid);</div><div class=\"line\">                    mCallbackText.setText(<span class=\"string\">\"Killed service process.\"</span>);</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (RemoteException ex) &#123;</div><div class=\"line\">                    <span class=\"comment\">// Recover gracefully from the process hosting the</span></div><div class=\"line\">                    <span class=\"comment\">// server dying.</span></div><div class=\"line\">                    <span class=\"comment\">// Just for purposes of the sample, put up a notification.</span></div><div class=\"line\">                    Toast.makeText(Binding.<span class=\"keyword\">this</span>,</div><div class=\"line\">                            R.string.remote_call_failed,</div><div class=\"line\">                            Toast.LENGTH_SHORT).show();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// ----------------------------------------------------------------------</span></div><div class=\"line\">    <span class=\"comment\">// Code showing how to deal with callbacks.</span></div><div class=\"line\">    <span class=\"comment\">// ----------------------------------------------------------------------</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * This implementation is used to receive callbacks from the remote</div><div class=\"line\">     * service.</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"keyword\">private</span> IRemoteServiceCallback mCallback = <span class=\"keyword\">new</span> IRemoteServiceCallback.Stub() &#123;</div><div class=\"line\">        <span class=\"comment\">/**</span></div><div class=\"line\">         * This is called by the remote service regularly to tell us about</div><div class=\"line\">         * new values.  Note that IPC calls are dispatched through a thread</div><div class=\"line\">         * pool running in each process, so the code executing here will</div><div class=\"line\">         * NOT be running in our main thread like most other things -- so,</div><div class=\"line\">         * to update the UI, we need to use a Handler to hop over there.</div><div class=\"line\">         */</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">valueChanged</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</div><div class=\"line\">            mHandler.sendMessage(mHandler.obtainMessage(BUMP_MSG, value, <span class=\"number\">0</span>));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> BUMP_MSG = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Handler mHandler = <span class=\"keyword\">new</span> Handler() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">switch</span> (msg.what) &#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> BUMP_MSG:</div><div class=\"line\">                    mCallbackText.setText(<span class=\"string\">\"Received from service: \"</span> + msg.arg1);</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                <span class=\"keyword\">default</span>:</div><div class=\"line\">                    <span class=\"keyword\">super</span>.handleMessage(msg);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>","excerpt":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>Android Interface Definition Language (AIDL)， Android接口定义语言。系统中的进程之间不能共享内存，因此，需要提供一些机制在不同进程之间进行数据通信Interprocess communication (IPC)。AIDL就是解决这个问题的。<br>阅读本文需要了解Service的相关知识，关于Service的讲解请参考<a href=\"http://blog.csdn.net/l664675249/article/details/48899323\">http://blog.csdn.net/l664675249/article/details/48899323</a><br>","more":"</p>\n<h1 id=\"创建-aidl文件\"><a href=\"#创建-aidl文件\" class=\"headerlink\" title=\"创建.aidl文件\"></a>创建.aidl文件</h1><p>aidl是用Java语法编写的，后缀为.aidl的文件。</p>\n<ul>\n<li>每一个aidl文件必须定义一个接口，在这个接口里声明方法</li>\n<li>在aidl里不能有static属性（field）</li>\n<li>aidl支持基本的数据类型，当你需要使用额外的数据类型时需要把它们import进来，即使它们跟这个文件在同一个包中。</li>\n</ul>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// IRemoteService.aidl</span></div><div class=\"line\"><span class=\"keyword\">package</span> com.example.android;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// Declare any non-default types here with import statements</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/** Example service interface */</span></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IRemoteService</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/** Request the process ID of this service, to do evil things with it. */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getPid</span><span class=\"params\">()</span></span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/** Demonstrates some basic types that you can use as parameters</div><div class=\"line\">     * and return values in AIDL.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">basicTypes</span><span class=\"params\">(<span class=\"keyword\">int</span> anInt, <span class=\"keyword\">long</span> aLong, <span class=\"keyword\">boolean</span> aBoolean, <span class=\"keyword\">float</span> aFloat,</div><div class=\"line\">            <span class=\"keyword\">double</span> aDouble, String aString)</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>把aidl文件存在src/目录下，当你build项目的时候，SDK工具会在gen/目录下生成一个与.aidl文件名字相同的.java文件。</p>\n<h1 id=\"实现接口\"><a href=\"#实现接口\" class=\"headerlink\" title=\"实现接口\"></a>实现接口</h1><p>生成的IRemoteService.java如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IRemoteService</span> <span class=\"keyword\">extends</span> <span class=\"title\">android</span>.<span class=\"title\">os</span>.<span class=\"title\">IInterface</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\"><span class=\"comment\">/** Local-side IPC implementation stub class. */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stub</span> <span class=\"keyword\">extends</span> <span class=\"title\">android</span>.<span class=\"title\">os</span>.<span class=\"title\">Binder</span> <span class=\"keyword\">implements</span> <span class=\"title\">com</span>.<span class=\"title\">spark</span>.<span class=\"title\">meizi</span>.<span class=\"title\">IRemoteService</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> java.lang.String DESCRIPTOR = <span class=\"string\">\"com.spark.meizi.IRemoteService\"</span>;</div><div class=\"line\"><span class=\"comment\">/** Construct the stub at attach it to the interface. */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Stub</span><span class=\"params\">()</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\"><span class=\"keyword\">this</span>.attachInterface(<span class=\"keyword\">this</span>, DESCRIPTOR);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Cast an IBinder object into an com.spark.meizi.IRemoteService interface,</div><div class=\"line\"> * generating a proxy if needed.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> com.spark.meizi.<span class=\"function\">IRemoteService <span class=\"title\">asInterface</span><span class=\"params\">(android.os.IBinder obj)</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\"><span class=\"keyword\">if</span> ((obj==<span class=\"keyword\">null</span>)) &#123;</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);</div><div class=\"line\"><span class=\"keyword\">if</span> (((iin!=<span class=\"keyword\">null</span>)&amp;&amp;(iin <span class=\"keyword\">instanceof</span> com.spark.meizi.IRemoteService))) &#123;</div><div class=\"line\"><span class=\"keyword\">return</span> ((com.spark.meizi.IRemoteService)iin);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> com.spark.meizi.IRemoteService.Stub.Proxy(obj);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">@Override</span> <span class=\"keyword\">public</span> android.os.<span class=\"function\">IBinder <span class=\"title\">asBinder</span><span class=\"params\">()</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTransact</span><span class=\"params\">(<span class=\"keyword\">int</span> code, android.os.Parcel data, android.os.Parcel reply, <span class=\"keyword\">int</span> flags)</span> <span class=\"keyword\">throws</span> android.os.RemoteException</div><div class=\"line\"></span>&#123;</div><div class=\"line\"><span class=\"keyword\">switch</span> (code)</div><div class=\"line\">&#123;</div><div class=\"line\"><span class=\"keyword\">case</span> INTERFACE_TRANSACTION:</div><div class=\"line\">&#123;</div><div class=\"line\">reply.writeString(DESCRIPTOR);</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">case</span> TRANSACTION_basicTypes:</div><div class=\"line\">&#123;</div><div class=\"line\">data.enforceInterface(DESCRIPTOR);</div><div class=\"line\"><span class=\"keyword\">int</span> _arg0;</div><div class=\"line\">_arg0 = data.readInt();</div><div class=\"line\"><span class=\"keyword\">long</span> _arg1;</div><div class=\"line\">_arg1 = data.readLong();</div><div class=\"line\"><span class=\"keyword\">boolean</span> _arg2;</div><div class=\"line\">_arg2 = (<span class=\"number\">0</span>!=data.readInt());</div><div class=\"line\"><span class=\"keyword\">float</span> _arg3;</div><div class=\"line\">_arg3 = data.readFloat();</div><div class=\"line\"><span class=\"keyword\">double</span> _arg4;</div><div class=\"line\">_arg4 = data.readDouble();</div><div class=\"line\">java.lang.String _arg5;</div><div class=\"line\">_arg5 = data.readString();</div><div class=\"line\"><span class=\"keyword\">this</span>.basicTypes(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5);</div><div class=\"line\">reply.writeNoException();</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onTransact(code, data, reply, flags);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">com</span>.<span class=\"title\">spark</span>.<span class=\"title\">meizi</span>.<span class=\"title\">IRemoteService</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\"><span class=\"keyword\">private</span> android.os.IBinder mRemote;</div><div class=\"line\">Proxy(android.os.IBinder remote)</div><div class=\"line\">&#123;</div><div class=\"line\">mRemote = remote;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"meta\">@Override</span> <span class=\"keyword\">public</span> android.os.<span class=\"function\">IBinder <span class=\"title\">asBinder</span><span class=\"params\">()</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\"><span class=\"keyword\">return</span> mRemote;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">public</span> java.lang.<span class=\"function\">String <span class=\"title\">getInterfaceDescriptor</span><span class=\"params\">()</span></div><div class=\"line\"></span>&#123;</div><div class=\"line\"><span class=\"keyword\">return</span> DESCRIPTOR;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">     * Demonstrates some basic types that you can use as parameters</div><div class=\"line\">     * and return values in AIDL.</div><div class=\"line\">     */</span></div><div class=\"line\"><span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">basicTypes</span><span class=\"params\">(<span class=\"keyword\">int</span> anInt, <span class=\"keyword\">long</span> aLong, <span class=\"keyword\">boolean</span> aBoolean, <span class=\"keyword\">float</span> aFloat, <span class=\"keyword\">double</span> aDouble, java.lang.String aString)</span> <span class=\"keyword\">throws</span> android.os.RemoteException</div><div class=\"line\"></span>&#123;</div><div class=\"line\">android.os.Parcel _data = android.os.Parcel.obtain();</div><div class=\"line\">android.os.Parcel _reply = android.os.Parcel.obtain();</div><div class=\"line\"><span class=\"keyword\">try</span> &#123;</div><div class=\"line\">_data.writeInterfaceToken(DESCRIPTOR);</div><div class=\"line\">_data.writeInt(anInt);</div><div class=\"line\">_data.writeLong(aLong);</div><div class=\"line\">_data.writeInt(((aBoolean)?(<span class=\"number\">1</span>):(<span class=\"number\">0</span>)));</div><div class=\"line\">_data.writeFloat(aFloat);</div><div class=\"line\">_data.writeDouble(aDouble);</div><div class=\"line\">_data.writeString(aString);</div><div class=\"line\">mRemote.transact(Stub.TRANSACTION_basicTypes, _data, _reply, <span class=\"number\">0</span>);</div><div class=\"line\">_reply.readException();</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">_reply.recycle();</div><div class=\"line\">_data.recycle();</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TRANSACTION_basicTypes = (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class=\"number\">0</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\">     * Demonstrates some basic types that you can use as parameters</div><div class=\"line\">     * and return values in AIDL.</div><div class=\"line\">     */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">basicTypes</span><span class=\"params\">(<span class=\"keyword\">int</span> anInt, <span class=\"keyword\">long</span> aLong, <span class=\"keyword\">boolean</span> aBoolean, <span class=\"keyword\">float</span> aFloat, <span class=\"keyword\">double</span> aDouble, java.lang.String aString)</span> <span class=\"keyword\">throws</span> android.os.RemoteException</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在这个文件中有一个<strong>内部类Stub</strong>，这是父接口的一个抽象实现，并声明了aidl中的所有方法。为了实现由aidl生成的接口，我们需要继承Stub并实现从aidl继承过来的方法。下面是一个使用匿名类的例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> IRemoteService.Stub mBinder = <span class=\"keyword\">new</span> IRemoteService.Stub() &#123;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getPid</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> Process.myPid();</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">basicTypes</span><span class=\"params\">(<span class=\"keyword\">int</span> anInt, <span class=\"keyword\">long</span> aLong, <span class=\"keyword\">boolean</span> aBoolean,</div><div class=\"line\">        <span class=\"keyword\">float</span> aFloat, <span class=\"keyword\">double</span> aDouble, String aString)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Does nothing</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>这样mBinder就是一个Stub的实例了，下一步就是如何在client端使用，与service端产生交互了。<br>注：</p>\n<ul>\n<li>不能保证请求是在主线程被执行的，所以从构建到使用要考虑Service线程的安全性</li>\n<li>默认情况下，请求是同步的，所以尽量不要在主线程中发出请求</li>\n<li>所有的异常都不会返回给请求者（Caller）</li>\n</ul>\n<h1 id=\"在Client中使用接口\"><a href=\"#在Client中使用接口\" class=\"headerlink\" title=\"在Client中使用接口\"></a>在Client中使用接口</h1><p>当你已经实现你的Service之后，你需把它暴露在Client中使Client可以绑定它。继承Service并实现onBind()方法，来返回一个实现了Stub的实例。下面就是一个把IRemoteService暴露给Client的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RemoteService</span> <span class=\"keyword\">extends</span> <span class=\"title\">Service</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">onBind</span><span class=\"params\">(Intent intent)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Return the interface</span></div><div class=\"line\">        <span class=\"keyword\">return</span> mBinder;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> IRemoteService.Stub mBinder = <span class=\"keyword\">new</span> IRemoteService.Stub() &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getPid</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> Process.myPid();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">basicTypes</span><span class=\"params\">(<span class=\"keyword\">int</span> anInt, <span class=\"keyword\">long</span> aLong, <span class=\"keyword\">boolean</span> aBoolean,</div><div class=\"line\">            <span class=\"keyword\">float</span> aFloat, <span class=\"keyword\">double</span> aDouble, String aString)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// Does nothing</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>现在client（比如是一个Activity）可以调用bindService()来连接这个Service，通过onServiceConnected()来接收Service中 onBind() 返回的mBinder，最后使用YourServiceInterface.Stub.asInterface(service)来把返回的mBinder转换成YourServiceInterface类型。例子如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">IRemoteService mIRemoteService;</div><div class=\"line\"><span class=\"keyword\">private</span> ServiceConnection mConnection = <span class=\"keyword\">new</span> ServiceConnection() &#123;</div><div class=\"line\">    <span class=\"comment\">// Called when the connection with the service is established</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">(ComponentName className, IBinder service)</span> </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// Following the example above for an AIDL interface,</span></div><div class=\"line\">        <span class=\"comment\">// this gets an instance of the IRemoteInterface, which we can use to call on the service</span></div><div class=\"line\">        mIRemoteService = IRemoteService.Stub.asInterface(service);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// Called when the connection with the service disconnects unexpectedly</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceDisconnected</span><span class=\"params\">(ComponentName className)</span> </span>&#123;</div><div class=\"line\">        Log.e(TAG, <span class=\"string\">\"Service has unexpectedly disconnected\"</span>);</div><div class=\"line\">        mIRemoteService = <span class=\"keyword\">null</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div></pre></td></tr></table></figure>\n<p>注：<br>如果Service和Client在两个不同的Application中，Client的Application的src/目录下必须也有对应的.aidl文件。</p>\n<h1 id=\"一个Client的例子\"><a href=\"#一个Client的例子\" class=\"headerlink\" title=\"一个Client的例子\"></a>一个Client的例子</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Binding</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\">    <span class=\"comment\">/** The primary interface we will be calling on the service. */</span></div><div class=\"line\">    IRemoteService mService = <span class=\"keyword\">null</span>;</div><div class=\"line\">    <span class=\"comment\">/** Another interface we use on the service. */</span></div><div class=\"line\">    ISecondary mSecondaryService = <span class=\"keyword\">null</span>;</div><div class=\"line\"></div><div class=\"line\">    Button mKillButton;</div><div class=\"line\">    TextView mCallbackText;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> mIsBound;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Standard initialization of this activity.  Set up the UI, then wait</div><div class=\"line\">     * for the user to poke it before doing anything.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\"></div><div class=\"line\">        setContentView(R.layout.remote_service_binding);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">// Watch for button clicks.</span></div><div class=\"line\">        Button button = (Button)findViewById(R.id.bind);</div><div class=\"line\">        button.setOnClickListener(mBindListener);</div><div class=\"line\">        button = (Button)findViewById(R.id.unbind);</div><div class=\"line\">        button.setOnClickListener(mUnbindListener);</div><div class=\"line\">        mKillButton = (Button)findViewById(R.id.kill);</div><div class=\"line\">        mKillButton.setOnClickListener(mKillListener);</div><div class=\"line\">        mKillButton.setEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\"></div><div class=\"line\">        mCallbackText = (TextView)findViewById(R.id.callback);</div><div class=\"line\">        mCallbackText.setText(<span class=\"string\">\"Not attached.\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Class for interacting with the main interface of the service.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> ServiceConnection mConnection = <span class=\"keyword\">new</span> ServiceConnection() &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">(ComponentName className,</div><div class=\"line\">                IBinder service)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// This is called when the connection with the service has been</span></div><div class=\"line\">            <span class=\"comment\">// established, giving us the service object we can use to</span></div><div class=\"line\">            <span class=\"comment\">// interact with the service.  We are communicating with our</span></div><div class=\"line\">            <span class=\"comment\">// service through an IDL interface, so get a client-side</span></div><div class=\"line\">            <span class=\"comment\">// representation of that from the raw service object.</span></div><div class=\"line\">            mService = IRemoteService.Stub.asInterface(service);</div><div class=\"line\">            mKillButton.setEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">            mCallbackText.setText(<span class=\"string\">\"Attached.\"</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// We want to monitor the service for as long as we are</span></div><div class=\"line\">            <span class=\"comment\">// connected to it.</span></div><div class=\"line\">            <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                mService.registerCallback(mCallback);</div><div class=\"line\">            &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">                <span class=\"comment\">// In this case the service has crashed before we could even</span></div><div class=\"line\">                <span class=\"comment\">// do anything with it; we can count on soon being</span></div><div class=\"line\">                <span class=\"comment\">// disconnected (and then reconnected if it can be restarted)</span></div><div class=\"line\">                <span class=\"comment\">// so there is no need to do anything here.</span></div><div class=\"line\">            &#125;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// As part of the sample, tell the user what happened.</span></div><div class=\"line\">            Toast.makeText(Binding.<span class=\"keyword\">this</span>, R.string.remote_service_connected,</div><div class=\"line\">                    Toast.LENGTH_SHORT).show();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceDisconnected</span><span class=\"params\">(ComponentName className)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// This is called when the connection with the service has been</span></div><div class=\"line\">            <span class=\"comment\">// unexpectedly disconnected -- that is, its process crashed.</span></div><div class=\"line\">            mService = <span class=\"keyword\">null</span>;</div><div class=\"line\">            mKillButton.setEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\">            mCallbackText.setText(<span class=\"string\">\"Disconnected.\"</span>);</div><div class=\"line\"></div><div class=\"line\">            <span class=\"comment\">// As part of the sample, tell the user what happened.</span></div><div class=\"line\">            Toast.makeText(Binding.<span class=\"keyword\">this</span>, R.string.remote_service_disconnected,</div><div class=\"line\">                    Toast.LENGTH_SHORT).show();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * Class for interacting with the secondary interface of the service.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> ServiceConnection mSecondaryConnection = <span class=\"keyword\">new</span> ServiceConnection() &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">(ComponentName className,</div><div class=\"line\">                IBinder service)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// Connecting to a secondary interface is the same as any</span></div><div class=\"line\">            <span class=\"comment\">// other interface.</span></div><div class=\"line\">            mSecondaryService = ISecondary.Stub.asInterface(service);</div><div class=\"line\">            mKillButton.setEnabled(<span class=\"keyword\">true</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceDisconnected</span><span class=\"params\">(ComponentName className)</span> </span>&#123;</div><div class=\"line\">            mSecondaryService = <span class=\"keyword\">null</span>;</div><div class=\"line\">            mKillButton.setEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> OnClickListener mBindListener = <span class=\"keyword\">new</span> OnClickListener() &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// Establish a couple connections with the service, binding</span></div><div class=\"line\">            <span class=\"comment\">// by interface names.  This allows other applications to be</span></div><div class=\"line\">            <span class=\"comment\">// installed that replace the remote service by implementing</span></div><div class=\"line\">            <span class=\"comment\">// the same interface.</span></div><div class=\"line\">            Intent intent = <span class=\"keyword\">new</span> Intent(Binding.<span class=\"keyword\">this</span>, RemoteService.class);</div><div class=\"line\">            intent.setAction(IRemoteService.class.getName());</div><div class=\"line\">            bindService(intent, mConnection, Context.BIND_AUTO_CREATE);</div><div class=\"line\">            intent.setAction(ISecondary.class.getName());</div><div class=\"line\">            bindService(intent, mSecondaryConnection, Context.BIND_AUTO_CREATE);</div><div class=\"line\">            mIsBound = <span class=\"keyword\">true</span>;</div><div class=\"line\">            mCallbackText.setText(<span class=\"string\">\"Binding.\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> OnClickListener mUnbindListener = <span class=\"keyword\">new</span> OnClickListener() &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (mIsBound) &#123;</div><div class=\"line\">                <span class=\"comment\">// If we have received the service, and hence registered with</span></div><div class=\"line\">                <span class=\"comment\">// it, then now is the time to unregister.</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (mService != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                        mService.unregisterCallback(mCallback);</div><div class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</div><div class=\"line\">                        <span class=\"comment\">// There is nothing special we need to do if the service</span></div><div class=\"line\">                        <span class=\"comment\">// has crashed.</span></div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">// Detach our existing connection.</span></div><div class=\"line\">                unbindService(mConnection);</div><div class=\"line\">                unbindService(mSecondaryConnection);</div><div class=\"line\">                mKillButton.setEnabled(<span class=\"keyword\">false</span>);</div><div class=\"line\">                mIsBound = <span class=\"keyword\">false</span>;</div><div class=\"line\">                mCallbackText.setText(<span class=\"string\">\"Unbinding.\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> OnClickListener mKillListener = <span class=\"keyword\">new</span> OnClickListener() &#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">            <span class=\"comment\">// To kill the process hosting our service, we need to know its</span></div><div class=\"line\">            <span class=\"comment\">// PID.  Conveniently our service has a call that will return</span></div><div class=\"line\">            <span class=\"comment\">// to us that information.</span></div><div class=\"line\">            <span class=\"keyword\">if</span> (mSecondaryService != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    <span class=\"keyword\">int</span> pid = mSecondaryService.getPid();</div><div class=\"line\">                    <span class=\"comment\">// Note that, though this API allows us to request to</span></div><div class=\"line\">                    <span class=\"comment\">// kill any process based on its PID, the kernel will</span></div><div class=\"line\">                    <span class=\"comment\">// still impose standard restrictions on which PIDs you</span></div><div class=\"line\">                    <span class=\"comment\">// are actually able to kill.  Typically this means only</span></div><div class=\"line\">                    <span class=\"comment\">// the process running your application and any additional</span></div><div class=\"line\">                    <span class=\"comment\">// processes created by that app as shown here; packages</span></div><div class=\"line\">                    <span class=\"comment\">// sharing a common UID will also be able to kill each</span></div><div class=\"line\">                    <span class=\"comment\">// other's processes.</span></div><div class=\"line\">                    Process.killProcess(pid);</div><div class=\"line\">                    mCallbackText.setText(<span class=\"string\">\"Killed service process.\"</span>);</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (RemoteException ex) &#123;</div><div class=\"line\">                    <span class=\"comment\">// Recover gracefully from the process hosting the</span></div><div class=\"line\">                    <span class=\"comment\">// server dying.</span></div><div class=\"line\">                    <span class=\"comment\">// Just for purposes of the sample, put up a notification.</span></div><div class=\"line\">                    Toast.makeText(Binding.<span class=\"keyword\">this</span>,</div><div class=\"line\">                            R.string.remote_call_failed,</div><div class=\"line\">                            Toast.LENGTH_SHORT).show();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// ----------------------------------------------------------------------</span></div><div class=\"line\">    <span class=\"comment\">// Code showing how to deal with callbacks.</span></div><div class=\"line\">    <span class=\"comment\">// ----------------------------------------------------------------------</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * This implementation is used to receive callbacks from the remote</div><div class=\"line\">     * service.</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"keyword\">private</span> IRemoteServiceCallback mCallback = <span class=\"keyword\">new</span> IRemoteServiceCallback.Stub() &#123;</div><div class=\"line\">        <span class=\"comment\">/**</div><div class=\"line\">         * This is called by the remote service regularly to tell us about</div><div class=\"line\">         * new values.  Note that IPC calls are dispatched through a thread</div><div class=\"line\">         * pool running in each process, so the code executing here will</div><div class=\"line\">         * NOT be running in our main thread like most other things -- so,</div><div class=\"line\">         * to update the UI, we need to use a Handler to hop over there.</div><div class=\"line\">         */</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">valueChanged</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</div><div class=\"line\">            mHandler.sendMessage(mHandler.obtainMessage(BUMP_MSG, value, <span class=\"number\">0</span>));</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> BUMP_MSG = <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Handler mHandler = <span class=\"keyword\">new</span> Handler() &#123;</div><div class=\"line\">        <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">switch</span> (msg.what) &#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> BUMP_MSG:</div><div class=\"line\">                    mCallbackText.setText(<span class=\"string\">\"Received from service: \"</span> + msg.arg1);</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                <span class=\"keyword\">default</span>:</div><div class=\"line\">                    <span class=\"keyword\">super</span>.handleMessage(msg);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"Activity在异常情况下的生命周期","date":"2016-02-05T08:46:25.000Z","_content":"关于Activity正常情况下的生命周期讲解的文章已经很多了，本文讲解一下Activity在异常情况下的生命周期。\n<!-- more -->\n\n# 情况1：资源相关的系统配置发生改变\n资源相关的系统配置发生改变，举个栗子。当前Activity处于竖屏状态的时候突然转成横屏，系统配置发生了改变，Activity就会销毁并且重建，其onPause, onStop, onDestory均会被调用。因为实在异常情况下终止的，所以系统会调用**onSaveInstanceState**来保存当前Activity状态。这个方法是在onStop之前，与onPause没有固定的时序关系。当Activity重建的时候系统会把onSaveInstanceState所保存的Bundle作为对象传递给onRestoreInstanceState和onCreate方法。\n\n**注：**\n\n- View的源码中每个View都有onSaveInstanceState和onRestoreInstanceState这两个方法。\n- 接收位置可以是onRestoreInstanceState和onCreate方法，区别是：onRestoreInstanceState如果被调用，参数Bundle一定是有值的，在onCreate中需要判断参数是否为null。\n- onSaveInstanceState只有在Activity即将销毁并有机会重新显示时才会调用，正常销毁的Activity生命周期中不会调用，**比如：旋转屏幕，按Home键，启动新Activity等。**\n\n# 情况2：资源内存不足导致低优先级Activity被杀死\n## Activity优先级\n1. 前台Activity——正在和用户交互的Activity，优先级最高\n2. 可见但非前台Activity——Activity中弹出的对话框导致Activity可见但无法交互\n3. 后台Activity——已经被暂停的Activity，优先级最低\n\n系统内存不足是，会按照以上顺序杀死Activity，并通过onSaveInstanceState和onRestoreInstanceState这两个方法来存储和恢复数据。\n## 不让Activity重新创建的方法\n系统配置有很多内容，当某项改变时，我们不想让Activity重新创建可以在AndroidMainfest中给Activity指定configChanges属性。比如\n```html\n android:configChanges=\"orientation\"\n```\nconfigChanges属性非常多，[具体可参考官方文档](http://developer.android.com/intl/zh-cn/guide/topics/manifest/activity-element.html#config)\n常用的有locale, orientation和keyboardHidden这三个。\n\n","source":"_posts/Activity在异常情况下的生命周期.md","raw":"title: Activity在异常情况下的生命周期\ndate: 2016/2/5 16:46:25\ncategories:\n- Android\n- Android开发艺术探索笔记\ntags:\n- Activity\n\n---\n关于Activity正常情况下的生命周期讲解的文章已经很多了，本文讲解一下Activity在异常情况下的生命周期。\n<!-- more -->\n\n# 情况1：资源相关的系统配置发生改变\n资源相关的系统配置发生改变，举个栗子。当前Activity处于竖屏状态的时候突然转成横屏，系统配置发生了改变，Activity就会销毁并且重建，其onPause, onStop, onDestory均会被调用。因为实在异常情况下终止的，所以系统会调用**onSaveInstanceState**来保存当前Activity状态。这个方法是在onStop之前，与onPause没有固定的时序关系。当Activity重建的时候系统会把onSaveInstanceState所保存的Bundle作为对象传递给onRestoreInstanceState和onCreate方法。\n\n**注：**\n\n- View的源码中每个View都有onSaveInstanceState和onRestoreInstanceState这两个方法。\n- 接收位置可以是onRestoreInstanceState和onCreate方法，区别是：onRestoreInstanceState如果被调用，参数Bundle一定是有值的，在onCreate中需要判断参数是否为null。\n- onSaveInstanceState只有在Activity即将销毁并有机会重新显示时才会调用，正常销毁的Activity生命周期中不会调用，**比如：旋转屏幕，按Home键，启动新Activity等。**\n\n# 情况2：资源内存不足导致低优先级Activity被杀死\n## Activity优先级\n1. 前台Activity——正在和用户交互的Activity，优先级最高\n2. 可见但非前台Activity——Activity中弹出的对话框导致Activity可见但无法交互\n3. 后台Activity——已经被暂停的Activity，优先级最低\n\n系统内存不足是，会按照以上顺序杀死Activity，并通过onSaveInstanceState和onRestoreInstanceState这两个方法来存储和恢复数据。\n## 不让Activity重新创建的方法\n系统配置有很多内容，当某项改变时，我们不想让Activity重新创建可以在AndroidMainfest中给Activity指定configChanges属性。比如\n```html\n android:configChanges=\"orientation\"\n```\nconfigChanges属性非常多，[具体可参考官方文档](http://developer.android.com/intl/zh-cn/guide/topics/manifest/activity-element.html#config)\n常用的有locale, orientation和keyboardHidden这三个。\n\n","slug":"Activity在异常情况下的生命周期","published":1,"updated":"2016-12-28T12:14:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix8xu7040002wwv6b7xkkfkt","content":"<p>关于Activity正常情况下的生命周期讲解的文章已经很多了，本文讲解一下Activity在异常情况下的生命周期。<br><a id=\"more\"></a></p>\n<h1 id=\"情况1：资源相关的系统配置发生改变\"><a href=\"#情况1：资源相关的系统配置发生改变\" class=\"headerlink\" title=\"情况1：资源相关的系统配置发生改变\"></a>情况1：资源相关的系统配置发生改变</h1><p>资源相关的系统配置发生改变，举个栗子。当前Activity处于竖屏状态的时候突然转成横屏，系统配置发生了改变，Activity就会销毁并且重建，其onPause, onStop, onDestory均会被调用。因为实在异常情况下终止的，所以系统会调用<strong>onSaveInstanceState</strong>来保存当前Activity状态。这个方法是在onStop之前，与onPause没有固定的时序关系。当Activity重建的时候系统会把onSaveInstanceState所保存的Bundle作为对象传递给onRestoreInstanceState和onCreate方法。</p>\n<p><strong>注：</strong></p>\n<ul>\n<li>View的源码中每个View都有onSaveInstanceState和onRestoreInstanceState这两个方法。</li>\n<li>接收位置可以是onRestoreInstanceState和onCreate方法，区别是：onRestoreInstanceState如果被调用，参数Bundle一定是有值的，在onCreate中需要判断参数是否为null。</li>\n<li>onSaveInstanceState只有在Activity即将销毁并有机会重新显示时才会调用，正常销毁的Activity生命周期中不会调用，<strong>比如：旋转屏幕，按Home键，启动新Activity等。</strong></li>\n</ul>\n<h1 id=\"情况2：资源内存不足导致低优先级Activity被杀死\"><a href=\"#情况2：资源内存不足导致低优先级Activity被杀死\" class=\"headerlink\" title=\"情况2：资源内存不足导致低优先级Activity被杀死\"></a>情况2：资源内存不足导致低优先级Activity被杀死</h1><h2 id=\"Activity优先级\"><a href=\"#Activity优先级\" class=\"headerlink\" title=\"Activity优先级\"></a>Activity优先级</h2><ol>\n<li>前台Activity——正在和用户交互的Activity，优先级最高</li>\n<li>可见但非前台Activity——Activity中弹出的对话框导致Activity可见但无法交互</li>\n<li>后台Activity——已经被暂停的Activity，优先级最低</li>\n</ol>\n<p>系统内存不足是，会按照以上顺序杀死Activity，并通过onSaveInstanceState和onRestoreInstanceState这两个方法来存储和恢复数据。</p>\n<h2 id=\"不让Activity重新创建的方法\"><a href=\"#不让Activity重新创建的方法\" class=\"headerlink\" title=\"不让Activity重新创建的方法\"></a>不让Activity重新创建的方法</h2><p>系统配置有很多内容，当某项改变时，我们不想让Activity重新创建可以在AndroidMainfest中给Activity指定configChanges属性。比如<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:configChanges=\"orientation\"</div></pre></td></tr></table></figure></p>\n<p>configChanges属性非常多，<a href=\"http://developer.android.com/intl/zh-cn/guide/topics/manifest/activity-element.html#config\" target=\"_blank\" rel=\"external\">具体可参考官方文档</a><br>常用的有locale, orientation和keyboardHidden这三个。</p>\n","excerpt":"<p>关于Activity正常情况下的生命周期讲解的文章已经很多了，本文讲解一下Activity在异常情况下的生命周期。<br>","more":"</p>\n<h1 id=\"情况1：资源相关的系统配置发生改变\"><a href=\"#情况1：资源相关的系统配置发生改变\" class=\"headerlink\" title=\"情况1：资源相关的系统配置发生改变\"></a>情况1：资源相关的系统配置发生改变</h1><p>资源相关的系统配置发生改变，举个栗子。当前Activity处于竖屏状态的时候突然转成横屏，系统配置发生了改变，Activity就会销毁并且重建，其onPause, onStop, onDestory均会被调用。因为实在异常情况下终止的，所以系统会调用<strong>onSaveInstanceState</strong>来保存当前Activity状态。这个方法是在onStop之前，与onPause没有固定的时序关系。当Activity重建的时候系统会把onSaveInstanceState所保存的Bundle作为对象传递给onRestoreInstanceState和onCreate方法。</p>\n<p><strong>注：</strong></p>\n<ul>\n<li>View的源码中每个View都有onSaveInstanceState和onRestoreInstanceState这两个方法。</li>\n<li>接收位置可以是onRestoreInstanceState和onCreate方法，区别是：onRestoreInstanceState如果被调用，参数Bundle一定是有值的，在onCreate中需要判断参数是否为null。</li>\n<li>onSaveInstanceState只有在Activity即将销毁并有机会重新显示时才会调用，正常销毁的Activity生命周期中不会调用，<strong>比如：旋转屏幕，按Home键，启动新Activity等。</strong></li>\n</ul>\n<h1 id=\"情况2：资源内存不足导致低优先级Activity被杀死\"><a href=\"#情况2：资源内存不足导致低优先级Activity被杀死\" class=\"headerlink\" title=\"情况2：资源内存不足导致低优先级Activity被杀死\"></a>情况2：资源内存不足导致低优先级Activity被杀死</h1><h2 id=\"Activity优先级\"><a href=\"#Activity优先级\" class=\"headerlink\" title=\"Activity优先级\"></a>Activity优先级</h2><ol>\n<li>前台Activity——正在和用户交互的Activity，优先级最高</li>\n<li>可见但非前台Activity——Activity中弹出的对话框导致Activity可见但无法交互</li>\n<li>后台Activity——已经被暂停的Activity，优先级最低</li>\n</ol>\n<p>系统内存不足是，会按照以上顺序杀死Activity，并通过onSaveInstanceState和onRestoreInstanceState这两个方法来存储和恢复数据。</p>\n<h2 id=\"不让Activity重新创建的方法\"><a href=\"#不让Activity重新创建的方法\" class=\"headerlink\" title=\"不让Activity重新创建的方法\"></a>不让Activity重新创建的方法</h2><p>系统配置有很多内容，当某项改变时，我们不想让Activity重新创建可以在AndroidMainfest中给Activity指定configChanges属性。比如<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">android:configChanges=\"orientation\"</div></pre></td></tr></table></figure></p>\n<p>configChanges属性非常多，<a href=\"http://developer.android.com/intl/zh-cn/guide/topics/manifest/activity-element.html#config\">具体可参考官方文档</a><br>常用的有locale, orientation和keyboardHidden这三个。</p>"},{"title":"Android安全机制","date":"2016-04-05T06:45:58.000Z","_content":"Android系统是基于Linux内核开发的，因此，Android系统不仅保留和继承了Linux操作系统的安全机制，而且其系统架构的各个层次都有独特的安全特性。\n<!-- more -->\n\n# Linux内核安全机制\n\nAndroid的Linux内核包含了强制访问控制机制和自主访问控制机制。强制访问控制机制由Linux安全模块来实现。自主访问控制机制通常由文件访问控制来实现，Linux文件系统的权限控制是由user、group、other与读(r) 、写(w) 、执行(x)的不同组合来实现的。这样，每个文件都有三个基本权限集，它们的组合可以容许、限制、拒绝用户、用户组和其他用户的访问。**通常，只有uid是“system”或“root”用户才拥有Android系统文件的访问权限，而应用程序只有通过申请Android权限才能实现对相应文件的访问**，也正因为此，Android使用内核层Linux的自主访问控制机制和运行时的Dalvik虚拟机来实现Android的“沙箱”机制。\n\n# Android的“沙箱”机制\nAndroid“沙箱”的本质是为了实现不同应用程序和进程之间的互相隔离，即在默认情况下，应用程序没有权限访问系统资源或其它应用程序的资源。每个APP和系统进程都被分配唯一并且固定的User Id，这个uid与内核层进程的uid对应。**每个APP在各自独立的Dalvik虚拟机中运行，拥有独立的地址空间和资源**。运行于Dalvik虚拟机中的进程必须依托内核层Linux进程而存在，因此**Android使用Dalvik虚拟机和Linux的文件访问控制来实现沙箱机制**，任何应用程序如果想要访问系统资源或者其它应用程序的资源必须在自己的manifest文件中进行声明权限或者共享uid。\nAndroid中的数据分为system和data两个区，其中system是只读的，data是用来存放应用自己的数据，这样保证系统数据不会被随意改写。\n\n# 应用权限机制\n任何一个应用程序在使用Android受限资源（网络、电话、短信、蓝牙、通讯录、SdCard等）之前都必须以XML文件的形式事先向Android系统提出申请，等待Android系统批准后应用程序方可使用相应的资源，权限与Java的API是多对多的映射关系。\n\n如何让两个app运行在同一个进程里？ 1. 两个app用相同的private key来签名。 2. 两个app的Manifest文件中添加android:sharedUserId 设置成相同的UID。","source":"_posts/Android安全机制.md","raw":"title: Android安全机制\ndate: 2016/4/5 14:45:58\ncategories:\n- Android\ntags:\n- 安全机制\n\n---\nAndroid系统是基于Linux内核开发的，因此，Android系统不仅保留和继承了Linux操作系统的安全机制，而且其系统架构的各个层次都有独特的安全特性。\n<!-- more -->\n\n# Linux内核安全机制\n\nAndroid的Linux内核包含了强制访问控制机制和自主访问控制机制。强制访问控制机制由Linux安全模块来实现。自主访问控制机制通常由文件访问控制来实现，Linux文件系统的权限控制是由user、group、other与读(r) 、写(w) 、执行(x)的不同组合来实现的。这样，每个文件都有三个基本权限集，它们的组合可以容许、限制、拒绝用户、用户组和其他用户的访问。**通常，只有uid是“system”或“root”用户才拥有Android系统文件的访问权限，而应用程序只有通过申请Android权限才能实现对相应文件的访问**，也正因为此，Android使用内核层Linux的自主访问控制机制和运行时的Dalvik虚拟机来实现Android的“沙箱”机制。\n\n# Android的“沙箱”机制\nAndroid“沙箱”的本质是为了实现不同应用程序和进程之间的互相隔离，即在默认情况下，应用程序没有权限访问系统资源或其它应用程序的资源。每个APP和系统进程都被分配唯一并且固定的User Id，这个uid与内核层进程的uid对应。**每个APP在各自独立的Dalvik虚拟机中运行，拥有独立的地址空间和资源**。运行于Dalvik虚拟机中的进程必须依托内核层Linux进程而存在，因此**Android使用Dalvik虚拟机和Linux的文件访问控制来实现沙箱机制**，任何应用程序如果想要访问系统资源或者其它应用程序的资源必须在自己的manifest文件中进行声明权限或者共享uid。\nAndroid中的数据分为system和data两个区，其中system是只读的，data是用来存放应用自己的数据，这样保证系统数据不会被随意改写。\n\n# 应用权限机制\n任何一个应用程序在使用Android受限资源（网络、电话、短信、蓝牙、通讯录、SdCard等）之前都必须以XML文件的形式事先向Android系统提出申请，等待Android系统批准后应用程序方可使用相应的资源，权限与Java的API是多对多的映射关系。\n\n如何让两个app运行在同一个进程里？ 1. 两个app用相同的private key来签名。 2. 两个app的Manifest文件中添加android:sharedUserId 设置成相同的UID。","slug":"Android安全机制","published":1,"updated":"2016-12-28T12:14:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix8xu7090005wwv6ehdtwgqe","content":"<p>Android系统是基于Linux内核开发的，因此，Android系统不仅保留和继承了Linux操作系统的安全机制，而且其系统架构的各个层次都有独特的安全特性。<br><a id=\"more\"></a></p>\n<h1 id=\"Linux内核安全机制\"><a href=\"#Linux内核安全机制\" class=\"headerlink\" title=\"Linux内核安全机制\"></a>Linux内核安全机制</h1><p>Android的Linux内核包含了强制访问控制机制和自主访问控制机制。强制访问控制机制由Linux安全模块来实现。自主访问控制机制通常由文件访问控制来实现，Linux文件系统的权限控制是由user、group、other与读(r) 、写(w) 、执行(x)的不同组合来实现的。这样，每个文件都有三个基本权限集，它们的组合可以容许、限制、拒绝用户、用户组和其他用户的访问。<strong>通常，只有uid是“system”或“root”用户才拥有Android系统文件的访问权限，而应用程序只有通过申请Android权限才能实现对相应文件的访问</strong>，也正因为此，Android使用内核层Linux的自主访问控制机制和运行时的Dalvik虚拟机来实现Android的“沙箱”机制。</p>\n<h1 id=\"Android的“沙箱”机制\"><a href=\"#Android的“沙箱”机制\" class=\"headerlink\" title=\"Android的“沙箱”机制\"></a>Android的“沙箱”机制</h1><p>Android“沙箱”的本质是为了实现不同应用程序和进程之间的互相隔离，即在默认情况下，应用程序没有权限访问系统资源或其它应用程序的资源。每个APP和系统进程都被分配唯一并且固定的User Id，这个uid与内核层进程的uid对应。<strong>每个APP在各自独立的Dalvik虚拟机中运行，拥有独立的地址空间和资源</strong>。运行于Dalvik虚拟机中的进程必须依托内核层Linux进程而存在，因此<strong>Android使用Dalvik虚拟机和Linux的文件访问控制来实现沙箱机制</strong>，任何应用程序如果想要访问系统资源或者其它应用程序的资源必须在自己的manifest文件中进行声明权限或者共享uid。<br>Android中的数据分为system和data两个区，其中system是只读的，data是用来存放应用自己的数据，这样保证系统数据不会被随意改写。</p>\n<h1 id=\"应用权限机制\"><a href=\"#应用权限机制\" class=\"headerlink\" title=\"应用权限机制\"></a>应用权限机制</h1><p>任何一个应用程序在使用Android受限资源（网络、电话、短信、蓝牙、通讯录、SdCard等）之前都必须以XML文件的形式事先向Android系统提出申请，等待Android系统批准后应用程序方可使用相应的资源，权限与Java的API是多对多的映射关系。</p>\n<p>如何让两个app运行在同一个进程里？ 1. 两个app用相同的private key来签名。 2. 两个app的Manifest文件中添加android:sharedUserId 设置成相同的UID。</p>\n","excerpt":"<p>Android系统是基于Linux内核开发的，因此，Android系统不仅保留和继承了Linux操作系统的安全机制，而且其系统架构的各个层次都有独特的安全特性。<br>","more":"</p>\n<h1 id=\"Linux内核安全机制\"><a href=\"#Linux内核安全机制\" class=\"headerlink\" title=\"Linux内核安全机制\"></a>Linux内核安全机制</h1><p>Android的Linux内核包含了强制访问控制机制和自主访问控制机制。强制访问控制机制由Linux安全模块来实现。自主访问控制机制通常由文件访问控制来实现，Linux文件系统的权限控制是由user、group、other与读(r) 、写(w) 、执行(x)的不同组合来实现的。这样，每个文件都有三个基本权限集，它们的组合可以容许、限制、拒绝用户、用户组和其他用户的访问。<strong>通常，只有uid是“system”或“root”用户才拥有Android系统文件的访问权限，而应用程序只有通过申请Android权限才能实现对相应文件的访问</strong>，也正因为此，Android使用内核层Linux的自主访问控制机制和运行时的Dalvik虚拟机来实现Android的“沙箱”机制。</p>\n<h1 id=\"Android的“沙箱”机制\"><a href=\"#Android的“沙箱”机制\" class=\"headerlink\" title=\"Android的“沙箱”机制\"></a>Android的“沙箱”机制</h1><p>Android“沙箱”的本质是为了实现不同应用程序和进程之间的互相隔离，即在默认情况下，应用程序没有权限访问系统资源或其它应用程序的资源。每个APP和系统进程都被分配唯一并且固定的User Id，这个uid与内核层进程的uid对应。<strong>每个APP在各自独立的Dalvik虚拟机中运行，拥有独立的地址空间和资源</strong>。运行于Dalvik虚拟机中的进程必须依托内核层Linux进程而存在，因此<strong>Android使用Dalvik虚拟机和Linux的文件访问控制来实现沙箱机制</strong>，任何应用程序如果想要访问系统资源或者其它应用程序的资源必须在自己的manifest文件中进行声明权限或者共享uid。<br>Android中的数据分为system和data两个区，其中system是只读的，data是用来存放应用自己的数据，这样保证系统数据不会被随意改写。</p>\n<h1 id=\"应用权限机制\"><a href=\"#应用权限机制\" class=\"headerlink\" title=\"应用权限机制\"></a>应用权限机制</h1><p>任何一个应用程序在使用Android受限资源（网络、电话、短信、蓝牙、通讯录、SdCard等）之前都必须以XML文件的形式事先向Android系统提出申请，等待Android系统批准后应用程序方可使用相应的资源，权限与Java的API是多对多的映射关系。</p>\n<p>如何让两个app运行在同一个进程里？ 1. 两个app用相同的private key来签名。 2. 两个app的Manifest文件中添加android:sharedUserId 设置成相同的UID。</p>"},{"title":"AsyncTask源码剖析(API 23)","date":"2016-03-23T08:04:19.000Z","_content":"Android的UI是线程不安全的，想在子线程中更新UI就必须使用Android的异步操作机制，直接在主线程中更新UI会导致程序崩溃。\nAndroid的异步操作主要有两种，AsyncTask和Handler。AsyncTask是一个轻量的异步类，简单、可控。本文主要结合API 23的源码讲解一下AsyncTask到底是什么。\n\n<!-- more -->\n\n# 基本用法\n\n**声明：Android不同API版本中同一个类的实现方法可能会有不同，本文是基于最新的API 23的源码进行讲解的。**\n\n```java\npublic abstract class AsyncTask<Params, Progress, Result>\n```\nParams：执行时传入的参数\nProgress：后台任务的执行进度\nResult：返回值\n\nAsyncTask是个抽象类，所以需要自己定义一个类继承他，比如\n\n```java\nclass MyAsyncTask extends AsyncTask<Void, Integer, Boolean>\n```\n## AsyncTask的执行过程：\n\n1. execute(Params... params)，执行异步任务。\n2. onPreExecute()，在execute(Params... params)被调用后执行，界面上的初始化操作，比如显示一个进度条对话框等。\n3. doInBackground(Params... params)，在onPreExecute()完成后执行，用于执行较为费时的操作，如果AsyncTask的第三个泛型参数指定的是Void，就可以不返回任务执行结果。在执行过程中可以调用publishProgress(Progress... values)来更新进度信息。**注意，此方法中不可以进行UI操作**。\n4. onProgressUpdate(Progress... values)，调用publishProgress(Progress... values)时，此方法被执行，将进度信息更新到UI组件上。\n5. onPostExecute(Result result)，当后台操作结束时，此方法将会被调用，计算结果将做为参数传递到此方法中，可以利用返回的数据来进行一些UI操作，比如说提醒任务执行的结果，以及关闭掉进度条对话框等。\n\n# 示例\n\n新建一个Activity，一个Button和一个ProgressBar，点击Button启动一个AsyncTask并实时更新ProgressBar的状态。\n\n## MyAsyncTask\n\n```java\nclass MyAsyncTask extends AsyncTask<Void, Integer, Boolean> {\n\n        @Override\n        protected void onPreExecute() {\n            super.onPreExecute();\n        }\n\n        @Override\n        protected void onPostExecute(Boolean aBoolean) {\n            super.onPostExecute(aBoolean);\n        }\n\n        @Override\n        protected void onProgressUpdate(Integer... values) {\n            super.onProgressUpdate(values);\n            progressBar.setProgress(values[0]);\n        }\n\n        @Override\n        protected Boolean doInBackground(Void... params) {\n            for (int i = 0; i < 100; i++) {\n                //调用publishProgress,触发onProgressUpdate方法\n                publishProgress(i);\n                try {\n                    Thread.sleep(300);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n            return true;\n        }\n\n        @Override\n        protected void onCancelled() {\n            super.onCancelled();\n            progressBar.setProgress(0);\n        }\n    }\n```\n\n## Button的Click方法\n\n```java\nstartAsyncBtn.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                myAsyncTask = new MyAsyncTask();\n                myAsyncTask.execute();\n            }\n        });\n```\n# 源码剖析\n\n通过上面的例子可以发现，AsyncTask使用起来很简单，很方便的就可以在主线程中新建一个子线程进行UI的更新等操作。但是他的实现并不像使用起来那么简单，下面就是对AsyncTask的源码进行剖析。\n\n## AsyncTask的构造函数\n\n```java\npublic AsyncTask() {\n        mWorker = new WorkerRunnable<Params, Result>() {\n            public Result call() throws Exception {\n                mTaskInvoked.set(true);\n                Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);\n                //noinspection unchecked\n                Result result = doInBackground(mParams);\n                Binder.flushPendingCommands();\n                return postResult(result);\n            }\n        };\n        mFuture = new FutureTask<Result>(mWorker) {\n            @Override\n            protected void done() {\n                try {\n                    postResultIfNotInvoked(get());\n                } catch (InterruptedException e) {\n                    android.util.Log.w(LOG_TAG, e);\n                } catch (ExecutionException e) {\n                    throw new RuntimeException(\"An error occurred while executing doInBackground()\",\n                            e.getCause());\n                } catch (CancellationException e) {\n                    postResultIfNotInvoked(null);\n                }\n            }\n        };\n    }\n```\n\n在构造函数中只做了两件事，初始化mWorker和mFuture两个变量。mWorker是一个Callable对象，mFutre是一个FutureTask对象。execute()时会用到。\n\n## execute(Params... params)\n\n```java\n public final AsyncTask<Params, Progress, Result> execute(Params... params) {\n        return executeOnExecutor(sDefaultExecutor, params);\n    }\n```\n只有一行代码，调用了executeOnExecutor方法，sDefaultExecutor实际上是一个串行的线程池，一个进程中所有的AsyncTask全部在这个串行的线程池中排队执行。executeOnExecutor源码如下。\n\n```java\npublic final AsyncTask<Params, Progress, Result> executeOnExecutor(Executor exec,\n            Params... params) {\n        if (mStatus != Status.PENDING) {\n            switch (mStatus) {\n                case RUNNING:\n                    throw new IllegalStateException(\"Cannot execute task:\"\n                            + \" the task is already running.\");\n                case FINISHED:\n                    throw new IllegalStateException(\"Cannot execute task:\"\n                            + \" the task has already been executed \"\n                            + \"(a task can be executed only once)\");\n            }\n        }\n\n        mStatus = Status.RUNNING;\n        onPreExecute();\n        mWorker.mParams = params;\n        exec.execute(mFuture);\n        return this;\n    }\n```\n\n可以看到在这个方法里调用了onPreExecute()，接下来执行exec.execute(mFuture)下面分析一一下线程池的执行过程。\n\n```java\nprivate static class SerialExecutor implements Executor {\n        final ArrayDeque<Runnable> mTasks = new ArrayDeque<Runnable>();\n        Runnable mActive;\n\n        public synchronized void execute(final Runnable r) {\n            mTasks.offer(new Runnable() {\n                public void run() {\n                    try {\n                        r.run();\n                    } finally {\n                        scheduleNext();\n                    }\n                }\n            });\n            if (mActive == null) {\n                scheduleNext();\n            }\n        }\n\n        protected synchronized void scheduleNext() {\n            if ((mActive = mTasks.poll()) != null) {\n                THREAD_POOL_EXECUTOR.execute(mActive);\n            }\n        }\n    }\n```\n\n系统先把AsyncTask的Params参数封装为FutureTask对象，FutureTask是一个并发类，这里它相当于Runnable；接着将FutureTask交给SerialExecutor的execute方法，它先把FutureTask插入到任务队列tasks中，如果这个时候没有正在活动的AsyncTask任务，那么就会执行下一个AsyncTask任务，同时当一个AsyncTask任务执行完毕之后，AsyncTask会继续执行其他任务直到所有任务都被执行为止。**从这里就可以看出，默认情况下，AsyncTask是串行执行的**\n看一下AsyncTask的构造函数，mFuture构造时是把mWork作为参数传进去的，mFuture的run方法会调用mWork的call()方法，因此call()最终会在线程池中执行。call()中调用了doInBackground()并把返回结果给了postResult。\n\n```java\nprivate Result postResult(Result result) {\n        @SuppressWarnings(\"unchecked\")\n        Message message = getHandler().obtainMessage(MESSAGE_POST_RESULT,\n                new AsyncTaskResult<Result>(this, result));\n        message.sendToTarget();\n        return result;\n    }\n```\n\n可以看到在postResult中通过getHandler()获得一个Handler。\n\n```java\n  private static Handler getHandler() {\n        synchronized (AsyncTask.class) {\n            if (sHandler == null) {\n                sHandler = new InternalHandler();\n            }\n            return sHandler;\n        }\n    }\n```\n查看getHandler源码，可以发现getHandler返回的是一个InternalHandler，再来看看InternalHandler的源码。\n\n```java\nprivate static class InternalHandler extends Handler {\n        public InternalHandler() {\n            super(Looper.getMainLooper());\n        }\n\n        @SuppressWarnings({\"unchecked\", \"RawUseOfParameterizedType\"})\n        @Override\n        public void handleMessage(Message msg) {\n            AsyncTaskResult<?> result = (AsyncTaskResult<?>) msg.obj;\n            switch (msg.what) {\n                case MESSAGE_POST_RESULT:\n                    // There is only one result\n                    result.mTask.finish(result.mData[0]);\n                    break;\n                case MESSAGE_POST_PROGRESS:\n                    result.mTask.onProgressUpdate(result.mData);\n                    break;\n            }\n        }\n    }\n```\n\n看到这里已经豁然开朗了，InternalHandler是一个继承Handler的类，在他的handleMessage()方法中对msg进行了判断，如果是MESSAGE_POST_RESULT就执行finish()，如果是MESSAGE_POST_PROGRESS，就执行onProgressUpdate()。\nMESSAGE_POST_PROGRESS消息是在publishProgress里发出的，详情见源码。\n\n```java\nprotected final void publishProgress(Progress... values) {\n        if (!isCancelled()) {\n            getHandler().obtainMessage(MESSAGE_POST_PROGRESS,\n                    new AsyncTaskResult<Progress>(this, values)).sendToTarget();\n        }\n    }\n```\n\n## finish()\n\n```java\nprivate void finish(Result result) {\n        if (isCancelled()) {\n            onCancelled(result);\n        } else {\n            onPostExecute(result);\n        }\n        mStatus = Status.FINISHED;\n    }\n```\n如果当前任务被取消，就调用onCancelled()方法，如果没有调用onPostExecute()。\n\n# 注意事项\n1. AsyncTask的类必须在主线程中加载，这个过程在Android 4.1及以上版本中已经被系统自动完成。\n2. AsyncTask对象必须在主线程中创建，execute方法必须在UI线程中调用。\n3. 一个AsyncTask对象只能执行一次，即只能调用一次execute方法，否则会报运行时异常。\n\n\n# 各个版本的区别\n在Android 1.6之前，AsyncTask是串行执行任务的，Android 1.6的时候AsyncTask开始采用线程池并行处理任务，但是从Android 3.0开始，为了避免AsyncTask带来的并发错误，AsyncTask又采用一个线程来串行执行任务。尽管如此，在Android 3.0以及后续版本中，我们可以使用AsyncTask的executeOnExecutor方法来并行执行任务。但是这个方法是Android 3.0新添加的方法，并不能在低版本上使用。\n\n# 总结\n整个AsyncTask的源码已经剖析完了，在分析完真个源码后可以发现，AsyncTask并没有什么神秘的，**他的本质就是Handler**。\n我们现在已经知道了AsyncTask如何使用，各个方法会在什么时候调用，有什么作用，相互之间有什么联系，相信大家以后在遇到AsyncTask的任何问题都不会再害怕了，因为AsyncTask的整个源码都翻了个底朝天，还有什么好怕的呢。","source":"_posts/AsyncTask源码剖析(API 23).md","raw":"title: AsyncTask源码剖析(API 23)\ndate: 2016/3/23 16:04:19\ncategories:\n- Android\ntags:\n- Android\n- AsyncTask\n- 源码剖析\n---\nAndroid的UI是线程不安全的，想在子线程中更新UI就必须使用Android的异步操作机制，直接在主线程中更新UI会导致程序崩溃。\nAndroid的异步操作主要有两种，AsyncTask和Handler。AsyncTask是一个轻量的异步类，简单、可控。本文主要结合API 23的源码讲解一下AsyncTask到底是什么。\n\n<!-- more -->\n\n# 基本用法\n\n**声明：Android不同API版本中同一个类的实现方法可能会有不同，本文是基于最新的API 23的源码进行讲解的。**\n\n```java\npublic abstract class AsyncTask<Params, Progress, Result>\n```\nParams：执行时传入的参数\nProgress：后台任务的执行进度\nResult：返回值\n\nAsyncTask是个抽象类，所以需要自己定义一个类继承他，比如\n\n```java\nclass MyAsyncTask extends AsyncTask<Void, Integer, Boolean>\n```\n## AsyncTask的执行过程：\n\n1. execute(Params... params)，执行异步任务。\n2. onPreExecute()，在execute(Params... params)被调用后执行，界面上的初始化操作，比如显示一个进度条对话框等。\n3. doInBackground(Params... params)，在onPreExecute()完成后执行，用于执行较为费时的操作，如果AsyncTask的第三个泛型参数指定的是Void，就可以不返回任务执行结果。在执行过程中可以调用publishProgress(Progress... values)来更新进度信息。**注意，此方法中不可以进行UI操作**。\n4. onProgressUpdate(Progress... values)，调用publishProgress(Progress... values)时，此方法被执行，将进度信息更新到UI组件上。\n5. onPostExecute(Result result)，当后台操作结束时，此方法将会被调用，计算结果将做为参数传递到此方法中，可以利用返回的数据来进行一些UI操作，比如说提醒任务执行的结果，以及关闭掉进度条对话框等。\n\n# 示例\n\n新建一个Activity，一个Button和一个ProgressBar，点击Button启动一个AsyncTask并实时更新ProgressBar的状态。\n\n## MyAsyncTask\n\n```java\nclass MyAsyncTask extends AsyncTask<Void, Integer, Boolean> {\n\n        @Override\n        protected void onPreExecute() {\n            super.onPreExecute();\n        }\n\n        @Override\n        protected void onPostExecute(Boolean aBoolean) {\n            super.onPostExecute(aBoolean);\n        }\n\n        @Override\n        protected void onProgressUpdate(Integer... values) {\n            super.onProgressUpdate(values);\n            progressBar.setProgress(values[0]);\n        }\n\n        @Override\n        protected Boolean doInBackground(Void... params) {\n            for (int i = 0; i < 100; i++) {\n                //调用publishProgress,触发onProgressUpdate方法\n                publishProgress(i);\n                try {\n                    Thread.sleep(300);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n            return true;\n        }\n\n        @Override\n        protected void onCancelled() {\n            super.onCancelled();\n            progressBar.setProgress(0);\n        }\n    }\n```\n\n## Button的Click方法\n\n```java\nstartAsyncBtn.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                myAsyncTask = new MyAsyncTask();\n                myAsyncTask.execute();\n            }\n        });\n```\n# 源码剖析\n\n通过上面的例子可以发现，AsyncTask使用起来很简单，很方便的就可以在主线程中新建一个子线程进行UI的更新等操作。但是他的实现并不像使用起来那么简单，下面就是对AsyncTask的源码进行剖析。\n\n## AsyncTask的构造函数\n\n```java\npublic AsyncTask() {\n        mWorker = new WorkerRunnable<Params, Result>() {\n            public Result call() throws Exception {\n                mTaskInvoked.set(true);\n                Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);\n                //noinspection unchecked\n                Result result = doInBackground(mParams);\n                Binder.flushPendingCommands();\n                return postResult(result);\n            }\n        };\n        mFuture = new FutureTask<Result>(mWorker) {\n            @Override\n            protected void done() {\n                try {\n                    postResultIfNotInvoked(get());\n                } catch (InterruptedException e) {\n                    android.util.Log.w(LOG_TAG, e);\n                } catch (ExecutionException e) {\n                    throw new RuntimeException(\"An error occurred while executing doInBackground()\",\n                            e.getCause());\n                } catch (CancellationException e) {\n                    postResultIfNotInvoked(null);\n                }\n            }\n        };\n    }\n```\n\n在构造函数中只做了两件事，初始化mWorker和mFuture两个变量。mWorker是一个Callable对象，mFutre是一个FutureTask对象。execute()时会用到。\n\n## execute(Params... params)\n\n```java\n public final AsyncTask<Params, Progress, Result> execute(Params... params) {\n        return executeOnExecutor(sDefaultExecutor, params);\n    }\n```\n只有一行代码，调用了executeOnExecutor方法，sDefaultExecutor实际上是一个串行的线程池，一个进程中所有的AsyncTask全部在这个串行的线程池中排队执行。executeOnExecutor源码如下。\n\n```java\npublic final AsyncTask<Params, Progress, Result> executeOnExecutor(Executor exec,\n            Params... params) {\n        if (mStatus != Status.PENDING) {\n            switch (mStatus) {\n                case RUNNING:\n                    throw new IllegalStateException(\"Cannot execute task:\"\n                            + \" the task is already running.\");\n                case FINISHED:\n                    throw new IllegalStateException(\"Cannot execute task:\"\n                            + \" the task has already been executed \"\n                            + \"(a task can be executed only once)\");\n            }\n        }\n\n        mStatus = Status.RUNNING;\n        onPreExecute();\n        mWorker.mParams = params;\n        exec.execute(mFuture);\n        return this;\n    }\n```\n\n可以看到在这个方法里调用了onPreExecute()，接下来执行exec.execute(mFuture)下面分析一一下线程池的执行过程。\n\n```java\nprivate static class SerialExecutor implements Executor {\n        final ArrayDeque<Runnable> mTasks = new ArrayDeque<Runnable>();\n        Runnable mActive;\n\n        public synchronized void execute(final Runnable r) {\n            mTasks.offer(new Runnable() {\n                public void run() {\n                    try {\n                        r.run();\n                    } finally {\n                        scheduleNext();\n                    }\n                }\n            });\n            if (mActive == null) {\n                scheduleNext();\n            }\n        }\n\n        protected synchronized void scheduleNext() {\n            if ((mActive = mTasks.poll()) != null) {\n                THREAD_POOL_EXECUTOR.execute(mActive);\n            }\n        }\n    }\n```\n\n系统先把AsyncTask的Params参数封装为FutureTask对象，FutureTask是一个并发类，这里它相当于Runnable；接着将FutureTask交给SerialExecutor的execute方法，它先把FutureTask插入到任务队列tasks中，如果这个时候没有正在活动的AsyncTask任务，那么就会执行下一个AsyncTask任务，同时当一个AsyncTask任务执行完毕之后，AsyncTask会继续执行其他任务直到所有任务都被执行为止。**从这里就可以看出，默认情况下，AsyncTask是串行执行的**\n看一下AsyncTask的构造函数，mFuture构造时是把mWork作为参数传进去的，mFuture的run方法会调用mWork的call()方法，因此call()最终会在线程池中执行。call()中调用了doInBackground()并把返回结果给了postResult。\n\n```java\nprivate Result postResult(Result result) {\n        @SuppressWarnings(\"unchecked\")\n        Message message = getHandler().obtainMessage(MESSAGE_POST_RESULT,\n                new AsyncTaskResult<Result>(this, result));\n        message.sendToTarget();\n        return result;\n    }\n```\n\n可以看到在postResult中通过getHandler()获得一个Handler。\n\n```java\n  private static Handler getHandler() {\n        synchronized (AsyncTask.class) {\n            if (sHandler == null) {\n                sHandler = new InternalHandler();\n            }\n            return sHandler;\n        }\n    }\n```\n查看getHandler源码，可以发现getHandler返回的是一个InternalHandler，再来看看InternalHandler的源码。\n\n```java\nprivate static class InternalHandler extends Handler {\n        public InternalHandler() {\n            super(Looper.getMainLooper());\n        }\n\n        @SuppressWarnings({\"unchecked\", \"RawUseOfParameterizedType\"})\n        @Override\n        public void handleMessage(Message msg) {\n            AsyncTaskResult<?> result = (AsyncTaskResult<?>) msg.obj;\n            switch (msg.what) {\n                case MESSAGE_POST_RESULT:\n                    // There is only one result\n                    result.mTask.finish(result.mData[0]);\n                    break;\n                case MESSAGE_POST_PROGRESS:\n                    result.mTask.onProgressUpdate(result.mData);\n                    break;\n            }\n        }\n    }\n```\n\n看到这里已经豁然开朗了，InternalHandler是一个继承Handler的类，在他的handleMessage()方法中对msg进行了判断，如果是MESSAGE_POST_RESULT就执行finish()，如果是MESSAGE_POST_PROGRESS，就执行onProgressUpdate()。\nMESSAGE_POST_PROGRESS消息是在publishProgress里发出的，详情见源码。\n\n```java\nprotected final void publishProgress(Progress... values) {\n        if (!isCancelled()) {\n            getHandler().obtainMessage(MESSAGE_POST_PROGRESS,\n                    new AsyncTaskResult<Progress>(this, values)).sendToTarget();\n        }\n    }\n```\n\n## finish()\n\n```java\nprivate void finish(Result result) {\n        if (isCancelled()) {\n            onCancelled(result);\n        } else {\n            onPostExecute(result);\n        }\n        mStatus = Status.FINISHED;\n    }\n```\n如果当前任务被取消，就调用onCancelled()方法，如果没有调用onPostExecute()。\n\n# 注意事项\n1. AsyncTask的类必须在主线程中加载，这个过程在Android 4.1及以上版本中已经被系统自动完成。\n2. AsyncTask对象必须在主线程中创建，execute方法必须在UI线程中调用。\n3. 一个AsyncTask对象只能执行一次，即只能调用一次execute方法，否则会报运行时异常。\n\n\n# 各个版本的区别\n在Android 1.6之前，AsyncTask是串行执行任务的，Android 1.6的时候AsyncTask开始采用线程池并行处理任务，但是从Android 3.0开始，为了避免AsyncTask带来的并发错误，AsyncTask又采用一个线程来串行执行任务。尽管如此，在Android 3.0以及后续版本中，我们可以使用AsyncTask的executeOnExecutor方法来并行执行任务。但是这个方法是Android 3.0新添加的方法，并不能在低版本上使用。\n\n# 总结\n整个AsyncTask的源码已经剖析完了，在分析完真个源码后可以发现，AsyncTask并没有什么神秘的，**他的本质就是Handler**。\n我们现在已经知道了AsyncTask如何使用，各个方法会在什么时候调用，有什么作用，相互之间有什么联系，相信大家以后在遇到AsyncTask的任何问题都不会再害怕了，因为AsyncTask的整个源码都翻了个底朝天，还有什么好怕的呢。","slug":"AsyncTask源码剖析(API 23)","published":1,"updated":"2016-12-28T12:14:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix8xu70c0006wwv6jsn88agj","content":"<p>Android的UI是线程不安全的，想在子线程中更新UI就必须使用Android的异步操作机制，直接在主线程中更新UI会导致程序崩溃。<br>Android的异步操作主要有两种，AsyncTask和Handler。AsyncTask是一个轻量的异步类，简单、可控。本文主要结合API 23的源码讲解一下AsyncTask到底是什么。</p>\n<a id=\"more\"></a>\n<h1 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h1><p><strong>声明：Android不同API版本中同一个类的实现方法可能会有不同，本文是基于最新的API 23的源码进行讲解的。</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncTask</span>&lt;<span class=\"title\">Params</span>, <span class=\"title\">Progress</span>, <span class=\"title\">Result</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Params：执行时传入的参数<br>Progress：后台任务的执行进度<br>Result：返回值</p>\n<p>AsyncTask是个抽象类，所以需要自己定义一个类继承他，比如</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAsyncTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask</span>&lt;<span class=\"title\">Void</span>, <span class=\"title\">Integer</span>, <span class=\"title\">Boolean</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"AsyncTask的执行过程：\"><a href=\"#AsyncTask的执行过程：\" class=\"headerlink\" title=\"AsyncTask的执行过程：\"></a>AsyncTask的执行过程：</h2><ol>\n<li>execute(Params… params)，执行异步任务。</li>\n<li>onPreExecute()，在execute(Params… params)被调用后执行，界面上的初始化操作，比如显示一个进度条对话框等。</li>\n<li>doInBackground(Params… params)，在onPreExecute()完成后执行，用于执行较为费时的操作，如果AsyncTask的第三个泛型参数指定的是Void，就可以不返回任务执行结果。在执行过程中可以调用publishProgress(Progress… values)来更新进度信息。<strong>注意，此方法中不可以进行UI操作</strong>。</li>\n<li>onProgressUpdate(Progress… values)，调用publishProgress(Progress… values)时，此方法被执行，将进度信息更新到UI组件上。</li>\n<li>onPostExecute(Result result)，当后台操作结束时，此方法将会被调用，计算结果将做为参数传递到此方法中，可以利用返回的数据来进行一些UI操作，比如说提醒任务执行的结果，以及关闭掉进度条对话框等。</li>\n</ol>\n<h1 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h1><p>新建一个Activity，一个Button和一个ProgressBar，点击Button启动一个AsyncTask并实时更新ProgressBar的状态。</p>\n<h2 id=\"MyAsyncTask\"><a href=\"#MyAsyncTask\" class=\"headerlink\" title=\"MyAsyncTask\"></a>MyAsyncTask</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAsyncTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask</span>&lt;<span class=\"title\">Void</span>, <span class=\"title\">Integer</span>, <span class=\"title\">Boolean</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPreExecute</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>.onPreExecute();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPostExecute</span><span class=\"params\">(Boolean aBoolean)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>.onPostExecute(aBoolean);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onProgressUpdate</span><span class=\"params\">(Integer... values)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>.onProgressUpdate(values);</div><div class=\"line\">            progressBar.setProgress(values[<span class=\"number\">0</span>]);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> Boolean <span class=\"title\">doInBackground</span><span class=\"params\">(Void... params)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</div><div class=\"line\">                <span class=\"comment\">//调用publishProgress,触发onProgressUpdate方法</span></div><div class=\"line\">                publishProgress(i);</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    Thread.sleep(<span class=\"number\">300</span>);</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">                    e.printStackTrace();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCancelled</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>.onCancelled();</div><div class=\"line\">            progressBar.setProgress(<span class=\"number\">0</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Button的Click方法\"><a href=\"#Button的Click方法\" class=\"headerlink\" title=\"Button的Click方法\"></a>Button的Click方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">startAsyncBtn.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">                myAsyncTask = <span class=\"keyword\">new</span> MyAsyncTask();</div><div class=\"line\">                myAsyncTask.execute();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div></pre></td></tr></table></figure>\n<h1 id=\"源码剖析\"><a href=\"#源码剖析\" class=\"headerlink\" title=\"源码剖析\"></a>源码剖析</h1><p>通过上面的例子可以发现，AsyncTask使用起来很简单，很方便的就可以在主线程中新建一个子线程进行UI的更新等操作。但是他的实现并不像使用起来那么简单，下面就是对AsyncTask的源码进行剖析。</p>\n<h2 id=\"AsyncTask的构造函数\"><a href=\"#AsyncTask的构造函数\" class=\"headerlink\" title=\"AsyncTask的构造函数\"></a>AsyncTask的构造函数</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AsyncTask</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mWorker = <span class=\"keyword\">new</span> WorkerRunnable&lt;Params, Result&gt;() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Result <span class=\"title\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">                mTaskInvoked.set(<span class=\"keyword\">true</span>);</div><div class=\"line\">                Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</div><div class=\"line\">                <span class=\"comment\">//noinspection unchecked</span></div><div class=\"line\">                Result result = doInBackground(mParams);</div><div class=\"line\">                Binder.flushPendingCommands();</div><div class=\"line\">                <span class=\"keyword\">return</span> postResult(result);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        mFuture = <span class=\"keyword\">new</span> FutureTask&lt;Result&gt;(mWorker) &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">done</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    postResultIfNotInvoked(get());</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">                    android.util.Log.w(LOG_TAG, e);</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (ExecutionException e) &#123;</div><div class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"An error occurred while executing doInBackground()\"</span>,</div><div class=\"line\">                            e.getCause());</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (CancellationException e) &#123;</div><div class=\"line\">                    postResultIfNotInvoked(<span class=\"keyword\">null</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>在构造函数中只做了两件事，初始化mWorker和mFuture两个变量。mWorker是一个Callable对象，mFutre是一个FutureTask对象。execute()时会用到。</p>\n<h2 id=\"execute-Params…-params\"><a href=\"#execute-Params…-params\" class=\"headerlink\" title=\"execute(Params… params)\"></a>execute(Params… params)</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> AsyncTask&lt;Params, Progress, Result&gt; <span class=\"title\">execute</span><span class=\"params\">(Params... params)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> executeOnExecutor(sDefaultExecutor, params);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>只有一行代码，调用了executeOnExecutor方法，sDefaultExecutor实际上是一个串行的线程池，一个进程中所有的AsyncTask全部在这个串行的线程池中排队执行。executeOnExecutor源码如下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> AsyncTask&lt;Params, Progress, Result&gt; <span class=\"title\">executeOnExecutor</span><span class=\"params\">(Executor exec,</span></span></div><div class=\"line\">            Params... params) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mStatus != Status.PENDING) &#123;</div><div class=\"line\">            <span class=\"keyword\">switch</span> (mStatus) &#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> RUNNING:</div><div class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Cannot execute task:\"</span></div><div class=\"line\">                            + <span class=\"string\">\" the task is already running.\"</span>);</div><div class=\"line\">                <span class=\"keyword\">case</span> FINISHED:</div><div class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Cannot execute task:\"</span></div><div class=\"line\">                            + <span class=\"string\">\" the task has already been executed \"</span></div><div class=\"line\">                            + <span class=\"string\">\"(a task can be executed only once)\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        mStatus = Status.RUNNING;</div><div class=\"line\">        onPreExecute();</div><div class=\"line\">        mWorker.mParams = params;</div><div class=\"line\">        exec.execute(mFuture);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>可以看到在这个方法里调用了onPreExecute()，接下来执行exec.execute(mFuture)下面分析一一下线程池的执行过程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SerialExecutor</span> <span class=\"keyword\">implements</span> <span class=\"title\">Executor</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> ArrayDeque&lt;Runnable&gt; mTasks = <span class=\"keyword\">new</span> ArrayDeque&lt;Runnable&gt;();</div><div class=\"line\">        Runnable mActive;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(<span class=\"keyword\">final</span> Runnable r)</span> </span>&#123;</div><div class=\"line\">            mTasks.offer(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                        r.run();</div><div class=\"line\">                    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                        scheduleNext();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">            <span class=\"keyword\">if</span> (mActive == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                scheduleNext();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleNext</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> ((mActive = mTasks.poll()) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                THREAD_POOL_EXECUTOR.execute(mActive);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>系统先把AsyncTask的Params参数封装为FutureTask对象，FutureTask是一个并发类，这里它相当于Runnable；接着将FutureTask交给SerialExecutor的execute方法，它先把FutureTask插入到任务队列tasks中，如果这个时候没有正在活动的AsyncTask任务，那么就会执行下一个AsyncTask任务，同时当一个AsyncTask任务执行完毕之后，AsyncTask会继续执行其他任务直到所有任务都被执行为止。<strong>从这里就可以看出，默认情况下，AsyncTask是串行执行的</strong><br>看一下AsyncTask的构造函数，mFuture构造时是把mWork作为参数传进去的，mFuture的run方法会调用mWork的call()方法，因此call()最终会在线程池中执行。call()中调用了doInBackground()并把返回结果给了postResult。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Result <span class=\"title\">postResult</span><span class=\"params\">(Result result)</span> </span>&#123;</div><div class=\"line\">        <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">        Message message = getHandler().obtainMessage(MESSAGE_POST_RESULT,</div><div class=\"line\">                <span class=\"keyword\">new</span> AsyncTaskResult&lt;Result&gt;(<span class=\"keyword\">this</span>, result));</div><div class=\"line\">        message.sendToTarget();</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>可以看到在postResult中通过getHandler()获得一个Handler。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Handler <span class=\"title\">getHandler</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">synchronized</span> (AsyncTask.class) &#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (sHandler == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">              sHandler = <span class=\"keyword\">new</span> InternalHandler();</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">return</span> sHandler;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>查看getHandler源码，可以发现getHandler返回的是一个InternalHandler，再来看看InternalHandler的源码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InternalHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">InternalHandler</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(Looper.getMainLooper());</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@SuppressWarnings</span>(&#123;<span class=\"string\">\"unchecked\"</span>, <span class=\"string\">\"RawUseOfParameterizedType\"</span>&#125;)</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">            AsyncTaskResult&lt;?&gt; result = (AsyncTaskResult&lt;?&gt;) msg.obj;</div><div class=\"line\">            <span class=\"keyword\">switch</span> (msg.what) &#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> MESSAGE_POST_RESULT:</div><div class=\"line\">                    <span class=\"comment\">// There is only one result</span></div><div class=\"line\">                    result.mTask.finish(result.mData[<span class=\"number\">0</span>]);</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                <span class=\"keyword\">case</span> MESSAGE_POST_PROGRESS:</div><div class=\"line\">                    result.mTask.onProgressUpdate(result.mData);</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>看到这里已经豁然开朗了，InternalHandler是一个继承Handler的类，在他的handleMessage()方法中对msg进行了判断，如果是MESSAGE_POST_RESULT就执行finish()，如果是MESSAGE_POST_PROGRESS，就执行onProgressUpdate()。<br>MESSAGE_POST_PROGRESS消息是在publishProgress里发出的，详情见源码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">publishProgress</span><span class=\"params\">(Progress... values)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!isCancelled()) &#123;</div><div class=\"line\">            getHandler().obtainMessage(MESSAGE_POST_PROGRESS,</div><div class=\"line\">                    <span class=\"keyword\">new</span> AsyncTaskResult&lt;Progress&gt;(<span class=\"keyword\">this</span>, values)).sendToTarget();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"finish\"><a href=\"#finish\" class=\"headerlink\" title=\"finish()\"></a>finish()</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">finish</span><span class=\"params\">(Result result)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (isCancelled()) &#123;</div><div class=\"line\">            onCancelled(result);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            onPostExecute(result);</div><div class=\"line\">        &#125;</div><div class=\"line\">        mStatus = Status.FINISHED;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>如果当前任务被取消，就调用onCancelled()方法，如果没有调用onPostExecute()。</p>\n<h1 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h1><ol>\n<li>AsyncTask的类必须在主线程中加载，这个过程在Android 4.1及以上版本中已经被系统自动完成。</li>\n<li>AsyncTask对象必须在主线程中创建，execute方法必须在UI线程中调用。</li>\n<li>一个AsyncTask对象只能执行一次，即只能调用一次execute方法，否则会报运行时异常。</li>\n</ol>\n<h1 id=\"各个版本的区别\"><a href=\"#各个版本的区别\" class=\"headerlink\" title=\"各个版本的区别\"></a>各个版本的区别</h1><p>在Android 1.6之前，AsyncTask是串行执行任务的，Android 1.6的时候AsyncTask开始采用线程池并行处理任务，但是从Android 3.0开始，为了避免AsyncTask带来的并发错误，AsyncTask又采用一个线程来串行执行任务。尽管如此，在Android 3.0以及后续版本中，我们可以使用AsyncTask的executeOnExecutor方法来并行执行任务。但是这个方法是Android 3.0新添加的方法，并不能在低版本上使用。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>整个AsyncTask的源码已经剖析完了，在分析完真个源码后可以发现，AsyncTask并没有什么神秘的，<strong>他的本质就是Handler</strong>。<br>我们现在已经知道了AsyncTask如何使用，各个方法会在什么时候调用，有什么作用，相互之间有什么联系，相信大家以后在遇到AsyncTask的任何问题都不会再害怕了，因为AsyncTask的整个源码都翻了个底朝天，还有什么好怕的呢。</p>\n","excerpt":"<p>Android的UI是线程不安全的，想在子线程中更新UI就必须使用Android的异步操作机制，直接在主线程中更新UI会导致程序崩溃。<br>Android的异步操作主要有两种，AsyncTask和Handler。AsyncTask是一个轻量的异步类，简单、可控。本文主要结合API 23的源码讲解一下AsyncTask到底是什么。</p>","more":"<h1 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h1><p><strong>声明：Android不同API版本中同一个类的实现方法可能会有不同，本文是基于最新的API 23的源码进行讲解的。</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AsyncTask</span>&lt;<span class=\"title\">Params</span>, <span class=\"title\">Progress</span>, <span class=\"title\">Result</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>Params：执行时传入的参数<br>Progress：后台任务的执行进度<br>Result：返回值</p>\n<p>AsyncTask是个抽象类，所以需要自己定义一个类继承他，比如</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAsyncTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask</span>&lt;<span class=\"title\">Void</span>, <span class=\"title\">Integer</span>, <span class=\"title\">Boolean</span>&gt;</span></div></pre></td></tr></table></figure>\n<h2 id=\"AsyncTask的执行过程：\"><a href=\"#AsyncTask的执行过程：\" class=\"headerlink\" title=\"AsyncTask的执行过程：\"></a>AsyncTask的执行过程：</h2><ol>\n<li>execute(Params… params)，执行异步任务。</li>\n<li>onPreExecute()，在execute(Params… params)被调用后执行，界面上的初始化操作，比如显示一个进度条对话框等。</li>\n<li>doInBackground(Params… params)，在onPreExecute()完成后执行，用于执行较为费时的操作，如果AsyncTask的第三个泛型参数指定的是Void，就可以不返回任务执行结果。在执行过程中可以调用publishProgress(Progress… values)来更新进度信息。<strong>注意，此方法中不可以进行UI操作</strong>。</li>\n<li>onProgressUpdate(Progress… values)，调用publishProgress(Progress… values)时，此方法被执行，将进度信息更新到UI组件上。</li>\n<li>onPostExecute(Result result)，当后台操作结束时，此方法将会被调用，计算结果将做为参数传递到此方法中，可以利用返回的数据来进行一些UI操作，比如说提醒任务执行的结果，以及关闭掉进度条对话框等。</li>\n</ol>\n<h1 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h1><p>新建一个Activity，一个Button和一个ProgressBar，点击Button启动一个AsyncTask并实时更新ProgressBar的状态。</p>\n<h2 id=\"MyAsyncTask\"><a href=\"#MyAsyncTask\" class=\"headerlink\" title=\"MyAsyncTask\"></a>MyAsyncTask</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyAsyncTask</span> <span class=\"keyword\">extends</span> <span class=\"title\">AsyncTask</span>&lt;<span class=\"title\">Void</span>, <span class=\"title\">Integer</span>, <span class=\"title\">Boolean</span>&gt; </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPreExecute</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>.onPreExecute();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onPostExecute</span><span class=\"params\">(Boolean aBoolean)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>.onPostExecute(aBoolean);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onProgressUpdate</span><span class=\"params\">(Integer... values)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>.onProgressUpdate(values);</div><div class=\"line\">            progressBar.setProgress(values[<span class=\"number\">0</span>]);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> Boolean <span class=\"title\">doInBackground</span><span class=\"params\">(Void... params)</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</div><div class=\"line\">                <span class=\"comment\">//调用publishProgress,触发onProgressUpdate方法</span></div><div class=\"line\">                publishProgress(i);</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    Thread.sleep(<span class=\"number\">300</span>);</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">                    e.printStackTrace();</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCancelled</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>.onCancelled();</div><div class=\"line\">            progressBar.setProgress(<span class=\"number\">0</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Button的Click方法\"><a href=\"#Button的Click方法\" class=\"headerlink\" title=\"Button的Click方法\"></a>Button的Click方法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">startAsyncBtn.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">                myAsyncTask = <span class=\"keyword\">new</span> MyAsyncTask();</div><div class=\"line\">                myAsyncTask.execute();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div></pre></td></tr></table></figure>\n<h1 id=\"源码剖析\"><a href=\"#源码剖析\" class=\"headerlink\" title=\"源码剖析\"></a>源码剖析</h1><p>通过上面的例子可以发现，AsyncTask使用起来很简单，很方便的就可以在主线程中新建一个子线程进行UI的更新等操作。但是他的实现并不像使用起来那么简单，下面就是对AsyncTask的源码进行剖析。</p>\n<h2 id=\"AsyncTask的构造函数\"><a href=\"#AsyncTask的构造函数\" class=\"headerlink\" title=\"AsyncTask的构造函数\"></a>AsyncTask的构造函数</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">AsyncTask</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mWorker = <span class=\"keyword\">new</span> WorkerRunnable&lt;Params, Result&gt;() &#123;</div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Result <span class=\"title\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</div><div class=\"line\">                mTaskInvoked.set(<span class=\"keyword\">true</span>);</div><div class=\"line\">                Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</div><div class=\"line\">                <span class=\"comment\">//noinspection unchecked</span></div><div class=\"line\">                Result result = doInBackground(mParams);</div><div class=\"line\">                Binder.flushPendingCommands();</div><div class=\"line\">                <span class=\"keyword\">return</span> postResult(result);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">        mFuture = <span class=\"keyword\">new</span> FutureTask&lt;Result&gt;(mWorker) &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">done</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                    postResultIfNotInvoked(get());</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</div><div class=\"line\">                    android.util.Log.w(LOG_TAG, e);</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (ExecutionException e) &#123;</div><div class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"An error occurred while executing doInBackground()\"</span>,</div><div class=\"line\">                            e.getCause());</div><div class=\"line\">                &#125; <span class=\"keyword\">catch</span> (CancellationException e) &#123;</div><div class=\"line\">                    postResultIfNotInvoked(<span class=\"keyword\">null</span>);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>在构造函数中只做了两件事，初始化mWorker和mFuture两个变量。mWorker是一个Callable对象，mFutre是一个FutureTask对象。execute()时会用到。</p>\n<h2 id=\"execute-Params…-params\"><a href=\"#execute-Params…-params\" class=\"headerlink\" title=\"execute(Params… params)\"></a>execute(Params… params)</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> AsyncTask&lt;Params, Progress, Result&gt; <span class=\"title\">execute</span><span class=\"params\">(Params... params)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">return</span> executeOnExecutor(sDefaultExecutor, params);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p>只有一行代码，调用了executeOnExecutor方法，sDefaultExecutor实际上是一个串行的线程池，一个进程中所有的AsyncTask全部在这个串行的线程池中排队执行。executeOnExecutor源码如下。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> AsyncTask&lt;Params, Progress, Result&gt; <span class=\"title\">executeOnExecutor</span><span class=\"params\">(Executor exec,</div><div class=\"line\">            Params... params)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mStatus != Status.PENDING) &#123;</div><div class=\"line\">            <span class=\"keyword\">switch</span> (mStatus) &#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> RUNNING:</div><div class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Cannot execute task:\"</span></div><div class=\"line\">                            + <span class=\"string\">\" the task is already running.\"</span>);</div><div class=\"line\">                <span class=\"keyword\">case</span> FINISHED:</div><div class=\"line\">                    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalStateException(<span class=\"string\">\"Cannot execute task:\"</span></div><div class=\"line\">                            + <span class=\"string\">\" the task has already been executed \"</span></div><div class=\"line\">                            + <span class=\"string\">\"(a task can be executed only once)\"</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        mStatus = Status.RUNNING;</div><div class=\"line\">        onPreExecute();</div><div class=\"line\">        mWorker.mParams = params;</div><div class=\"line\">        exec.execute(mFuture);</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>可以看到在这个方法里调用了onPreExecute()，接下来执行exec.execute(mFuture)下面分析一一下线程池的执行过程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SerialExecutor</span> <span class=\"keyword\">implements</span> <span class=\"title\">Executor</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">final</span> ArrayDeque&lt;Runnable&gt; mTasks = <span class=\"keyword\">new</span> ArrayDeque&lt;Runnable&gt;();</div><div class=\"line\">        Runnable mActive;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">(<span class=\"keyword\">final</span> Runnable r)</span> </span>&#123;</div><div class=\"line\">            mTasks.offer(<span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                    <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">                        r.run();</div><div class=\"line\">                    &#125; <span class=\"keyword\">finally</span> &#123;</div><div class=\"line\">                        scheduleNext();</div><div class=\"line\">                    &#125;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;);</div><div class=\"line\">            <span class=\"keyword\">if</span> (mActive == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                scheduleNext();</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">scheduleNext</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> ((mActive = mTasks.poll()) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">                THREAD_POOL_EXECUTOR.execute(mActive);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>系统先把AsyncTask的Params参数封装为FutureTask对象，FutureTask是一个并发类，这里它相当于Runnable；接着将FutureTask交给SerialExecutor的execute方法，它先把FutureTask插入到任务队列tasks中，如果这个时候没有正在活动的AsyncTask任务，那么就会执行下一个AsyncTask任务，同时当一个AsyncTask任务执行完毕之后，AsyncTask会继续执行其他任务直到所有任务都被执行为止。<strong>从这里就可以看出，默认情况下，AsyncTask是串行执行的</strong><br>看一下AsyncTask的构造函数，mFuture构造时是把mWork作为参数传进去的，mFuture的run方法会调用mWork的call()方法，因此call()最终会在线程池中执行。call()中调用了doInBackground()并把返回结果给了postResult。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> Result <span class=\"title\">postResult</span><span class=\"params\">(Result result)</span> </span>&#123;</div><div class=\"line\">        <span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\">        Message message = getHandler().obtainMessage(MESSAGE_POST_RESULT,</div><div class=\"line\">                <span class=\"keyword\">new</span> AsyncTaskResult&lt;Result&gt;(<span class=\"keyword\">this</span>, result));</div><div class=\"line\">        message.sendToTarget();</div><div class=\"line\">        <span class=\"keyword\">return</span> result;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>可以看到在postResult中通过getHandler()获得一个Handler。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Handler <span class=\"title\">getHandler</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">synchronized</span> (AsyncTask.class) &#123;</div><div class=\"line\">          <span class=\"keyword\">if</span> (sHandler == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">              sHandler = <span class=\"keyword\">new</span> InternalHandler();</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">return</span> sHandler;</div><div class=\"line\">      &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<p>查看getHandler源码，可以发现getHandler返回的是一个InternalHandler，再来看看InternalHandler的源码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InternalHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">InternalHandler</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">            <span class=\"keyword\">super</span>(Looper.getMainLooper());</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"meta\">@SuppressWarnings</span>(&#123;<span class=\"string\">\"unchecked\"</span>, <span class=\"string\">\"RawUseOfParameterizedType\"</span>&#125;)</div><div class=\"line\">        <span class=\"meta\">@Override</span></div><div class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</div><div class=\"line\">            AsyncTaskResult&lt;?&gt; result = (AsyncTaskResult&lt;?&gt;) msg.obj;</div><div class=\"line\">            <span class=\"keyword\">switch</span> (msg.what) &#123;</div><div class=\"line\">                <span class=\"keyword\">case</span> MESSAGE_POST_RESULT:</div><div class=\"line\">                    <span class=\"comment\">// There is only one result</span></div><div class=\"line\">                    result.mTask.finish(result.mData[<span class=\"number\">0</span>]);</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">                <span class=\"keyword\">case</span> MESSAGE_POST_PROGRESS:</div><div class=\"line\">                    result.mTask.onProgressUpdate(result.mData);</div><div class=\"line\">                    <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>看到这里已经豁然开朗了，InternalHandler是一个继承Handler的类，在他的handleMessage()方法中对msg进行了判断，如果是MESSAGE_POST_RESULT就执行finish()，如果是MESSAGE_POST_PROGRESS，就执行onProgressUpdate()。<br>MESSAGE_POST_PROGRESS消息是在publishProgress里发出的，详情见源码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title\">publishProgress</span><span class=\"params\">(Progress... values)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!isCancelled()) &#123;</div><div class=\"line\">            getHandler().obtainMessage(MESSAGE_POST_PROGRESS,</div><div class=\"line\">                    <span class=\"keyword\">new</span> AsyncTaskResult&lt;Progress&gt;(<span class=\"keyword\">this</span>, values)).sendToTarget();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"finish\"><a href=\"#finish\" class=\"headerlink\" title=\"finish()\"></a>finish()</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">finish</span><span class=\"params\">(Result result)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (isCancelled()) &#123;</div><div class=\"line\">            onCancelled(result);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            onPostExecute(result);</div><div class=\"line\">        &#125;</div><div class=\"line\">        mStatus = Status.FINISHED;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>如果当前任务被取消，就调用onCancelled()方法，如果没有调用onPostExecute()。</p>\n<h1 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h1><ol>\n<li>AsyncTask的类必须在主线程中加载，这个过程在Android 4.1及以上版本中已经被系统自动完成。</li>\n<li>AsyncTask对象必须在主线程中创建，execute方法必须在UI线程中调用。</li>\n<li>一个AsyncTask对象只能执行一次，即只能调用一次execute方法，否则会报运行时异常。</li>\n</ol>\n<h1 id=\"各个版本的区别\"><a href=\"#各个版本的区别\" class=\"headerlink\" title=\"各个版本的区别\"></a>各个版本的区别</h1><p>在Android 1.6之前，AsyncTask是串行执行任务的，Android 1.6的时候AsyncTask开始采用线程池并行处理任务，但是从Android 3.0开始，为了避免AsyncTask带来的并发错误，AsyncTask又采用一个线程来串行执行任务。尽管如此，在Android 3.0以及后续版本中，我们可以使用AsyncTask的executeOnExecutor方法来并行执行任务。但是这个方法是Android 3.0新添加的方法，并不能在低版本上使用。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>整个AsyncTask的源码已经剖析完了，在分析完真个源码后可以发现，AsyncTask并没有什么神秘的，<strong>他的本质就是Handler</strong>。<br>我们现在已经知道了AsyncTask如何使用，各个方法会在什么时候调用，有什么作用，相互之间有什么联系，相信大家以后在遇到AsyncTask的任何问题都不会再害怕了，因为AsyncTask的整个源码都翻了个底朝天，还有什么好怕的呢。</p>"},{"title":"IntentFilter匹配规则详解","date":"2016-02-06T06:51:51.000Z","_content":"启动Activity的方式分为两种，显示和隐式调用。显示调用很简单，直接指明要启动的Activity就可以了，这里主要介绍一下隐式调用。隐式调用需要Intent能够匹配目标组件的IntentFilter中所设置的过滤信息。**只有一个Intent同时匹配action，category和data才算匹配成功。**\n<!-- more -->\n\n# 示例\n\n```\n<intent-filter>\n    <action android:name=\"com.sparkyuan.c\" />\n    <action android:name=\"com.sparkyuan.d\" />\n\n    <category android:name=\"com.sparkyuan.c\" />\n    <category android:name=\"com.sparkyuan.d\" />\n    <category android:name=\"android.intent.category.DEFAULT\" />\n\n    <data android:mimeType=\"text/plain\" />\n</intent-filter>`\n```\n\n# action匹配规则\naction是一个字符串，系统预定义了一些action，我们也可以自己定义action。\n添加方法\n\n```java\nintent.setAction(\"com.sparkyuan.a\");\n```\n注：\n\n- 一个intent-filter中可以有多个action\n- intent中的action与intent-filter中有一个相同即可\n- action区分大小写；\n\n# category匹配规则\n添加方法\n\n```java\nintent.addCategory(\"com.sparkyuan.d\");\n```\n注：\n\n- intent中可以不存在category，但如果存在就必须匹配intent-filter其中一个\n- 系统在startActivity或者startActivityForResult的时候默认为Intent加上一个android.intent.category.DEAFAULT，所以必须在intent-filter中加上android.intent.category.DEFAULT这个category\n\n# data匹配规则\n## data语法\n```\n<data android:scheme=\"http\"\n      android:host=\"www.baidu.com\"\n      android:port=\"80\"\n      android:path=\"string\"\n      android:pathPattern=\"string\"\n      android:pathPrefix=\"string\"\n      android:mimeType=\"text/plain\" />\n```\n\n## 组成\ndata由两部分组成，mimeType和URI。\nURI格式如下：\n````\n<scheme>://<host>:<port>[<path>|<pathPrefix>|<pathPattern>]\n//示例\ncontent://com.example.project:200/folder/subfolder/etc \n````\n##匹配规则\n匹配规则与action类似，只要有一个data匹配就可以。\n\n注：\n```\n<data  android:mimeType=\"text/plain\" />\n```\n虽然没有指定URI，但是URI有默认值，**默认值为content和file**，所以intent的URI部分必须为content或者file才可以。\n下面的方法可以匹配他\n ```\n intent.setDataAndType(Uri.parse(\"file://abc\"),\"text/plain\");\n ```\n# 最后\n \nintent-filter的规则对于Service和BroadcastReceiver是一样的，但是对于Service建议尽量使用显示方法来启动。\n在使用隐式Intent时可以先对是否有相应的Activity做出判断，以防出错。采用PackageManager的resolveActivity方法或者Intent的resolveActivity，如果匹配不到就返回null。\n\n``` java\ncontex.getPackageManager().resolveActivity(intent, PackageManager.MATCH_DEFAULT_ONLY);\nintent.resolveActivity(getPackageManager());\n```\n **MATCH_DEFAULT_ONLY**的目的是去除那些category中不含DEFAULT的Activity。","source":"_posts/IntentFilter匹配规则.md","raw":"title: IntentFilter匹配规则详解\ndate: 2016/2/6 14:51:51\ncategories:\n- Android\n- Android开发艺术探索笔记\ntags:\n- IntentFilter\n- 匹配规则\n---\n启动Activity的方式分为两种，显示和隐式调用。显示调用很简单，直接指明要启动的Activity就可以了，这里主要介绍一下隐式调用。隐式调用需要Intent能够匹配目标组件的IntentFilter中所设置的过滤信息。**只有一个Intent同时匹配action，category和data才算匹配成功。**\n<!-- more -->\n\n# 示例\n\n```\n<intent-filter>\n    <action android:name=\"com.sparkyuan.c\" />\n    <action android:name=\"com.sparkyuan.d\" />\n\n    <category android:name=\"com.sparkyuan.c\" />\n    <category android:name=\"com.sparkyuan.d\" />\n    <category android:name=\"android.intent.category.DEFAULT\" />\n\n    <data android:mimeType=\"text/plain\" />\n</intent-filter>`\n```\n\n# action匹配规则\naction是一个字符串，系统预定义了一些action，我们也可以自己定义action。\n添加方法\n\n```java\nintent.setAction(\"com.sparkyuan.a\");\n```\n注：\n\n- 一个intent-filter中可以有多个action\n- intent中的action与intent-filter中有一个相同即可\n- action区分大小写；\n\n# category匹配规则\n添加方法\n\n```java\nintent.addCategory(\"com.sparkyuan.d\");\n```\n注：\n\n- intent中可以不存在category，但如果存在就必须匹配intent-filter其中一个\n- 系统在startActivity或者startActivityForResult的时候默认为Intent加上一个android.intent.category.DEAFAULT，所以必须在intent-filter中加上android.intent.category.DEFAULT这个category\n\n# data匹配规则\n## data语法\n```\n<data android:scheme=\"http\"\n      android:host=\"www.baidu.com\"\n      android:port=\"80\"\n      android:path=\"string\"\n      android:pathPattern=\"string\"\n      android:pathPrefix=\"string\"\n      android:mimeType=\"text/plain\" />\n```\n\n## 组成\ndata由两部分组成，mimeType和URI。\nURI格式如下：\n````\n<scheme>://<host>:<port>[<path>|<pathPrefix>|<pathPattern>]\n//示例\ncontent://com.example.project:200/folder/subfolder/etc \n````\n##匹配规则\n匹配规则与action类似，只要有一个data匹配就可以。\n\n注：\n```\n<data  android:mimeType=\"text/plain\" />\n```\n虽然没有指定URI，但是URI有默认值，**默认值为content和file**，所以intent的URI部分必须为content或者file才可以。\n下面的方法可以匹配他\n ```\n intent.setDataAndType(Uri.parse(\"file://abc\"),\"text/plain\");\n ```\n# 最后\n \nintent-filter的规则对于Service和BroadcastReceiver是一样的，但是对于Service建议尽量使用显示方法来启动。\n在使用隐式Intent时可以先对是否有相应的Activity做出判断，以防出错。采用PackageManager的resolveActivity方法或者Intent的resolveActivity，如果匹配不到就返回null。\n\n``` java\ncontex.getPackageManager().resolveActivity(intent, PackageManager.MATCH_DEFAULT_ONLY);\nintent.resolveActivity(getPackageManager());\n```\n **MATCH_DEFAULT_ONLY**的目的是去除那些category中不含DEFAULT的Activity。","slug":"IntentFilter匹配规则","published":1,"updated":"2016-12-28T12:14:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix8xu70d0007wwv6vg866p0b","content":"<p>启动Activity的方式分为两种，显示和隐式调用。显示调用很简单，直接指明要启动的Activity就可以了，这里主要介绍一下隐式调用。隐式调用需要Intent能够匹配目标组件的IntentFilter中所设置的过滤信息。<strong>只有一个Intent同时匹配action，category和data才算匹配成功。</strong><br><a id=\"more\"></a></p>\n<h1 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;intent-filter&gt;</div><div class=\"line\">    &lt;action android:name=&quot;com.sparkyuan.c&quot; /&gt;</div><div class=\"line\">    &lt;action android:name=&quot;com.sparkyuan.d&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;category android:name=&quot;com.sparkyuan.c&quot; /&gt;</div><div class=\"line\">    &lt;category android:name=&quot;com.sparkyuan.d&quot; /&gt;</div><div class=\"line\">    &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;data android:mimeType=&quot;text/plain&quot; /&gt;</div><div class=\"line\">&lt;/intent-filter&gt;`</div></pre></td></tr></table></figure>\n<h1 id=\"action匹配规则\"><a href=\"#action匹配规则\" class=\"headerlink\" title=\"action匹配规则\"></a>action匹配规则</h1><p>action是一个字符串，系统预定义了一些action，我们也可以自己定义action。<br>添加方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">intent.setAction(<span class=\"string\">\"com.sparkyuan.a\"</span>);</div></pre></td></tr></table></figure>\n<p>注：</p>\n<ul>\n<li>一个intent-filter中可以有多个action</li>\n<li>intent中的action与intent-filter中有一个相同即可</li>\n<li>action区分大小写；</li>\n</ul>\n<h1 id=\"category匹配规则\"><a href=\"#category匹配规则\" class=\"headerlink\" title=\"category匹配规则\"></a>category匹配规则</h1><p>添加方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">intent.addCategory(<span class=\"string\">\"com.sparkyuan.d\"</span>);</div></pre></td></tr></table></figure>\n<p>注：</p>\n<ul>\n<li>intent中可以不存在category，但如果存在就必须匹配intent-filter其中一个</li>\n<li>系统在startActivity或者startActivityForResult的时候默认为Intent加上一个android.intent.category.DEAFAULT，所以必须在intent-filter中加上android.intent.category.DEFAULT这个category</li>\n</ul>\n<h1 id=\"data匹配规则\"><a href=\"#data匹配规则\" class=\"headerlink\" title=\"data匹配规则\"></a>data匹配规则</h1><h2 id=\"data语法\"><a href=\"#data语法\" class=\"headerlink\" title=\"data语法\"></a>data语法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;data android:scheme=&quot;http&quot;</div><div class=\"line\">      android:host=&quot;www.baidu.com&quot;</div><div class=\"line\">      android:port=&quot;80&quot;</div><div class=\"line\">      android:path=&quot;string&quot;</div><div class=\"line\">      android:pathPattern=&quot;string&quot;</div><div class=\"line\">      android:pathPrefix=&quot;string&quot;</div><div class=\"line\">      android:mimeType=&quot;text/plain&quot; /&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"组成\"><a href=\"#组成\" class=\"headerlink\" title=\"组成\"></a>组成</h2><p>data由两部分组成，mimeType和URI。<br>URI格式如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;scheme&gt;://&lt;host&gt;:&lt;port&gt;[&lt;path&gt;|&lt;pathPrefix&gt;|&lt;pathPattern&gt;]</div><div class=\"line\">//示例</div><div class=\"line\">content://com.example.project:200/folder/subfolder/etc</div></pre></td></tr></table></figure></p>\n<p>##匹配规则<br>匹配规则与action类似，只要有一个data匹配就可以。</p>\n<p>注：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;data  android:mimeType=&quot;text/plain&quot; /&gt;</div></pre></td></tr></table></figure></p>\n<p>虽然没有指定URI，但是URI有默认值，<strong>默认值为content和file</strong>，所以intent的URI部分必须为content或者file才可以。<br>下面的方法可以匹配他<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">intent.setDataAndType(Uri.parse(&quot;file://abc&quot;),&quot;text/plain&quot;);</div></pre></td></tr></table></figure></p>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>intent-filter的规则对于Service和BroadcastReceiver是一样的，但是对于Service建议尽量使用显示方法来启动。<br>在使用隐式Intent时可以先对是否有相应的Activity做出判断，以防出错。采用PackageManager的resolveActivity方法或者Intent的resolveActivity，如果匹配不到就返回null。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">contex.getPackageManager().resolveActivity(intent, PackageManager.MATCH_DEFAULT_ONLY);</div><div class=\"line\">intent.resolveActivity(getPackageManager());</div></pre></td></tr></table></figure>\n<p> <strong>MATCH_DEFAULT_ONLY</strong>的目的是去除那些category中不含DEFAULT的Activity。</p>\n","excerpt":"<p>启动Activity的方式分为两种，显示和隐式调用。显示调用很简单，直接指明要启动的Activity就可以了，这里主要介绍一下隐式调用。隐式调用需要Intent能够匹配目标组件的IntentFilter中所设置的过滤信息。<strong>只有一个Intent同时匹配action，category和data才算匹配成功。</strong><br>","more":"</p>\n<h1 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;intent-filter&gt;</div><div class=\"line\">    &lt;action android:name=&quot;com.sparkyuan.c&quot; /&gt;</div><div class=\"line\">    &lt;action android:name=&quot;com.sparkyuan.d&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;category android:name=&quot;com.sparkyuan.c&quot; /&gt;</div><div class=\"line\">    &lt;category android:name=&quot;com.sparkyuan.d&quot; /&gt;</div><div class=\"line\">    &lt;category android:name=&quot;android.intent.category.DEFAULT&quot; /&gt;</div><div class=\"line\"></div><div class=\"line\">    &lt;data android:mimeType=&quot;text/plain&quot; /&gt;</div><div class=\"line\">&lt;/intent-filter&gt;`</div></pre></td></tr></table></figure>\n<h1 id=\"action匹配规则\"><a href=\"#action匹配规则\" class=\"headerlink\" title=\"action匹配规则\"></a>action匹配规则</h1><p>action是一个字符串，系统预定义了一些action，我们也可以自己定义action。<br>添加方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">intent.setAction(<span class=\"string\">\"com.sparkyuan.a\"</span>);</div></pre></td></tr></table></figure>\n<p>注：</p>\n<ul>\n<li>一个intent-filter中可以有多个action</li>\n<li>intent中的action与intent-filter中有一个相同即可</li>\n<li>action区分大小写；</li>\n</ul>\n<h1 id=\"category匹配规则\"><a href=\"#category匹配规则\" class=\"headerlink\" title=\"category匹配规则\"></a>category匹配规则</h1><p>添加方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">intent.addCategory(<span class=\"string\">\"com.sparkyuan.d\"</span>);</div></pre></td></tr></table></figure>\n<p>注：</p>\n<ul>\n<li>intent中可以不存在category，但如果存在就必须匹配intent-filter其中一个</li>\n<li>系统在startActivity或者startActivityForResult的时候默认为Intent加上一个android.intent.category.DEAFAULT，所以必须在intent-filter中加上android.intent.category.DEFAULT这个category</li>\n</ul>\n<h1 id=\"data匹配规则\"><a href=\"#data匹配规则\" class=\"headerlink\" title=\"data匹配规则\"></a>data匹配规则</h1><h2 id=\"data语法\"><a href=\"#data语法\" class=\"headerlink\" title=\"data语法\"></a>data语法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;data android:scheme=&quot;http&quot;</div><div class=\"line\">      android:host=&quot;www.baidu.com&quot;</div><div class=\"line\">      android:port=&quot;80&quot;</div><div class=\"line\">      android:path=&quot;string&quot;</div><div class=\"line\">      android:pathPattern=&quot;string&quot;</div><div class=\"line\">      android:pathPrefix=&quot;string&quot;</div><div class=\"line\">      android:mimeType=&quot;text/plain&quot; /&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"组成\"><a href=\"#组成\" class=\"headerlink\" title=\"组成\"></a>组成</h2><p>data由两部分组成，mimeType和URI。<br>URI格式如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;scheme&gt;://&lt;host&gt;:&lt;port&gt;[&lt;path&gt;|&lt;pathPrefix&gt;|&lt;pathPattern&gt;]</div><div class=\"line\">//示例</div><div class=\"line\">content://com.example.project:200/folder/subfolder/etc</div></pre></td></tr></table></figure></p>\n<p>##匹配规则<br>匹配规则与action类似，只要有一个data匹配就可以。</p>\n<p>注：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;data  android:mimeType=&quot;text/plain&quot; /&gt;</div></pre></td></tr></table></figure></p>\n<p>虽然没有指定URI，但是URI有默认值，<strong>默认值为content和file</strong>，所以intent的URI部分必须为content或者file才可以。<br>下面的方法可以匹配他<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">intent.setDataAndType(Uri.parse(&quot;file://abc&quot;),&quot;text/plain&quot;);</div></pre></td></tr></table></figure></p>\n<h1 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h1><p>intent-filter的规则对于Service和BroadcastReceiver是一样的，但是对于Service建议尽量使用显示方法来启动。<br>在使用隐式Intent时可以先对是否有相应的Activity做出判断，以防出错。采用PackageManager的resolveActivity方法或者Intent的resolveActivity，如果匹配不到就返回null。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">contex.getPackageManager().resolveActivity(intent, PackageManager.MATCH_DEFAULT_ONLY);</div><div class=\"line\">intent.resolveActivity(getPackageManager());</div></pre></td></tr></table></figure>\n<p> <strong>MATCH_DEFAULT_ONLY</strong>的目的是去除那些category中不含DEFAULT的Activity。</p>"},{"title":"JVM内存区域分析","date":"2016-04-22T07:38:51.000Z","_content":"Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同数据区域。这些区域都有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机进程的启动而存在，有些区域则是依赖用户线程的启动和结束而建立和销毁。\n<!-- more -->\n\n![运行时数据区](/images/jvm_memory.png)\n\n# 程序计数器（PC）\n程序计数器（Program Counter Register）是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码行号指示器。\n- 当前线程所执行的字节码行号指示器\n- 每个线程都有一个\n- 线程私有，生命周期与线程相同，随JVM启动而生，JVM关闭而死\n- 线程执行Java方法时，记录其正在执行的虚拟机字节码指令地址\n- 线程执行Nativan方法时，计数器记录为空（Undefined）\n- 唯一在Java虚拟机规范中没有规定任何OutOfMemoryError情况区域\n\n# Java虚拟机栈\n虚拟机栈描述的是Java方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧 （Stack Frame）用于存储局部变量表、操作栈、动态链接、方法出口等信息。每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。\n在Java虚拟机规范中，对于此区域规定了两种异常状况：\n- 如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常；\n- 如果虚拟机栈可以动态扩展，当扩展时无法申请到足够的内存时会抛出OutOfMemoryError异常。\n\n# 本地方法栈\n本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用非常类似，区别在于虚拟机栈为虚拟机执行Java方法服务，而本地方法栈则是为虚拟机使用到的Native方法服务。\n\n# Java堆\nJava堆是垃圾收集管理的主要战场。根据Java虚拟机规范的规定，Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像我们的磁盘空间一样。在实现时，既可以实现成固定大小的，也可以是可扩展的，不过当前主流的虚拟机都是按照可扩展来实现的。\n- 通过-Xmx和-Xms控制Heap大小\n- 如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出OutOfMemoryError异常。\n\n# 方法区\n方法区（Method Area）与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。\n- 方法区又称“永久代”(Permanent Generation)\n- 使用XX:MaxPermSize调整最大值\n- 当方法区无法满足内存分配需求时，将抛出OutOfMemoryError异常。\n\n# 运行时常量池\n运行时常量池（Runtime Constant Pool）是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是**常量池表（Constant Pool Table）**，用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。","source":"_posts/JVM运行时数据区域.md","raw":"title: JVM内存区域分析\ndate: 2016/4/22 15:38:51\ncategories:\n- JVM\ntags:\n- 深入理解JVM虚拟机\n\n---\nJava虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同数据区域。这些区域都有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机进程的启动而存在，有些区域则是依赖用户线程的启动和结束而建立和销毁。\n<!-- more -->\n\n![运行时数据区](/images/jvm_memory.png)\n\n# 程序计数器（PC）\n程序计数器（Program Counter Register）是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码行号指示器。\n- 当前线程所执行的字节码行号指示器\n- 每个线程都有一个\n- 线程私有，生命周期与线程相同，随JVM启动而生，JVM关闭而死\n- 线程执行Java方法时，记录其正在执行的虚拟机字节码指令地址\n- 线程执行Nativan方法时，计数器记录为空（Undefined）\n- 唯一在Java虚拟机规范中没有规定任何OutOfMemoryError情况区域\n\n# Java虚拟机栈\n虚拟机栈描述的是Java方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧 （Stack Frame）用于存储局部变量表、操作栈、动态链接、方法出口等信息。每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。\n在Java虚拟机规范中，对于此区域规定了两种异常状况：\n- 如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常；\n- 如果虚拟机栈可以动态扩展，当扩展时无法申请到足够的内存时会抛出OutOfMemoryError异常。\n\n# 本地方法栈\n本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用非常类似，区别在于虚拟机栈为虚拟机执行Java方法服务，而本地方法栈则是为虚拟机使用到的Native方法服务。\n\n# Java堆\nJava堆是垃圾收集管理的主要战场。根据Java虚拟机规范的规定，Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像我们的磁盘空间一样。在实现时，既可以实现成固定大小的，也可以是可扩展的，不过当前主流的虚拟机都是按照可扩展来实现的。\n- 通过-Xmx和-Xms控制Heap大小\n- 如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出OutOfMemoryError异常。\n\n# 方法区\n方法区（Method Area）与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。\n- 方法区又称“永久代”(Permanent Generation)\n- 使用XX:MaxPermSize调整最大值\n- 当方法区无法满足内存分配需求时，将抛出OutOfMemoryError异常。\n\n# 运行时常量池\n运行时常量池（Runtime Constant Pool）是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是**常量池表（Constant Pool Table）**，用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。","slug":"JVM运行时数据区域","published":1,"updated":"2016-12-28T12:14:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix8xu70f000awwv6jb5w10sv","content":"<p>Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同数据区域。这些区域都有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机进程的启动而存在，有些区域则是依赖用户线程的启动和结束而建立和销毁。<br><a id=\"more\"></a></p>\n<p><img src=\"/images/jvm_memory.png\" alt=\"运行时数据区\"></p>\n<h1 id=\"程序计数器（PC）\"><a href=\"#程序计数器（PC）\" class=\"headerlink\" title=\"程序计数器（PC）\"></a>程序计数器（PC）</h1><p>程序计数器（Program Counter Register）是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码行号指示器。</p>\n<ul>\n<li>当前线程所执行的字节码行号指示器</li>\n<li>每个线程都有一个</li>\n<li>线程私有，生命周期与线程相同，随JVM启动而生，JVM关闭而死</li>\n<li>线程执行Java方法时，记录其正在执行的虚拟机字节码指令地址</li>\n<li>线程执行Nativan方法时，计数器记录为空（Undefined）</li>\n<li>唯一在Java虚拟机规范中没有规定任何OutOfMemoryError情况区域</li>\n</ul>\n<h1 id=\"Java虚拟机栈\"><a href=\"#Java虚拟机栈\" class=\"headerlink\" title=\"Java虚拟机栈\"></a>Java虚拟机栈</h1><p>虚拟机栈描述的是Java方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧 （Stack Frame）用于存储局部变量表、操作栈、动态链接、方法出口等信息。每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。<br>在Java虚拟机规范中，对于此区域规定了两种异常状况：</p>\n<ul>\n<li>如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常；</li>\n<li>如果虚拟机栈可以动态扩展，当扩展时无法申请到足够的内存时会抛出OutOfMemoryError异常。</li>\n</ul>\n<h1 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h1><p>本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用非常类似，区别在于虚拟机栈为虚拟机执行Java方法服务，而本地方法栈则是为虚拟机使用到的Native方法服务。</p>\n<h1 id=\"Java堆\"><a href=\"#Java堆\" class=\"headerlink\" title=\"Java堆\"></a>Java堆</h1><p>Java堆是垃圾收集管理的主要战场。根据Java虚拟机规范的规定，Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像我们的磁盘空间一样。在实现时，既可以实现成固定大小的，也可以是可扩展的，不过当前主流的虚拟机都是按照可扩展来实现的。</p>\n<ul>\n<li>通过-Xmx和-Xms控制Heap大小</li>\n<li>如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出OutOfMemoryError异常。</li>\n</ul>\n<h1 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h1><p>方法区（Method Area）与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p>\n<ul>\n<li>方法区又称“永久代”(Permanent Generation)</li>\n<li>使用XX:MaxPermSize调整最大值</li>\n<li>当方法区无法满足内存分配需求时，将抛出OutOfMemoryError异常。</li>\n</ul>\n<h1 id=\"运行时常量池\"><a href=\"#运行时常量池\" class=\"headerlink\" title=\"运行时常量池\"></a>运行时常量池</h1><p>运行时常量池（Runtime Constant Pool）是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是<strong>常量池表（Constant Pool Table）</strong>，用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。</p>\n","excerpt":"<p>Java虚拟机在执行Java程序的过程中会把它所管理的内存划分为若干个不同数据区域。这些区域都有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机进程的启动而存在，有些区域则是依赖用户线程的启动和结束而建立和销毁。<br>","more":"</p>\n<p><img src=\"/images/jvm_memory.png\" alt=\"运行时数据区\"></p>\n<h1 id=\"程序计数器（PC）\"><a href=\"#程序计数器（PC）\" class=\"headerlink\" title=\"程序计数器（PC）\"></a>程序计数器（PC）</h1><p>程序计数器（Program Counter Register）是一块较小的内存空间，它的作用可以看做是当前线程所执行的字节码行号指示器。</p>\n<ul>\n<li>当前线程所执行的字节码行号指示器</li>\n<li>每个线程都有一个</li>\n<li>线程私有，生命周期与线程相同，随JVM启动而生，JVM关闭而死</li>\n<li>线程执行Java方法时，记录其正在执行的虚拟机字节码指令地址</li>\n<li>线程执行Nativan方法时，计数器记录为空（Undefined）</li>\n<li>唯一在Java虚拟机规范中没有规定任何OutOfMemoryError情况区域</li>\n</ul>\n<h1 id=\"Java虚拟机栈\"><a href=\"#Java虚拟机栈\" class=\"headerlink\" title=\"Java虚拟机栈\"></a>Java虚拟机栈</h1><p>虚拟机栈描述的是Java方法执行的内存模型：每个方法被执行的时候都会同时创建一个栈帧 （Stack Frame）用于存储局部变量表、操作栈、动态链接、方法出口等信息。每一个方法被调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。<br>在Java虚拟机规范中，对于此区域规定了两种异常状况：</p>\n<ul>\n<li>如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常；</li>\n<li>如果虚拟机栈可以动态扩展，当扩展时无法申请到足够的内存时会抛出OutOfMemoryError异常。</li>\n</ul>\n<h1 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h1><p>本地方法栈（Native Method Stacks）与虚拟机栈所发挥的作用非常类似，区别在于虚拟机栈为虚拟机执行Java方法服务，而本地方法栈则是为虚拟机使用到的Native方法服务。</p>\n<h1 id=\"Java堆\"><a href=\"#Java堆\" class=\"headerlink\" title=\"Java堆\"></a>Java堆</h1><p>Java堆是垃圾收集管理的主要战场。根据Java虚拟机规范的规定，Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像我们的磁盘空间一样。在实现时，既可以实现成固定大小的，也可以是可扩展的，不过当前主流的虚拟机都是按照可扩展来实现的。</p>\n<ul>\n<li>通过-Xmx和-Xms控制Heap大小</li>\n<li>如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出OutOfMemoryError异常。</li>\n</ul>\n<h1 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h1><p>方法区（Method Area）与Java堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。</p>\n<ul>\n<li>方法区又称“永久代”(Permanent Generation)</li>\n<li>使用XX:MaxPermSize调整最大值</li>\n<li>当方法区无法满足内存分配需求时，将抛出OutOfMemoryError异常。</li>\n</ul>\n<h1 id=\"运行时常量池\"><a href=\"#运行时常量池\" class=\"headerlink\" title=\"运行时常量池\"></a>运行时常量池</h1><p>运行时常量池（Runtime Constant Pool）是方法区的一部分。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是<strong>常量池表（Constant Pool Table）</strong>，用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。</p>"},{"title":"Android的线程和线程池","date":"2016-03-25T06:02:51.000Z","_content":"在Java中默认情况下一个进程只有一个线程，也就是主线程，其他线程都是子线程，也叫工作线程。Android中的主线程主要处理和界面相关的事情，而子线程则往往用于执行耗时操作。线程的创建和销毁的开销较大，所以如果一个进程要频繁地创建和销毁线程的话，都会采用线程池的方式。\n<!-- more -->\n\n# Android中线程的形态\n\n- 传统的Thread\n- AsyncTask\n- HandlerThread\n- IntentService\n\n## 各种线程形态的比较\n![Threads](/images/threads.png)\n\n\n## 传统的Thread\n\n这是Java本身就支持的类，自定义化程度高，但是所有的功能都需要自己维护。\n\n## AsyncTask\nAsyncTask常用于可以在几秒钟完成的后台任务，关于AsyncTask的讲解可以看这一篇文章[http://sparkyuan.me/2016/03/23/AsyncTask源码剖析(API 23)/ ](http://sparkyuan.me/2016/03/23/AsyncTask%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90(API%2023)/)/)\n讲解了AsyncTask的基本用法和源码分析。\n\n## HandlerThread\nHandlerThread继承了Thread，是一种可以使用Handler的Thread，它的实现就是在run方法中通过Looper.prepare()来创建消息队列，并通过Looper.loop()来开启消息循环，这样在实际的使用中就允许在HandlerThread中创建Handler了。外界可以通过Handler的消息方式通知HandlerThread执行一个具体的任务。\nHandlerThread的一个应用场景就是用在IntentService中。HandlerThread的run方法是一个无限循环，因此当明确不需要再使用HandlerThread的时候，可以通过它的quit或者quitSafely方法来终止线程的执行，这是一个良好的编程习惯。\n\n## IntentService\nIntentService是一个特殊的Service，它继承自Service并且是个抽象类，要使用它就要创建它的子类。与AsyncTask不同的是，IntentService用于需要长时间执行的任务，因为他是Service，所以他的优先级比单纯的线程高很多。\nIntentService的onCreate方法中会创建HandlerThread，并使用HandlerThread的Looper来构造一个Handler对象ServiceHandler，这样通过ServiceHandler对象发送的消息最终都会在HandlerThread中执行。IntentService会将Intent封装到Message中，通过ServiceHandler发送出去，在ServiceHandler的handleMessage方法中会调用IntentService的抽象方法onHandleIntent，所以IntentService的子类都要是实现这个方法。\n\n### 一个例子\n\n```java\npublic class LocalIntentService extends IntentService {\n    private static final String TAG = \"LocalIntentService\";\n\n    public LocalIntentService() {\n        super(TAG);\n    }\n\n    @Override\n    protected void onHandleIntent(Intent intent) {\n        String action = intent.getStringExtra(\"task_action\");\n        Log.d(TAG, \"receive task :\" +  action);\n        SystemClock.sleep(3000);\n        if (\"com.ryg.action.TASK1\".equals(action)) {\n            Log.d(TAG, \"handle task: \" + action);\n        }\n    }\n\n    @Override\n    public void onDestroy() {\n        Log.d(TAG, \"service destroyed.\");\n        super.onDestroy();\n    }\n}\n```\n\n```java\n Intent service = new Intent(this, LocalIntentService.class);\n        service.putExtra(\"task_action\", \"com.sparkyuan.com\");\n        startService(service);\n        \n```\n\n# Android中的线程池\n## 使用线程池的优点\n\n1. 重用线程，避免线程的创建和销毁带来的性能开销；\n2. 能有效控制线程池的最大并发数，避免大量的线程之间因互相抢占系统资源而导致的阻塞现象；\n3. 能够对线程进行简单的管理，并提供定时执行以及指定间隔循环执行等功能。\n\n## ThreadPoolExecutor\nExecutor只是一个接口，真正的线程池是ThreadPoolExecutor。ThreadPoolExecutor提供了一系列参数来配置线程池，通过不同的参数可以创建不同的线程池，Android的线程池都是通过Executors提供的工厂方法得到的。\n```java\npublic ThreadPoolExecutor(int corePoolSize,\n                              int maximumPoolSize,\n                              long keepAliveTime,\n                              TimeUnit unit,\n                              BlockingQueue<Runnable> workQueue)\n                              ThreadFactory threadFactory\n```\n\n1. corePoolSize：核心线程数，默认情况下，核心线程会在线程中一直存活；\n2. maximumPoolSize：最大线程数，当活动线程数达到这个数值后，后续的任务将会被阻塞；\n3. keepAliveTime：非核心线程闲置时的超时时长，超过这个时长，闲置的非核心线程就会被回收；\n4. unit：用于指定keepAliveTime参数的时间单位，有TimeUnit.MILLISECONDS、TimeUnit.SECONDS、TimeUnit.MINUTES等；\n5. workQueue：任务队列，通过线程池的execute方法提交的Runnable对象会存储在这个参数中；\n6. threadFactory：线程工厂，为线程池提供创建新线程的功能。它是一个接口，它只有一个方法Thread newThread(Runnable r)；\n7. RejectedExecutionHandler：当线程池无法执行新任务时，可能是由于任务队列已满或者是无法成功执行任务，这个时候就会调用这个Handler的rejectedExecution方法来通知调用者，默认情况下，rejectedExecution会直接抛出一个rejectedExecutionException。\n\n## ThreadPoolExecutor执行任务规则\n\n1. 如果线程池中的线程数未达到核心线程的数量，那么会直接启动一个核心线程来执行任务\n2. 如果线程池中的线程数量已经达到或者超过核心线程的数量，那么任务会被插入到任务队列中排队等待执行\n3. 如果在步骤2中无法将任务插入到的任务队列中，可能是任务队列已满，这个时候如果线程数量没有达到规定的最大值，那么会立刻启动非核心线程来执行这个任务\n4. 如果步骤3中线程数量已经达到线程池规定的最大值，那么就拒绝执行此任务，ThreadPoolExecutor会调用RejectedExecutionHandler的rejectedExecution方法来通知调用者。\n\n## AsyncTask中的THREAD_POOL_EXECUTOR线程池的配置情况\n1. corePoolSize=CPU核心数+1；\n2. maximumPoolSize=2倍的CPU核心数+1；\n3. 核心线程无超时机制，非核心线程在闲置时间的超时时间为1s；\n4. 任务队列的容量为128。\n\n## 线程池分类\n1. FixedThreadPool：线程数量固定的线程池，它只有核心线程；\n2. CachedThreadPool：线程数量不固定的线程池，它只有非核心线程；\n3. ScheduledThreadPool：核心线程数量固定，非核心线程数量没有限制的线程池，主要用于执行定时任务和具有固定周期的任务；\n4. SingleThreadPool：只有一个核心线程的线程池，确保了所有的任务都在同一个线程中按顺序执行。\n\n### 示例\n\n```java\nprivate void runThreadPool() {\n        Runnable command = new Runnable() {\n            @Override\n            public void run() {\n                SystemClock.sleep(2000);\n            }\n        };\n\n        ExecutorService fixedThreadPool = Executors.newFixedThreadPool(4);\n        fixedThreadPool.execute(command);\n        \n        ExecutorService cachedThreadPool = Executors.newCachedThreadPool();\n        cachedThreadPool.execute(command);\n        \n        ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(4);\n        // 2000ms后执行command\n        scheduledThreadPool.schedule(command, 2000, TimeUnit.MILLISECONDS);\n        // 延迟10ms后，每隔1000ms执行一次command\n        scheduledThreadPool.scheduleAtFixedRate(command, 10, 1000, TimeUnit.MILLISECONDS);\n\n        ExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor();\n        singleThreadExecutor.execute(command);\n    }\n    \n```","source":"_posts/Android的线程和线程池.md","raw":"title: Android的线程和线程池\ndate: 2016/3/25 14:02:51\ncategories:\n- Android\n- Android开发艺术探索笔记\ntags:\n- AsyncTask\n- HandlerThread\n- IntentService\n- Thread\n\n---\n在Java中默认情况下一个进程只有一个线程，也就是主线程，其他线程都是子线程，也叫工作线程。Android中的主线程主要处理和界面相关的事情，而子线程则往往用于执行耗时操作。线程的创建和销毁的开销较大，所以如果一个进程要频繁地创建和销毁线程的话，都会采用线程池的方式。\n<!-- more -->\n\n# Android中线程的形态\n\n- 传统的Thread\n- AsyncTask\n- HandlerThread\n- IntentService\n\n## 各种线程形态的比较\n![Threads](/images/threads.png)\n\n\n## 传统的Thread\n\n这是Java本身就支持的类，自定义化程度高，但是所有的功能都需要自己维护。\n\n## AsyncTask\nAsyncTask常用于可以在几秒钟完成的后台任务，关于AsyncTask的讲解可以看这一篇文章[http://sparkyuan.me/2016/03/23/AsyncTask源码剖析(API 23)/ ](http://sparkyuan.me/2016/03/23/AsyncTask%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90(API%2023)/)/)\n讲解了AsyncTask的基本用法和源码分析。\n\n## HandlerThread\nHandlerThread继承了Thread，是一种可以使用Handler的Thread，它的实现就是在run方法中通过Looper.prepare()来创建消息队列，并通过Looper.loop()来开启消息循环，这样在实际的使用中就允许在HandlerThread中创建Handler了。外界可以通过Handler的消息方式通知HandlerThread执行一个具体的任务。\nHandlerThread的一个应用场景就是用在IntentService中。HandlerThread的run方法是一个无限循环，因此当明确不需要再使用HandlerThread的时候，可以通过它的quit或者quitSafely方法来终止线程的执行，这是一个良好的编程习惯。\n\n## IntentService\nIntentService是一个特殊的Service，它继承自Service并且是个抽象类，要使用它就要创建它的子类。与AsyncTask不同的是，IntentService用于需要长时间执行的任务，因为他是Service，所以他的优先级比单纯的线程高很多。\nIntentService的onCreate方法中会创建HandlerThread，并使用HandlerThread的Looper来构造一个Handler对象ServiceHandler，这样通过ServiceHandler对象发送的消息最终都会在HandlerThread中执行。IntentService会将Intent封装到Message中，通过ServiceHandler发送出去，在ServiceHandler的handleMessage方法中会调用IntentService的抽象方法onHandleIntent，所以IntentService的子类都要是实现这个方法。\n\n### 一个例子\n\n```java\npublic class LocalIntentService extends IntentService {\n    private static final String TAG = \"LocalIntentService\";\n\n    public LocalIntentService() {\n        super(TAG);\n    }\n\n    @Override\n    protected void onHandleIntent(Intent intent) {\n        String action = intent.getStringExtra(\"task_action\");\n        Log.d(TAG, \"receive task :\" +  action);\n        SystemClock.sleep(3000);\n        if (\"com.ryg.action.TASK1\".equals(action)) {\n            Log.d(TAG, \"handle task: \" + action);\n        }\n    }\n\n    @Override\n    public void onDestroy() {\n        Log.d(TAG, \"service destroyed.\");\n        super.onDestroy();\n    }\n}\n```\n\n```java\n Intent service = new Intent(this, LocalIntentService.class);\n        service.putExtra(\"task_action\", \"com.sparkyuan.com\");\n        startService(service);\n        \n```\n\n# Android中的线程池\n## 使用线程池的优点\n\n1. 重用线程，避免线程的创建和销毁带来的性能开销；\n2. 能有效控制线程池的最大并发数，避免大量的线程之间因互相抢占系统资源而导致的阻塞现象；\n3. 能够对线程进行简单的管理，并提供定时执行以及指定间隔循环执行等功能。\n\n## ThreadPoolExecutor\nExecutor只是一个接口，真正的线程池是ThreadPoolExecutor。ThreadPoolExecutor提供了一系列参数来配置线程池，通过不同的参数可以创建不同的线程池，Android的线程池都是通过Executors提供的工厂方法得到的。\n```java\npublic ThreadPoolExecutor(int corePoolSize,\n                              int maximumPoolSize,\n                              long keepAliveTime,\n                              TimeUnit unit,\n                              BlockingQueue<Runnable> workQueue)\n                              ThreadFactory threadFactory\n```\n\n1. corePoolSize：核心线程数，默认情况下，核心线程会在线程中一直存活；\n2. maximumPoolSize：最大线程数，当活动线程数达到这个数值后，后续的任务将会被阻塞；\n3. keepAliveTime：非核心线程闲置时的超时时长，超过这个时长，闲置的非核心线程就会被回收；\n4. unit：用于指定keepAliveTime参数的时间单位，有TimeUnit.MILLISECONDS、TimeUnit.SECONDS、TimeUnit.MINUTES等；\n5. workQueue：任务队列，通过线程池的execute方法提交的Runnable对象会存储在这个参数中；\n6. threadFactory：线程工厂，为线程池提供创建新线程的功能。它是一个接口，它只有一个方法Thread newThread(Runnable r)；\n7. RejectedExecutionHandler：当线程池无法执行新任务时，可能是由于任务队列已满或者是无法成功执行任务，这个时候就会调用这个Handler的rejectedExecution方法来通知调用者，默认情况下，rejectedExecution会直接抛出一个rejectedExecutionException。\n\n## ThreadPoolExecutor执行任务规则\n\n1. 如果线程池中的线程数未达到核心线程的数量，那么会直接启动一个核心线程来执行任务\n2. 如果线程池中的线程数量已经达到或者超过核心线程的数量，那么任务会被插入到任务队列中排队等待执行\n3. 如果在步骤2中无法将任务插入到的任务队列中，可能是任务队列已满，这个时候如果线程数量没有达到规定的最大值，那么会立刻启动非核心线程来执行这个任务\n4. 如果步骤3中线程数量已经达到线程池规定的最大值，那么就拒绝执行此任务，ThreadPoolExecutor会调用RejectedExecutionHandler的rejectedExecution方法来通知调用者。\n\n## AsyncTask中的THREAD_POOL_EXECUTOR线程池的配置情况\n1. corePoolSize=CPU核心数+1；\n2. maximumPoolSize=2倍的CPU核心数+1；\n3. 核心线程无超时机制，非核心线程在闲置时间的超时时间为1s；\n4. 任务队列的容量为128。\n\n## 线程池分类\n1. FixedThreadPool：线程数量固定的线程池，它只有核心线程；\n2. CachedThreadPool：线程数量不固定的线程池，它只有非核心线程；\n3. ScheduledThreadPool：核心线程数量固定，非核心线程数量没有限制的线程池，主要用于执行定时任务和具有固定周期的任务；\n4. SingleThreadPool：只有一个核心线程的线程池，确保了所有的任务都在同一个线程中按顺序执行。\n\n### 示例\n\n```java\nprivate void runThreadPool() {\n        Runnable command = new Runnable() {\n            @Override\n            public void run() {\n                SystemClock.sleep(2000);\n            }\n        };\n\n        ExecutorService fixedThreadPool = Executors.newFixedThreadPool(4);\n        fixedThreadPool.execute(command);\n        \n        ExecutorService cachedThreadPool = Executors.newCachedThreadPool();\n        cachedThreadPool.execute(command);\n        \n        ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(4);\n        // 2000ms后执行command\n        scheduledThreadPool.schedule(command, 2000, TimeUnit.MILLISECONDS);\n        // 延迟10ms后，每隔1000ms执行一次command\n        scheduledThreadPool.scheduleAtFixedRate(command, 10, 1000, TimeUnit.MILLISECONDS);\n\n        ExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor();\n        singleThreadExecutor.execute(command);\n    }\n    \n```","slug":"Android的线程和线程池","published":1,"updated":"2016-12-28T12:14:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix8xu70l000cwwv6vy3y4cut","content":"<p>在Java中默认情况下一个进程只有一个线程，也就是主线程，其他线程都是子线程，也叫工作线程。Android中的主线程主要处理和界面相关的事情，而子线程则往往用于执行耗时操作。线程的创建和销毁的开销较大，所以如果一个进程要频繁地创建和销毁线程的话，都会采用线程池的方式。<br><a id=\"more\"></a></p>\n<h1 id=\"Android中线程的形态\"><a href=\"#Android中线程的形态\" class=\"headerlink\" title=\"Android中线程的形态\"></a>Android中线程的形态</h1><ul>\n<li>传统的Thread</li>\n<li>AsyncTask</li>\n<li>HandlerThread</li>\n<li>IntentService</li>\n</ul>\n<h2 id=\"各种线程形态的比较\"><a href=\"#各种线程形态的比较\" class=\"headerlink\" title=\"各种线程形态的比较\"></a>各种线程形态的比较</h2><p><img src=\"/images/threads.png\" alt=\"Threads\"></p>\n<h2 id=\"传统的Thread\"><a href=\"#传统的Thread\" class=\"headerlink\" title=\"传统的Thread\"></a>传统的Thread</h2><p>这是Java本身就支持的类，自定义化程度高，但是所有的功能都需要自己维护。</p>\n<h2 id=\"AsyncTask\"><a href=\"#AsyncTask\" class=\"headerlink\" title=\"AsyncTask\"></a>AsyncTask</h2><p>AsyncTask常用于可以在几秒钟完成的后台任务，关于AsyncTask的讲解可以看这一篇文章<a href=\"http://sparkyuan.me/2016/03/23/AsyncTask%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90(API%2023\" target=\"_blank\" rel=\"external\">http://sparkyuan.me/2016/03/23/AsyncTask源码剖析(API 23)/ </a>/)/)<br>讲解了AsyncTask的基本用法和源码分析。</p>\n<h2 id=\"HandlerThread\"><a href=\"#HandlerThread\" class=\"headerlink\" title=\"HandlerThread\"></a>HandlerThread</h2><p>HandlerThread继承了Thread，是一种可以使用Handler的Thread，它的实现就是在run方法中通过Looper.prepare()来创建消息队列，并通过Looper.loop()来开启消息循环，这样在实际的使用中就允许在HandlerThread中创建Handler了。外界可以通过Handler的消息方式通知HandlerThread执行一个具体的任务。<br>HandlerThread的一个应用场景就是用在IntentService中。HandlerThread的run方法是一个无限循环，因此当明确不需要再使用HandlerThread的时候，可以通过它的quit或者quitSafely方法来终止线程的执行，这是一个良好的编程习惯。</p>\n<h2 id=\"IntentService\"><a href=\"#IntentService\" class=\"headerlink\" title=\"IntentService\"></a>IntentService</h2><p>IntentService是一个特殊的Service，它继承自Service并且是个抽象类，要使用它就要创建它的子类。与AsyncTask不同的是，IntentService用于需要长时间执行的任务，因为他是Service，所以他的优先级比单纯的线程高很多。<br>IntentService的onCreate方法中会创建HandlerThread，并使用HandlerThread的Looper来构造一个Handler对象ServiceHandler，这样通过ServiceHandler对象发送的消息最终都会在HandlerThread中执行。IntentService会将Intent封装到Message中，通过ServiceHandler发送出去，在ServiceHandler的handleMessage方法中会调用IntentService的抽象方法onHandleIntent，所以IntentService的子类都要是实现这个方法。</p>\n<h3 id=\"一个例子\"><a href=\"#一个例子\" class=\"headerlink\" title=\"一个例子\"></a>一个例子</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LocalIntentService</span> <span class=\"keyword\">extends</span> <span class=\"title\">IntentService</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"LocalIntentService\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LocalIntentService</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(TAG);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onHandleIntent</span><span class=\"params\">(Intent intent)</span> </span>&#123;</div><div class=\"line\">        String action = intent.getStringExtra(<span class=\"string\">\"task_action\"</span>);</div><div class=\"line\">        Log.d(TAG, <span class=\"string\">\"receive task :\"</span> +  action);</div><div class=\"line\">        SystemClock.sleep(<span class=\"number\">3000</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">\"com.ryg.action.TASK1\"</span>.equals(action)) &#123;</div><div class=\"line\">            Log.d(TAG, <span class=\"string\">\"handle task: \"</span> + action);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Log.d(TAG, <span class=\"string\">\"service destroyed.\"</span>);</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Intent service = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, LocalIntentService.class);</div><div class=\"line\">       service.putExtra(<span class=\"string\">\"task_action\"</span>, <span class=\"string\">\"com.sparkyuan.com\"</span>);</div><div class=\"line\">       startService(service);</div></pre></td></tr></table></figure>\n<h1 id=\"Android中的线程池\"><a href=\"#Android中的线程池\" class=\"headerlink\" title=\"Android中的线程池\"></a>Android中的线程池</h1><h2 id=\"使用线程池的优点\"><a href=\"#使用线程池的优点\" class=\"headerlink\" title=\"使用线程池的优点\"></a>使用线程池的优点</h2><ol>\n<li>重用线程，避免线程的创建和销毁带来的性能开销；</li>\n<li>能有效控制线程池的最大并发数，避免大量的线程之间因互相抢占系统资源而导致的阻塞现象；</li>\n<li>能够对线程进行简单的管理，并提供定时执行以及指定间隔循环执行等功能。</li>\n</ol>\n<h2 id=\"ThreadPoolExecutor\"><a href=\"#ThreadPoolExecutor\" class=\"headerlink\" title=\"ThreadPoolExecutor\"></a>ThreadPoolExecutor</h2><p>Executor只是一个接口，真正的线程池是ThreadPoolExecutor。ThreadPoolExecutor提供了一系列参数来配置线程池，通过不同的参数可以创建不同的线程池，Android的线程池都是通过Executors提供的工厂方法得到的。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,</span></span></div><div class=\"line\">                              <span class=\"keyword\">int</span> maximumPoolSize,</div><div class=\"line\">                              <span class=\"keyword\">long</span> keepAliveTime,</div><div class=\"line\">                              TimeUnit unit,</div><div class=\"line\">                              BlockingQueue&lt;Runnable&gt; workQueue)</div><div class=\"line\">                              ThreadFactory threadFactory</div></pre></td></tr></table></figure></p>\n<ol>\n<li>corePoolSize：核心线程数，默认情况下，核心线程会在线程中一直存活；</li>\n<li>maximumPoolSize：最大线程数，当活动线程数达到这个数值后，后续的任务将会被阻塞；</li>\n<li>keepAliveTime：非核心线程闲置时的超时时长，超过这个时长，闲置的非核心线程就会被回收；</li>\n<li>unit：用于指定keepAliveTime参数的时间单位，有TimeUnit.MILLISECONDS、TimeUnit.SECONDS、TimeUnit.MINUTES等；</li>\n<li>workQueue：任务队列，通过线程池的execute方法提交的Runnable对象会存储在这个参数中；</li>\n<li>threadFactory：线程工厂，为线程池提供创建新线程的功能。它是一个接口，它只有一个方法Thread newThread(Runnable r)；</li>\n<li>RejectedExecutionHandler：当线程池无法执行新任务时，可能是由于任务队列已满或者是无法成功执行任务，这个时候就会调用这个Handler的rejectedExecution方法来通知调用者，默认情况下，rejectedExecution会直接抛出一个rejectedExecutionException。</li>\n</ol>\n<h2 id=\"ThreadPoolExecutor执行任务规则\"><a href=\"#ThreadPoolExecutor执行任务规则\" class=\"headerlink\" title=\"ThreadPoolExecutor执行任务规则\"></a>ThreadPoolExecutor执行任务规则</h2><ol>\n<li>如果线程池中的线程数未达到核心线程的数量，那么会直接启动一个核心线程来执行任务</li>\n<li>如果线程池中的线程数量已经达到或者超过核心线程的数量，那么任务会被插入到任务队列中排队等待执行</li>\n<li>如果在步骤2中无法将任务插入到的任务队列中，可能是任务队列已满，这个时候如果线程数量没有达到规定的最大值，那么会立刻启动非核心线程来执行这个任务</li>\n<li>如果步骤3中线程数量已经达到线程池规定的最大值，那么就拒绝执行此任务，ThreadPoolExecutor会调用RejectedExecutionHandler的rejectedExecution方法来通知调用者。</li>\n</ol>\n<h2 id=\"AsyncTask中的THREAD-POOL-EXECUTOR线程池的配置情况\"><a href=\"#AsyncTask中的THREAD-POOL-EXECUTOR线程池的配置情况\" class=\"headerlink\" title=\"AsyncTask中的THREAD_POOL_EXECUTOR线程池的配置情况\"></a>AsyncTask中的THREAD_POOL_EXECUTOR线程池的配置情况</h2><ol>\n<li>corePoolSize=CPU核心数+1；</li>\n<li>maximumPoolSize=2倍的CPU核心数+1；</li>\n<li>核心线程无超时机制，非核心线程在闲置时间的超时时间为1s；</li>\n<li>任务队列的容量为128。</li>\n</ol>\n<h2 id=\"线程池分类\"><a href=\"#线程池分类\" class=\"headerlink\" title=\"线程池分类\"></a>线程池分类</h2><ol>\n<li>FixedThreadPool：线程数量固定的线程池，它只有核心线程；</li>\n<li>CachedThreadPool：线程数量不固定的线程池，它只有非核心线程；</li>\n<li>ScheduledThreadPool：核心线程数量固定，非核心线程数量没有限制的线程池，主要用于执行定时任务和具有固定周期的任务；</li>\n<li>SingleThreadPool：只有一个核心线程的线程池，确保了所有的任务都在同一个线程中按顺序执行。</li>\n</ol>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">runThreadPool</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Runnable command = <span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                SystemClock.sleep(<span class=\"number\">2000</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">        ExecutorService fixedThreadPool = Executors.newFixedThreadPool(<span class=\"number\">4</span>);</div><div class=\"line\">        fixedThreadPool.execute(command);</div><div class=\"line\">        </div><div class=\"line\">        ExecutorService cachedThreadPool = Executors.newCachedThreadPool();</div><div class=\"line\">        cachedThreadPool.execute(command);</div><div class=\"line\">        </div><div class=\"line\">        ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(<span class=\"number\">4</span>);</div><div class=\"line\">        <span class=\"comment\">// 2000ms后执行command</span></div><div class=\"line\">        scheduledThreadPool.schedule(command, <span class=\"number\">2000</span>, TimeUnit.MILLISECONDS);</div><div class=\"line\">        <span class=\"comment\">// 延迟10ms后，每隔1000ms执行一次command</span></div><div class=\"line\">        scheduledThreadPool.scheduleAtFixedRate(command, <span class=\"number\">10</span>, <span class=\"number\">1000</span>, TimeUnit.MILLISECONDS);</div><div class=\"line\"></div><div class=\"line\">        ExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor();</div><div class=\"line\">        singleThreadExecutor.execute(command);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>","excerpt":"<p>在Java中默认情况下一个进程只有一个线程，也就是主线程，其他线程都是子线程，也叫工作线程。Android中的主线程主要处理和界面相关的事情，而子线程则往往用于执行耗时操作。线程的创建和销毁的开销较大，所以如果一个进程要频繁地创建和销毁线程的话，都会采用线程池的方式。<br>","more":"</p>\n<h1 id=\"Android中线程的形态\"><a href=\"#Android中线程的形态\" class=\"headerlink\" title=\"Android中线程的形态\"></a>Android中线程的形态</h1><ul>\n<li>传统的Thread</li>\n<li>AsyncTask</li>\n<li>HandlerThread</li>\n<li>IntentService</li>\n</ul>\n<h2 id=\"各种线程形态的比较\"><a href=\"#各种线程形态的比较\" class=\"headerlink\" title=\"各种线程形态的比较\"></a>各种线程形态的比较</h2><p><img src=\"/images/threads.png\" alt=\"Threads\"></p>\n<h2 id=\"传统的Thread\"><a href=\"#传统的Thread\" class=\"headerlink\" title=\"传统的Thread\"></a>传统的Thread</h2><p>这是Java本身就支持的类，自定义化程度高，但是所有的功能都需要自己维护。</p>\n<h2 id=\"AsyncTask\"><a href=\"#AsyncTask\" class=\"headerlink\" title=\"AsyncTask\"></a>AsyncTask</h2><p>AsyncTask常用于可以在几秒钟完成的后台任务，关于AsyncTask的讲解可以看这一篇文章<a href=\"http://sparkyuan.me/2016/03/23/AsyncTask%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90(API%2023\">http://sparkyuan.me/2016/03/23/AsyncTask源码剖析(API 23)/ </a>/)/)<br>讲解了AsyncTask的基本用法和源码分析。</p>\n<h2 id=\"HandlerThread\"><a href=\"#HandlerThread\" class=\"headerlink\" title=\"HandlerThread\"></a>HandlerThread</h2><p>HandlerThread继承了Thread，是一种可以使用Handler的Thread，它的实现就是在run方法中通过Looper.prepare()来创建消息队列，并通过Looper.loop()来开启消息循环，这样在实际的使用中就允许在HandlerThread中创建Handler了。外界可以通过Handler的消息方式通知HandlerThread执行一个具体的任务。<br>HandlerThread的一个应用场景就是用在IntentService中。HandlerThread的run方法是一个无限循环，因此当明确不需要再使用HandlerThread的时候，可以通过它的quit或者quitSafely方法来终止线程的执行，这是一个良好的编程习惯。</p>\n<h2 id=\"IntentService\"><a href=\"#IntentService\" class=\"headerlink\" title=\"IntentService\"></a>IntentService</h2><p>IntentService是一个特殊的Service，它继承自Service并且是个抽象类，要使用它就要创建它的子类。与AsyncTask不同的是，IntentService用于需要长时间执行的任务，因为他是Service，所以他的优先级比单纯的线程高很多。<br>IntentService的onCreate方法中会创建HandlerThread，并使用HandlerThread的Looper来构造一个Handler对象ServiceHandler，这样通过ServiceHandler对象发送的消息最终都会在HandlerThread中执行。IntentService会将Intent封装到Message中，通过ServiceHandler发送出去，在ServiceHandler的handleMessage方法中会调用IntentService的抽象方法onHandleIntent，所以IntentService的子类都要是实现这个方法。</p>\n<h3 id=\"一个例子\"><a href=\"#一个例子\" class=\"headerlink\" title=\"一个例子\"></a>一个例子</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LocalIntentService</span> <span class=\"keyword\">extends</span> <span class=\"title\">IntentService</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"LocalIntentService\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">LocalIntentService</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(TAG);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onHandleIntent</span><span class=\"params\">(Intent intent)</span> </span>&#123;</div><div class=\"line\">        String action = intent.getStringExtra(<span class=\"string\">\"task_action\"</span>);</div><div class=\"line\">        Log.d(TAG, <span class=\"string\">\"receive task :\"</span> +  action);</div><div class=\"line\">        SystemClock.sleep(<span class=\"number\">3000</span>);</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">\"com.ryg.action.TASK1\"</span>.equals(action)) &#123;</div><div class=\"line\">            Log.d(TAG, <span class=\"string\">\"handle task: \"</span> + action);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Log.d(TAG, <span class=\"string\">\"service destroyed.\"</span>);</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Intent service = <span class=\"keyword\">new</span> Intent(<span class=\"keyword\">this</span>, LocalIntentService.class);</div><div class=\"line\">       service.putExtra(<span class=\"string\">\"task_action\"</span>, <span class=\"string\">\"com.sparkyuan.com\"</span>);</div><div class=\"line\">       startService(service);</div></pre></td></tr></table></figure>\n<h1 id=\"Android中的线程池\"><a href=\"#Android中的线程池\" class=\"headerlink\" title=\"Android中的线程池\"></a>Android中的线程池</h1><h2 id=\"使用线程池的优点\"><a href=\"#使用线程池的优点\" class=\"headerlink\" title=\"使用线程池的优点\"></a>使用线程池的优点</h2><ol>\n<li>重用线程，避免线程的创建和销毁带来的性能开销；</li>\n<li>能有效控制线程池的最大并发数，避免大量的线程之间因互相抢占系统资源而导致的阻塞现象；</li>\n<li>能够对线程进行简单的管理，并提供定时执行以及指定间隔循环执行等功能。</li>\n</ol>\n<h2 id=\"ThreadPoolExecutor\"><a href=\"#ThreadPoolExecutor\" class=\"headerlink\" title=\"ThreadPoolExecutor\"></a>ThreadPoolExecutor</h2><p>Executor只是一个接口，真正的线程池是ThreadPoolExecutor。ThreadPoolExecutor提供了一系列参数来配置线程池，通过不同的参数可以创建不同的线程池，Android的线程池都是通过Executors提供的工厂方法得到的。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"keyword\">int</span> corePoolSize,</div><div class=\"line\">                              <span class=\"keyword\">int</span> maximumPoolSize,</div><div class=\"line\">                              <span class=\"keyword\">long</span> keepAliveTime,</div><div class=\"line\">                              TimeUnit unit,</div><div class=\"line\">                              BlockingQueue&lt;Runnable&gt; workQueue)</span></div><div class=\"line\">                              ThreadFactory threadFactory</span></div></pre></td></tr></table></figure></p>\n<ol>\n<li>corePoolSize：核心线程数，默认情况下，核心线程会在线程中一直存活；</li>\n<li>maximumPoolSize：最大线程数，当活动线程数达到这个数值后，后续的任务将会被阻塞；</li>\n<li>keepAliveTime：非核心线程闲置时的超时时长，超过这个时长，闲置的非核心线程就会被回收；</li>\n<li>unit：用于指定keepAliveTime参数的时间单位，有TimeUnit.MILLISECONDS、TimeUnit.SECONDS、TimeUnit.MINUTES等；</li>\n<li>workQueue：任务队列，通过线程池的execute方法提交的Runnable对象会存储在这个参数中；</li>\n<li>threadFactory：线程工厂，为线程池提供创建新线程的功能。它是一个接口，它只有一个方法Thread newThread(Runnable r)；</li>\n<li>RejectedExecutionHandler：当线程池无法执行新任务时，可能是由于任务队列已满或者是无法成功执行任务，这个时候就会调用这个Handler的rejectedExecution方法来通知调用者，默认情况下，rejectedExecution会直接抛出一个rejectedExecutionException。</li>\n</ol>\n<h2 id=\"ThreadPoolExecutor执行任务规则\"><a href=\"#ThreadPoolExecutor执行任务规则\" class=\"headerlink\" title=\"ThreadPoolExecutor执行任务规则\"></a>ThreadPoolExecutor执行任务规则</h2><ol>\n<li>如果线程池中的线程数未达到核心线程的数量，那么会直接启动一个核心线程来执行任务</li>\n<li>如果线程池中的线程数量已经达到或者超过核心线程的数量，那么任务会被插入到任务队列中排队等待执行</li>\n<li>如果在步骤2中无法将任务插入到的任务队列中，可能是任务队列已满，这个时候如果线程数量没有达到规定的最大值，那么会立刻启动非核心线程来执行这个任务</li>\n<li>如果步骤3中线程数量已经达到线程池规定的最大值，那么就拒绝执行此任务，ThreadPoolExecutor会调用RejectedExecutionHandler的rejectedExecution方法来通知调用者。</li>\n</ol>\n<h2 id=\"AsyncTask中的THREAD-POOL-EXECUTOR线程池的配置情况\"><a href=\"#AsyncTask中的THREAD-POOL-EXECUTOR线程池的配置情况\" class=\"headerlink\" title=\"AsyncTask中的THREAD_POOL_EXECUTOR线程池的配置情况\"></a>AsyncTask中的THREAD_POOL_EXECUTOR线程池的配置情况</h2><ol>\n<li>corePoolSize=CPU核心数+1；</li>\n<li>maximumPoolSize=2倍的CPU核心数+1；</li>\n<li>核心线程无超时机制，非核心线程在闲置时间的超时时间为1s；</li>\n<li>任务队列的容量为128。</li>\n</ol>\n<h2 id=\"线程池分类\"><a href=\"#线程池分类\" class=\"headerlink\" title=\"线程池分类\"></a>线程池分类</h2><ol>\n<li>FixedThreadPool：线程数量固定的线程池，它只有核心线程；</li>\n<li>CachedThreadPool：线程数量不固定的线程池，它只有非核心线程；</li>\n<li>ScheduledThreadPool：核心线程数量固定，非核心线程数量没有限制的线程池，主要用于执行定时任务和具有固定周期的任务；</li>\n<li>SingleThreadPool：只有一个核心线程的线程池，确保了所有的任务都在同一个线程中按顺序执行。</li>\n</ol>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">runThreadPool</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        Runnable command = <span class=\"keyword\">new</span> Runnable() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">                SystemClock.sleep(<span class=\"number\">2000</span>);</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">        ExecutorService fixedThreadPool = Executors.newFixedThreadPool(<span class=\"number\">4</span>);</div><div class=\"line\">        fixedThreadPool.execute(command);</div><div class=\"line\">        </div><div class=\"line\">        ExecutorService cachedThreadPool = Executors.newCachedThreadPool();</div><div class=\"line\">        cachedThreadPool.execute(command);</div><div class=\"line\">        </div><div class=\"line\">        ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(<span class=\"number\">4</span>);</div><div class=\"line\">        <span class=\"comment\">// 2000ms后执行command</span></div><div class=\"line\">        scheduledThreadPool.schedule(command, <span class=\"number\">2000</span>, TimeUnit.MILLISECONDS);</div><div class=\"line\">        <span class=\"comment\">// 延迟10ms后，每隔1000ms执行一次command</span></div><div class=\"line\">        scheduledThreadPool.scheduleAtFixedRate(command, <span class=\"number\">10</span>, <span class=\"number\">1000</span>, TimeUnit.MILLISECONDS);</div><div class=\"line\"></div><div class=\"line\">        ExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor();</div><div class=\"line\">        singleThreadExecutor.execute(command);</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>"},{"title":"每日一妹子","date":"2016-03-11T12:46:25.000Z","top":10,"_content":"\n# Meizi\nGithub：[https://github.com/SparkYuan/Meizi](https://github.com/SparkYuan/Meizi)\n\n刚开始学习Android的时候，主要就是学习了一些Activity的生命周期，各种View和Layout的使用，SQLite等零散的知识点，这些东西市面上任何一本Android的入门书籍都会覆盖，但是学习完这些之后就有些迷茫了，不知道下一步该学一些什么？如果你也正好处于这个状态不妨看看这个开源项目。\n自己走过一些弯路，所以写了一个这样的App，希望可以对学习Android的新手有些帮助。\n<!-- more -->\n\n一个特别适合新手练习的Android小项目——每日一妹纸\n\n每天更新一张[@代码家](https://github.com/daimajia)精选妹纸图片，所以叫每日一妹纸，咳咳，不要污，这是一个很绅士的项目（一脸绅士(๑•̀ㅂ•́) ✧）\n\n第一版目前已完成，本项目会持续更新，遇到任何问题欢迎与我联系^_^\n## 部分示例\n\n![示例](https://github.com/SparkYuan/Meizi/raw/master/pic/meizi.gif)\n\n![首页](https://raw.githubusercontent.com/SparkYuan/Meizi/master/pic/Screenshot_2016-03-08-10-37-45.png)\n\n![1](https://raw.githubusercontent.com/SparkYuan/Meizi/master/pic/Screenshot_2016-03-08-10-37-48.png)\n\n![2](https://raw.githubusercontent.com/SparkYuan/Meizi/master/pic/Screenshot_2016-03-08-10-41-20.png)\n\n![3](https://raw.githubusercontent.com/SparkYuan/Meizi/master/pic/Screenshot_2016-03-08-10-36-44.png)\n\n\n\n## 为什么说这是一个特别适合新手练习的小项目？\n\n- 服务器API接口功能丰富且无访问次数限制\n- 包含了常见的网络通信，数据缓存等功能\n- 包含了常见的Gradle用法\n- 多语言适配\n- 自定义了一个ImageView\n- 使用了流行的Realm，Retrofit，Glide，Butterknife等开源项目，方便新手学习他们的使用\n- 遵循Material Design规则\n- ......\n \n\n## 用到的开源技术\n- Butterknife\n- Realm\n- Retrofit\n- Glide\n- ......\n\n## 数据来源\n[http://gank.io](http://gank.io) \n\n## 联系方式\n 博客：\n - Hexo：[http://sparkyuan.me/](http://sparkyuan.me/)\n - CSDN：[http://blog.csdn.net/l664675249](http://blog.csdn.net/l664675249)\n\n\n邮箱：[daniellee0929@gmail.com](daniellee0929@gmail.com)\n\n## License\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n\tUnless required by applicable law or agreed to in writing, software\n\tdistributed under the License is distributed on an \"AS IS\" BASIS,\n\tWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\tSee the License for the specific language governing permissions and\n\tlimitations under the License.\n\n","source":"_posts/Meizi.md","raw":"title: 每日一妹子\ndate: 2016/3/11 20:46:25\ncategories:\n- Android\ntags:\n- Android\ntop: 10\n---\n\n# Meizi\nGithub：[https://github.com/SparkYuan/Meizi](https://github.com/SparkYuan/Meizi)\n\n刚开始学习Android的时候，主要就是学习了一些Activity的生命周期，各种View和Layout的使用，SQLite等零散的知识点，这些东西市面上任何一本Android的入门书籍都会覆盖，但是学习完这些之后就有些迷茫了，不知道下一步该学一些什么？如果你也正好处于这个状态不妨看看这个开源项目。\n自己走过一些弯路，所以写了一个这样的App，希望可以对学习Android的新手有些帮助。\n<!-- more -->\n\n一个特别适合新手练习的Android小项目——每日一妹纸\n\n每天更新一张[@代码家](https://github.com/daimajia)精选妹纸图片，所以叫每日一妹纸，咳咳，不要污，这是一个很绅士的项目（一脸绅士(๑•̀ㅂ•́) ✧）\n\n第一版目前已完成，本项目会持续更新，遇到任何问题欢迎与我联系^_^\n## 部分示例\n\n![示例](https://github.com/SparkYuan/Meizi/raw/master/pic/meizi.gif)\n\n![首页](https://raw.githubusercontent.com/SparkYuan/Meizi/master/pic/Screenshot_2016-03-08-10-37-45.png)\n\n![1](https://raw.githubusercontent.com/SparkYuan/Meizi/master/pic/Screenshot_2016-03-08-10-37-48.png)\n\n![2](https://raw.githubusercontent.com/SparkYuan/Meizi/master/pic/Screenshot_2016-03-08-10-41-20.png)\n\n![3](https://raw.githubusercontent.com/SparkYuan/Meizi/master/pic/Screenshot_2016-03-08-10-36-44.png)\n\n\n\n## 为什么说这是一个特别适合新手练习的小项目？\n\n- 服务器API接口功能丰富且无访问次数限制\n- 包含了常见的网络通信，数据缓存等功能\n- 包含了常见的Gradle用法\n- 多语言适配\n- 自定义了一个ImageView\n- 使用了流行的Realm，Retrofit，Glide，Butterknife等开源项目，方便新手学习他们的使用\n- 遵循Material Design规则\n- ......\n \n\n## 用到的开源技术\n- Butterknife\n- Realm\n- Retrofit\n- Glide\n- ......\n\n## 数据来源\n[http://gank.io](http://gank.io) \n\n## 联系方式\n 博客：\n - Hexo：[http://sparkyuan.me/](http://sparkyuan.me/)\n - CSDN：[http://blog.csdn.net/l664675249](http://blog.csdn.net/l664675249)\n\n\n邮箱：[daniellee0929@gmail.com](daniellee0929@gmail.com)\n\n## License\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n\tUnless required by applicable law or agreed to in writing, software\n\tdistributed under the License is distributed on an \"AS IS\" BASIS,\n\tWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\tSee the License for the specific language governing permissions and\n\tlimitations under the License.\n\n","slug":"Meizi","published":1,"updated":"2016-12-28T12:14:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix8xu70p000fwwv6syzcpdpj","content":"<h1 id=\"Meizi\"><a href=\"#Meizi\" class=\"headerlink\" title=\"Meizi\"></a>Meizi</h1><p>Github：<a href=\"https://github.com/SparkYuan/Meizi\" target=\"_blank\" rel=\"external\">https://github.com/SparkYuan/Meizi</a></p>\n<p>刚开始学习Android的时候，主要就是学习了一些Activity的生命周期，各种View和Layout的使用，SQLite等零散的知识点，这些东西市面上任何一本Android的入门书籍都会覆盖，但是学习完这些之后就有些迷茫了，不知道下一步该学一些什么？如果你也正好处于这个状态不妨看看这个开源项目。<br>自己走过一些弯路，所以写了一个这样的App，希望可以对学习Android的新手有些帮助。<br><a id=\"more\"></a></p>\n<p>一个特别适合新手练习的Android小项目——每日一妹纸</p>\n<p>每天更新一张<a href=\"https://github.com/daimajia\" target=\"_blank\" rel=\"external\">@代码家</a>精选妹纸图片，所以叫每日一妹纸，咳咳，不要污，这是一个很绅士的项目（一脸绅士(๑•̀ㅂ•́) ✧）</p>\n<p>第一版目前已完成，本项目会持续更新，遇到任何问题欢迎与我联系^_^</p>\n<h2 id=\"部分示例\"><a href=\"#部分示例\" class=\"headerlink\" title=\"部分示例\"></a>部分示例</h2><p><img src=\"https://github.com/SparkYuan/Meizi/raw/master/pic/meizi.gif\" alt=\"示例\"></p>\n<p><img src=\"https://raw.githubusercontent.com/SparkYuan/Meizi/master/pic/Screenshot_2016-03-08-10-37-45.png\" alt=\"首页\"></p>\n<p><img src=\"https://raw.githubusercontent.com/SparkYuan/Meizi/master/pic/Screenshot_2016-03-08-10-37-48.png\" alt=\"1\"></p>\n<p><img src=\"https://raw.githubusercontent.com/SparkYuan/Meizi/master/pic/Screenshot_2016-03-08-10-41-20.png\" alt=\"2\"></p>\n<p><img src=\"https://raw.githubusercontent.com/SparkYuan/Meizi/master/pic/Screenshot_2016-03-08-10-36-44.png\" alt=\"3\"></p>\n<h2 id=\"为什么说这是一个特别适合新手练习的小项目？\"><a href=\"#为什么说这是一个特别适合新手练习的小项目？\" class=\"headerlink\" title=\"为什么说这是一个特别适合新手练习的小项目？\"></a>为什么说这是一个特别适合新手练习的小项目？</h2><ul>\n<li>服务器API接口功能丰富且无访问次数限制</li>\n<li>包含了常见的网络通信，数据缓存等功能</li>\n<li>包含了常见的Gradle用法</li>\n<li>多语言适配</li>\n<li>自定义了一个ImageView</li>\n<li>使用了流行的Realm，Retrofit，Glide，Butterknife等开源项目，方便新手学习他们的使用</li>\n<li>遵循Material Design规则</li>\n<li>……</li>\n</ul>\n<h2 id=\"用到的开源技术\"><a href=\"#用到的开源技术\" class=\"headerlink\" title=\"用到的开源技术\"></a>用到的开源技术</h2><ul>\n<li>Butterknife</li>\n<li>Realm</li>\n<li>Retrofit</li>\n<li>Glide</li>\n<li>……</li>\n</ul>\n<h2 id=\"数据来源\"><a href=\"#数据来源\" class=\"headerlink\" title=\"数据来源\"></a>数据来源</h2><p><a href=\"http://gank.io\" target=\"_blank\" rel=\"external\">http://gank.io</a> </p>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><p> 博客：</p>\n<ul>\n<li>Hexo：<a href=\"http://sparkyuan.me/\" target=\"_blank\" rel=\"external\">http://sparkyuan.me/</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/l664675249\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/l664675249</a></li>\n</ul>\n<p>邮箱：<a href=\"daniellee0929@gmail.com\">daniellee0929@gmail.com</a></p>\n<h2 id=\"License\"><a href=\"#License\" class=\"headerlink\" title=\"License\"></a>License</h2><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an &quot;AS IS&quot; BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>","excerpt":"<h1 id=\"Meizi\"><a href=\"#Meizi\" class=\"headerlink\" title=\"Meizi\"></a>Meizi</h1><p>Github：<a href=\"https://github.com/SparkYuan/Meizi\">https://github.com/SparkYuan/Meizi</a></p>\n<p>刚开始学习Android的时候，主要就是学习了一些Activity的生命周期，各种View和Layout的使用，SQLite等零散的知识点，这些东西市面上任何一本Android的入门书籍都会覆盖，但是学习完这些之后就有些迷茫了，不知道下一步该学一些什么？如果你也正好处于这个状态不妨看看这个开源项目。<br>自己走过一些弯路，所以写了一个这样的App，希望可以对学习Android的新手有些帮助。<br>","more":"</p>\n<p>一个特别适合新手练习的Android小项目——每日一妹纸</p>\n<p>每天更新一张<a href=\"https://github.com/daimajia\">@代码家</a>精选妹纸图片，所以叫每日一妹纸，咳咳，不要污，这是一个很绅士的项目（一脸绅士(๑•̀ㅂ•́) ✧）</p>\n<p>第一版目前已完成，本项目会持续更新，遇到任何问题欢迎与我联系^_^</p>\n<h2 id=\"部分示例\"><a href=\"#部分示例\" class=\"headerlink\" title=\"部分示例\"></a>部分示例</h2><p><img src=\"https://github.com/SparkYuan/Meizi/raw/master/pic/meizi.gif\" alt=\"示例\"></p>\n<p><img src=\"https://raw.githubusercontent.com/SparkYuan/Meizi/master/pic/Screenshot_2016-03-08-10-37-45.png\" alt=\"首页\"></p>\n<p><img src=\"https://raw.githubusercontent.com/SparkYuan/Meizi/master/pic/Screenshot_2016-03-08-10-37-48.png\" alt=\"1\"></p>\n<p><img src=\"https://raw.githubusercontent.com/SparkYuan/Meizi/master/pic/Screenshot_2016-03-08-10-41-20.png\" alt=\"2\"></p>\n<p><img src=\"https://raw.githubusercontent.com/SparkYuan/Meizi/master/pic/Screenshot_2016-03-08-10-36-44.png\" alt=\"3\"></p>\n<h2 id=\"为什么说这是一个特别适合新手练习的小项目？\"><a href=\"#为什么说这是一个特别适合新手练习的小项目？\" class=\"headerlink\" title=\"为什么说这是一个特别适合新手练习的小项目？\"></a>为什么说这是一个特别适合新手练习的小项目？</h2><ul>\n<li>服务器API接口功能丰富且无访问次数限制</li>\n<li>包含了常见的网络通信，数据缓存等功能</li>\n<li>包含了常见的Gradle用法</li>\n<li>多语言适配</li>\n<li>自定义了一个ImageView</li>\n<li>使用了流行的Realm，Retrofit，Glide，Butterknife等开源项目，方便新手学习他们的使用</li>\n<li>遵循Material Design规则</li>\n<li>……</li>\n</ul>\n<h2 id=\"用到的开源技术\"><a href=\"#用到的开源技术\" class=\"headerlink\" title=\"用到的开源技术\"></a>用到的开源技术</h2><ul>\n<li>Butterknife</li>\n<li>Realm</li>\n<li>Retrofit</li>\n<li>Glide</li>\n<li>……</li>\n</ul>\n<h2 id=\"数据来源\"><a href=\"#数据来源\" class=\"headerlink\" title=\"数据来源\"></a>数据来源</h2><p><a href=\"http://gank.io\">http://gank.io</a> </p>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><p> 博客：</p>\n<ul>\n<li>Hexo：<a href=\"http://sparkyuan.me/\">http://sparkyuan.me/</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/l664675249\">http://blog.csdn.net/l664675249</a></li>\n</ul>\n<p>邮箱：<a href=\"daniellee0929@gmail.com\">daniellee0929@gmail.com</a></p>\n<h2 id=\"License\"><a href=\"#License\" class=\"headerlink\" title=\"License\"></a>License</h2><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an &quot;AS IS&quot; BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"title":"SubmitButton动效按钮","date":"2016-07-20T13:33:15.000Z","top":9,"_content":"\n# SubmitButton\nA practical, cool and elegant Submit Button\n\nGithub：[https://github.com/SparkYuan/SubmitButton](https://github.com/SparkYuan/SubmitButton)\n<!-- more -->\n\n## Demo\n![Demo](https://github.com/SparkYuan/SubmitButton/blob/master/pic/submitbutton.gif)\n\n## Attributes\n\n```xml\n <com.spark.submitbutton.SubmitButton\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:text=\"Submit\"\n        android:textColor=\"@color/gray\"\n        app:sub_btn_background=\"@color/white\"\n        app:sub_btn_duration=\"3000\"\n        app:sub_btn_line_color=\"@color/green\"\n        app:sub_btn_ripple_color=\"@color/green\"\n        app:sub_btn_tick_color=\"@color/white\" />\n\n```\n### Notice\n- SubmitButton is a subclass of TextView, so almost all attributes of TextView can be used for SubmitButton.\n- The width and height of this SubmitButton is measured by the text size and its **layout_width ** and **layout_height** must be **match_parent**.\n- The default gravity of the text in this SubmitButton is **center** and can not be changed.\n\n\n## Download\n\nStep 1. Configure your project-level build.gradle to include the follow repository:\n\n```gradle\nrepositories {\n    maven {\n        url 'https://dl.bintray.com/spark/maven'\n    }\n}\n```\n\nStep 2. Add the dependency:\n\n```gradle\ndependencies {\n  compile 'me.spark:submitbutton:1.0.1'\n}\n```\n\n\n## License\n\n    The MIT License (MIT)\n\n    Copyright (c) 2016 Spark\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n","source":"_posts/SubmitButton动效按钮.md","raw":"title: SubmitButton动效按钮\ndate: 2016/7/20 21:33:15\ncategories:\n- Android\ntags:\n- Android\ntop: 9\n---\n\n# SubmitButton\nA practical, cool and elegant Submit Button\n\nGithub：[https://github.com/SparkYuan/SubmitButton](https://github.com/SparkYuan/SubmitButton)\n<!-- more -->\n\n## Demo\n![Demo](https://github.com/SparkYuan/SubmitButton/blob/master/pic/submitbutton.gif)\n\n## Attributes\n\n```xml\n <com.spark.submitbutton.SubmitButton\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:text=\"Submit\"\n        android:textColor=\"@color/gray\"\n        app:sub_btn_background=\"@color/white\"\n        app:sub_btn_duration=\"3000\"\n        app:sub_btn_line_color=\"@color/green\"\n        app:sub_btn_ripple_color=\"@color/green\"\n        app:sub_btn_tick_color=\"@color/white\" />\n\n```\n### Notice\n- SubmitButton is a subclass of TextView, so almost all attributes of TextView can be used for SubmitButton.\n- The width and height of this SubmitButton is measured by the text size and its **layout_width ** and **layout_height** must be **match_parent**.\n- The default gravity of the text in this SubmitButton is **center** and can not be changed.\n\n\n## Download\n\nStep 1. Configure your project-level build.gradle to include the follow repository:\n\n```gradle\nrepositories {\n    maven {\n        url 'https://dl.bintray.com/spark/maven'\n    }\n}\n```\n\nStep 2. Add the dependency:\n\n```gradle\ndependencies {\n  compile 'me.spark:submitbutton:1.0.1'\n}\n```\n\n\n## License\n\n    The MIT License (MIT)\n\n    Copyright (c) 2016 Spark\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all\n    copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n    SOFTWARE.\n","slug":"SubmitButton动效按钮","published":1,"updated":"2016-12-28T12:14:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix8xu70r000hwwv6gwd433jh","content":"<h1 id=\"SubmitButton\"><a href=\"#SubmitButton\" class=\"headerlink\" title=\"SubmitButton\"></a>SubmitButton</h1><p>A practical, cool and elegant Submit Button</p>\n<p>Github：<a href=\"https://github.com/SparkYuan/SubmitButton\" target=\"_blank\" rel=\"external\">https://github.com/SparkYuan/SubmitButton</a><br><a id=\"more\"></a></p>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p><img src=\"https://github.com/SparkYuan/SubmitButton/blob/master/pic/submitbutton.gif\" alt=\"Demo\"></p>\n<h2 id=\"Attributes\"><a href=\"#Attributes\" class=\"headerlink\" title=\"Attributes\"></a>Attributes</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">com.spark.submitbutton.SubmitButton</span></span></div><div class=\"line\">       <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">       <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">       <span class=\"attr\">android:text</span>=<span class=\"string\">\"Submit\"</span></div><div class=\"line\">       <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"@color/gray\"</span></div><div class=\"line\">       <span class=\"attr\">app:sub_btn_background</span>=<span class=\"string\">\"@color/white\"</span></div><div class=\"line\">       <span class=\"attr\">app:sub_btn_duration</span>=<span class=\"string\">\"3000\"</span></div><div class=\"line\">       <span class=\"attr\">app:sub_btn_line_color</span>=<span class=\"string\">\"@color/green\"</span></div><div class=\"line\">       <span class=\"attr\">app:sub_btn_ripple_color</span>=<span class=\"string\">\"@color/green\"</span></div><div class=\"line\">       <span class=\"attr\">app:sub_btn_tick_color</span>=<span class=\"string\">\"@color/white\"</span> /&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"Notice\"><a href=\"#Notice\" class=\"headerlink\" title=\"Notice\"></a>Notice</h3><ul>\n<li>SubmitButton is a subclass of TextView, so almost all attributes of TextView can be used for SubmitButton.</li>\n<li>The width and height of this SubmitButton is measured by the text size and its <strong>layout_width </strong> and <strong>layout_height</strong> must be <strong>match_parent</strong>.</li>\n<li>The default gravity of the text in this SubmitButton is <strong>center</strong> and can not be changed.</li>\n</ul>\n<h2 id=\"Download\"><a href=\"#Download\" class=\"headerlink\" title=\"Download\"></a>Download</h2><p>Step 1. Configure your project-level build.gradle to include the follow repository:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">repositories</span> &#123;</div><div class=\"line\">    maven &#123;</div><div class=\"line\">        url <span class=\"string\">'https://dl.bintray.com/spark/maven'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Step 2. Add the dependency:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">compile</span> <span class=\"string\">'me.spark:submitbutton:1.0.1'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"License\"><a href=\"#License\" class=\"headerlink\" title=\"License\"></a>License</h2><pre><code>The MIT License (MIT)\n\nCopyright (c) 2016 Spark\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the &quot;Software&quot;), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>","excerpt":"<h1 id=\"SubmitButton\"><a href=\"#SubmitButton\" class=\"headerlink\" title=\"SubmitButton\"></a>SubmitButton</h1><p>A practical, cool and elegant Submit Button</p>\n<p>Github：<a href=\"https://github.com/SparkYuan/SubmitButton\">https://github.com/SparkYuan/SubmitButton</a><br>","more":"</p>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><p><img src=\"https://github.com/SparkYuan/SubmitButton/blob/master/pic/submitbutton.gif\" alt=\"Demo\"></p>\n<h2 id=\"Attributes\"><a href=\"#Attributes\" class=\"headerlink\" title=\"Attributes\"></a>Attributes</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">com.spark.submitbutton.SubmitButton</span></div><div class=\"line\">       <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">       <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">       <span class=\"attr\">android:text</span>=<span class=\"string\">\"Submit\"</span></div><div class=\"line\">       <span class=\"attr\">android:textColor</span>=<span class=\"string\">\"@color/gray\"</span></div><div class=\"line\">       <span class=\"attr\">app:sub_btn_background</span>=<span class=\"string\">\"@color/white\"</span></div><div class=\"line\">       <span class=\"attr\">app:sub_btn_duration</span>=<span class=\"string\">\"3000\"</span></div><div class=\"line\">       <span class=\"attr\">app:sub_btn_line_color</span>=<span class=\"string\">\"@color/green\"</span></div><div class=\"line\">       <span class=\"attr\">app:sub_btn_ripple_color</span>=<span class=\"string\">\"@color/green\"</span></div><div class=\"line\">       <span class=\"attr\">app:sub_btn_tick_color</span>=<span class=\"string\">\"@color/white\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n<h3 id=\"Notice\"><a href=\"#Notice\" class=\"headerlink\" title=\"Notice\"></a>Notice</h3><ul>\n<li>SubmitButton is a subclass of TextView, so almost all attributes of TextView can be used for SubmitButton.</li>\n<li>The width and height of this SubmitButton is measured by the text size and its <strong>layout_width </strong> and <strong>layout_height</strong> must be <strong>match_parent</strong>.</li>\n<li>The default gravity of the text in this SubmitButton is <strong>center</strong> and can not be changed.</li>\n</ul>\n<h2 id=\"Download\"><a href=\"#Download\" class=\"headerlink\" title=\"Download\"></a>Download</h2><p>Step 1. Configure your project-level build.gradle to include the follow repository:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">repositories</span> &#123;</div><div class=\"line\">    maven &#123;</div><div class=\"line\">        url <span class=\"string\">'https://dl.bintray.com/spark/maven'</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Step 2. Add the dependency:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</div><div class=\"line\">  <span class=\"keyword\">compile</span> <span class=\"string\">'me.spark:submitbutton:1.0.1'</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"License\"><a href=\"#License\" class=\"headerlink\" title=\"License\"></a>License</h2><pre><code>The MIT License (MIT)\n\nCopyright (c) 2016 Spark\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the &quot;Software&quot;), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"title":"View的弹性滑动","date":"2016-03-11T12:46:25.000Z","_content":"相信开发Android的人都会有这种体会：从网上下载的demo运行的好好的，但是只要出现了滑动冲突，Demo就无法正常工作了。但是不用担心，解决滑动冲突有固定的模式，常见的有内部拦截和外部拦截两种，只要按照这个模式来就可以顺利解决。\n<!-- more -->\n# 介绍\n相信开发Android的人都会有这种体会：从网上下载的demo运行的好好的，但是只要出现了滑动冲突，Demo就无法正常工作了。但是不用担心，解决滑动冲突有固定的模式，常见的有内部拦截和外部拦截两种，只要按照这个模式来就可以顺利解决。本文会涉及到View事件分发的相关知识，关于事件分发请参考[http://sparkyuan.me/2016/03/11/View%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/](http://sparkyuan.me/2016/03/11/View%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/)\n\n# 常见的滑动冲突场景\n![常见场景](http://img.blog.csdn.net/20160229164733489)\n\n\n# 示例\n![示例](http://img.blog.csdn.net/20160229164638864)\n\n# 处理规则\n对于场景1，处理规则为：当用户左右滑动时，让外部的View拦截点击事件，当用户上下滑动时，让内部的View拦截点击事件。当产生滑动时，根据滑动的起始点与终点坐标位置，如果垂直方向滑动距离大，就判断为垂直滑动，否则判断为水平滑动。其他两种情况处理方法相似，**都是从业务需求上得出相应的规则。**\n\n# 解决方法\n## 外部拦截发\n所有的点击事件都先经过父容器拦截处理，如果父容器需要拦截就拦截，不需要就传给内部的View。伪代码如下\n```java\n  public boolean onInterceptTouchEvent(MotionEvent event) {\n        boolean intercepted = false;\n\n        switch (event.getAction()) {\n            case MotionEvent.ACTION_DOWN: {\n            \tintercepted = false;\n                break;\n            }\n            case MotionEvent.ACTION_MOVE: {\n                if (满足父容器的拦截要求) {\n                    intercepted = true;\n                } else {\n                    intercepted = false;\n                }\n                break;\n            }\n            case MotionEvent.ACTION_UP: {\n                intercepted = false;\n                break;\n            }\n            default:\n                break;\n        }\n        mLastXIntercept = x;\n        mLastYIntercept = y;\n        return intercepted;\n    }\n```\n\n**注：**\nACTION_DOWN这个事件是不能拦截的，因为一旦拦截后续的事件都会由父容器处理了。\n\n## 内部拦截法\n父容器不拦截任何事件，所有事件都传给子元素。如果子元素需要此事件就直接消耗，否则就交给父容器进行处理。完成这个功能需要配合requestDisallowInterceptTouchEvent()方法才可。这个方法表示是否让父容器拦截事件。伪代码如下：\n\n```java\n public boolean dispatchTouchEvent(MotionEvent event) {\n        int x = (int) event.getX();\n        int y = (int) event.getY();\n\n        switch (event.getAction()) {\n        case MotionEvent.ACTION_DOWN: {\n            parent.requestDisallowInterceptTouchEvent(true);\n            break;\n        }\n        case MotionEvent.ACTION_MOVE: {\n            if (满足父容器的拦截要求) {\n                parent.requestDisallowInterceptTouchEvent(false);\n            }\n            break;\n        }\n        case MotionEvent.ACTION_UP: {\n            break;\n        }\n        default:\n            break;\n        }\n        mLastX = x;\n        mLastY = y;\n        return super.dispatchTouchEvent(event);\n    }\n```\n\n\n**注**\n父容器默认拦截除了ACTION_DOWN以外的其他事件，这样子当元素调用parent.requestDisallowInterceptTouchEvent(false)时，父元素才能拦截所需的事件。\n\n# 总结\n\n- 解决滑动冲突有两种方法，推荐外部拦截法，实现起来简单。\n- 本文以场景1为例做了讲解，场景2,3的做法与1类似，都是根据业务需要制定处理规则。\n\n\n# 示例效果的源码\n## Activity\n```java\npublic class DemoActivity_1 extends Activity {\n    private static final String TAG = \"DemoActivity_1\";\n\n    private HorizontalScrollViewEx mListContainer;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.demo_1);\n        Log.d(TAG, \"onCreate\");\n        initView();\n    }\n\n    private void initView() {\n        LayoutInflater inflater = getLayoutInflater();\n        mListContainer = (HorizontalScrollViewEx) findViewById(R.id.container);\n        final int screenWidth = MyUtils.getScreenMetrics(this).widthPixels;\n        final int screenHeight = MyUtils.getScreenMetrics(this).heightPixels;\n        for (int i = 0; i < 3; i++) {\n            ViewGroup layout = (ViewGroup) inflater.inflate(\n                    R.layout.content_layout, mListContainer, false);\n            layout.getLayoutParams().width = screenWidth;\n            TextView textView = (TextView) layout.findViewById(R.id.title);\n            textView.setText(\"page \" + (i + 1));\n            layout.setBackgroundColor(Color.rgb(255 / (i + 1), 255 / (i + 1), 0));\n            createList(layout);\n            mListContainer.addView(layout);\n        }\n    }\n\n    private void createList(ViewGroup layout) {\n        ListView listView = (ListView) layout.findViewById(R.id.list);\n        ArrayList<String> datas = new ArrayList<String>();\n        for (int i = 0; i < 50; i++) {\n            datas.add(\"name \" + i);\n        }\n\n        ArrayAdapter<String> adapter = new ArrayAdapter<String>(this,\n                R.layout.content_list_item, R.id.name, datas);\n        listView.setAdapter(adapter);\n        listView.setOnItemClickListener(new OnItemClickListener() {\n            @Override\n            public void onItemClick(AdapterView<?> parent, View view,\n                    int position, long id) {\n                Toast.makeText(DemoActivity_1.this, \"click item\",\n                        Toast.LENGTH_SHORT).show();\n\n            }\n        });\n    }\n}\n```\n## 水平滑动的View\n```java\npublic class HorizontalScrollViewEx extends ViewGroup {\n    private static final String TAG = \"HorizontalScrollViewEx\";\n\n    private int mChildrenSize;\n    private int mChildWidth;\n    private int mChildIndex;\n\n    // 分别记录上次滑动的坐标\n    private int mLastX = 0;\n    private int mLastY = 0;\n    // 分别记录上次滑动的坐标(onInterceptTouchEvent)\n    private int mLastXIntercept = 0;\n    private int mLastYIntercept = 0;\n\n    private Scroller mScroller;\n    private VelocityTracker mVelocityTracker;\n\n    public HorizontalScrollViewEx(Context context) {\n        super(context);\n        init();\n    }\n\n    public HorizontalScrollViewEx(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        init();\n    }\n\n    public HorizontalScrollViewEx(Context context, AttributeSet attrs,\n                                  int defStyle) {\n        super(context, attrs, defStyle);\n        init();\n    }\n\n    private void init() {\n        mScroller = new Scroller(getContext());\n        mVelocityTracker = VelocityTracker.obtain();\n    }\n\n    @Override\n    public boolean onInterceptTouchEvent(MotionEvent event) {\n        boolean intercepted = false;\n        int x = (int) event.getX();\n        int y = (int) event.getY();\n\n        switch (event.getAction()) {\n            case MotionEvent.ACTION_DOWN: {\n                Log.d(TAG, \"onInterceptTouchEvent: ACTION_DOWN\");\n                intercepted = false;\n                if (!mScroller.isFinished()) {\n                    mScroller.abortAnimation();\n                    intercepted = true;\n                }\n                break;\n            }\n            case MotionEvent.ACTION_MOVE: {\n                Log.d(TAG, \"onInterceptTouchEvent: ACTION_MOVE\");\n                int deltaX = x - mLastXIntercept;\n                int deltaY = y - mLastYIntercept;\n                if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                    intercepted = true;\n                } else {\n                    intercepted = false;\n                }\n                break;\n            }\n            case MotionEvent.ACTION_UP: {\n                intercepted = false;\n                break;\n            }\n            default:\n                break;\n        }\n\n        Log.d(TAG, \"intercepted=\" + intercepted);\n        mLastX = x;\n        mLastY = y;\n        mLastXIntercept = x;\n        mLastYIntercept = y;\n\n        return intercepted;\n    }\n\n    @Override\n    public boolean onTouchEvent(MotionEvent event) {\n        mVelocityTracker.addMovement(event);\n        int x = (int) event.getX();\n        int y = (int) event.getY();\n        switch (event.getAction()) {\n            case MotionEvent.ACTION_DOWN: {\n                Log.d(TAG, \"onTouchEvent: ACTION_DOWN\");\n                if (!mScroller.isFinished()) {\n                    mScroller.abortAnimation();\n                }\n                break;\n            }\n            case MotionEvent.ACTION_MOVE: {\n                Log.d(TAG, \"onTouchEvent: ACTION_MOVE\");\n                int deltaX = x - mLastX;\n                int deltaY = y - mLastY;\n                Log.d(TAG, \"onTouchEvent: deltaX\" + deltaX);\n                scrollBy(-deltaX, 0);\n                break;\n            }\n            case MotionEvent.ACTION_UP: {\n\n                int scrollX = getScrollX();\n                int scrollToChildIndex = scrollX / mChildWidth;\n                mVelocityTracker.computeCurrentVelocity(1000);\n                float xVelocity = mVelocityTracker.getXVelocity();\n\n                //滑的速度到达阈值就认为需要进入下一页\n                if (Math.abs(xVelocity) >= 100) {\n                    mChildIndex = xVelocity > 0 ? mChildIndex - 1 : mChildIndex + 1;\n                } else {\n                    //滑动的距离超过一半，就进入下一页\n                    mChildIndex = (scrollX + mChildWidth / 2) / mChildWidth;\n                }\n                //保证在0页和最后一页滑动时不会越界\n                mChildIndex = Math.max(0, Math.min(mChildIndex, mChildrenSize - 1));\n                //没有达到进入下一页的要求，恢复原样\n                int dx = mChildIndex * mChildWidth - scrollX;\n                smoothScrollBy(dx, 0);\n                Log.d(TAG, \"onTouchEvent: dx = \" + dx);\n                mVelocityTracker.clear();\n                break;\n            }\n            default:\n                break;\n        }\n\n        mLastX = x;\n        mLastY = y;\n        return true;\n    }\n\n    @Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n        int measuredWidth = 0;\n        int measuredHeight = 0;\n        final int childCount = getChildCount();\n        measureChildren(widthMeasureSpec, heightMeasureSpec);\n\n        int widthSpaceSize = MeasureSpec.getSize(widthMeasureSpec);\n        int widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);\n        int heightSpaceSize = MeasureSpec.getSize(heightMeasureSpec);\n        int heightSpecMode = MeasureSpec.getMode(heightMeasureSpec);\n        if (childCount == 0) {\n            setMeasuredDimension(0, 0);\n        } else if (heightSpecMode == MeasureSpec.AT_MOST) {\n            final View childView = getChildAt(0);\n            measuredHeight = childView.getMeasuredHeight();\n            setMeasuredDimension(widthSpaceSize, childView.getMeasuredHeight());\n        } else if (widthSpecMode == MeasureSpec.AT_MOST) {\n            final View childView = getChildAt(0);\n            measuredWidth = childView.getMeasuredWidth() * childCount;\n            setMeasuredDimension(measuredWidth, heightSpaceSize);\n        } else {\n            final View childView = getChildAt(0);\n            measuredWidth = childView.getMeasuredWidth() * childCount;\n            measuredHeight = childView.getMeasuredHeight();\n            setMeasuredDimension(measuredWidth, measuredHeight);\n        }\n    }\n\n    @Override\n    protected void onLayout(boolean changed, int l, int t, int r, int b) {\n        int childLeft = 0;\n        final int childCount = getChildCount();\n        mChildrenSize = childCount;\n\n        for (int i = 0; i < childCount; i++) {\n            final View childView = getChildAt(i);\n            if (childView.getVisibility() != View.GONE) {\n                final int childWidth = childView.getMeasuredWidth();\n                mChildWidth = childWidth;\n                childView.layout(childLeft, 0, childLeft + childWidth,\n                        childView.getMeasuredHeight());\n                childLeft += childWidth;\n            }\n        }\n    }\n\n    private void smoothScrollBy(int dx, int dy) {\n        mScroller.startScroll(getScrollX(), 0, dx, 0, 500);\n        invalidate();\n    }\n\n    @Override\n    public void computeScroll() {\n        if (mScroller.computeScrollOffset()) {\n            scrollTo(mScroller.getCurrX(), mScroller.getCurrY());\n            postInvalidate();\n        }\n    }\n\n    @Override\n    protected void onDetachedFromWindow() {\n        mVelocityTracker.recycle();\n        super.onDetachedFromWindow();\n    }\n}\n```\n","source":"_posts/View的弹性滑动.md","raw":"title: View的弹性滑动\ndate: 2016/3/11 20:46:25\ncategories:\n- Android\n- Android开发艺术探索笔记\ntags:\n- Android\n- View\n- 弹性滑动\n---\n相信开发Android的人都会有这种体会：从网上下载的demo运行的好好的，但是只要出现了滑动冲突，Demo就无法正常工作了。但是不用担心，解决滑动冲突有固定的模式，常见的有内部拦截和外部拦截两种，只要按照这个模式来就可以顺利解决。\n<!-- more -->\n# 介绍\n相信开发Android的人都会有这种体会：从网上下载的demo运行的好好的，但是只要出现了滑动冲突，Demo就无法正常工作了。但是不用担心，解决滑动冲突有固定的模式，常见的有内部拦截和外部拦截两种，只要按照这个模式来就可以顺利解决。本文会涉及到View事件分发的相关知识，关于事件分发请参考[http://sparkyuan.me/2016/03/11/View%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/](http://sparkyuan.me/2016/03/11/View%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/)\n\n# 常见的滑动冲突场景\n![常见场景](http://img.blog.csdn.net/20160229164733489)\n\n\n# 示例\n![示例](http://img.blog.csdn.net/20160229164638864)\n\n# 处理规则\n对于场景1，处理规则为：当用户左右滑动时，让外部的View拦截点击事件，当用户上下滑动时，让内部的View拦截点击事件。当产生滑动时，根据滑动的起始点与终点坐标位置，如果垂直方向滑动距离大，就判断为垂直滑动，否则判断为水平滑动。其他两种情况处理方法相似，**都是从业务需求上得出相应的规则。**\n\n# 解决方法\n## 外部拦截发\n所有的点击事件都先经过父容器拦截处理，如果父容器需要拦截就拦截，不需要就传给内部的View。伪代码如下\n```java\n  public boolean onInterceptTouchEvent(MotionEvent event) {\n        boolean intercepted = false;\n\n        switch (event.getAction()) {\n            case MotionEvent.ACTION_DOWN: {\n            \tintercepted = false;\n                break;\n            }\n            case MotionEvent.ACTION_MOVE: {\n                if (满足父容器的拦截要求) {\n                    intercepted = true;\n                } else {\n                    intercepted = false;\n                }\n                break;\n            }\n            case MotionEvent.ACTION_UP: {\n                intercepted = false;\n                break;\n            }\n            default:\n                break;\n        }\n        mLastXIntercept = x;\n        mLastYIntercept = y;\n        return intercepted;\n    }\n```\n\n**注：**\nACTION_DOWN这个事件是不能拦截的，因为一旦拦截后续的事件都会由父容器处理了。\n\n## 内部拦截法\n父容器不拦截任何事件，所有事件都传给子元素。如果子元素需要此事件就直接消耗，否则就交给父容器进行处理。完成这个功能需要配合requestDisallowInterceptTouchEvent()方法才可。这个方法表示是否让父容器拦截事件。伪代码如下：\n\n```java\n public boolean dispatchTouchEvent(MotionEvent event) {\n        int x = (int) event.getX();\n        int y = (int) event.getY();\n\n        switch (event.getAction()) {\n        case MotionEvent.ACTION_DOWN: {\n            parent.requestDisallowInterceptTouchEvent(true);\n            break;\n        }\n        case MotionEvent.ACTION_MOVE: {\n            if (满足父容器的拦截要求) {\n                parent.requestDisallowInterceptTouchEvent(false);\n            }\n            break;\n        }\n        case MotionEvent.ACTION_UP: {\n            break;\n        }\n        default:\n            break;\n        }\n        mLastX = x;\n        mLastY = y;\n        return super.dispatchTouchEvent(event);\n    }\n```\n\n\n**注**\n父容器默认拦截除了ACTION_DOWN以外的其他事件，这样子当元素调用parent.requestDisallowInterceptTouchEvent(false)时，父元素才能拦截所需的事件。\n\n# 总结\n\n- 解决滑动冲突有两种方法，推荐外部拦截法，实现起来简单。\n- 本文以场景1为例做了讲解，场景2,3的做法与1类似，都是根据业务需要制定处理规则。\n\n\n# 示例效果的源码\n## Activity\n```java\npublic class DemoActivity_1 extends Activity {\n    private static final String TAG = \"DemoActivity_1\";\n\n    private HorizontalScrollViewEx mListContainer;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.demo_1);\n        Log.d(TAG, \"onCreate\");\n        initView();\n    }\n\n    private void initView() {\n        LayoutInflater inflater = getLayoutInflater();\n        mListContainer = (HorizontalScrollViewEx) findViewById(R.id.container);\n        final int screenWidth = MyUtils.getScreenMetrics(this).widthPixels;\n        final int screenHeight = MyUtils.getScreenMetrics(this).heightPixels;\n        for (int i = 0; i < 3; i++) {\n            ViewGroup layout = (ViewGroup) inflater.inflate(\n                    R.layout.content_layout, mListContainer, false);\n            layout.getLayoutParams().width = screenWidth;\n            TextView textView = (TextView) layout.findViewById(R.id.title);\n            textView.setText(\"page \" + (i + 1));\n            layout.setBackgroundColor(Color.rgb(255 / (i + 1), 255 / (i + 1), 0));\n            createList(layout);\n            mListContainer.addView(layout);\n        }\n    }\n\n    private void createList(ViewGroup layout) {\n        ListView listView = (ListView) layout.findViewById(R.id.list);\n        ArrayList<String> datas = new ArrayList<String>();\n        for (int i = 0; i < 50; i++) {\n            datas.add(\"name \" + i);\n        }\n\n        ArrayAdapter<String> adapter = new ArrayAdapter<String>(this,\n                R.layout.content_list_item, R.id.name, datas);\n        listView.setAdapter(adapter);\n        listView.setOnItemClickListener(new OnItemClickListener() {\n            @Override\n            public void onItemClick(AdapterView<?> parent, View view,\n                    int position, long id) {\n                Toast.makeText(DemoActivity_1.this, \"click item\",\n                        Toast.LENGTH_SHORT).show();\n\n            }\n        });\n    }\n}\n```\n## 水平滑动的View\n```java\npublic class HorizontalScrollViewEx extends ViewGroup {\n    private static final String TAG = \"HorizontalScrollViewEx\";\n\n    private int mChildrenSize;\n    private int mChildWidth;\n    private int mChildIndex;\n\n    // 分别记录上次滑动的坐标\n    private int mLastX = 0;\n    private int mLastY = 0;\n    // 分别记录上次滑动的坐标(onInterceptTouchEvent)\n    private int mLastXIntercept = 0;\n    private int mLastYIntercept = 0;\n\n    private Scroller mScroller;\n    private VelocityTracker mVelocityTracker;\n\n    public HorizontalScrollViewEx(Context context) {\n        super(context);\n        init();\n    }\n\n    public HorizontalScrollViewEx(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        init();\n    }\n\n    public HorizontalScrollViewEx(Context context, AttributeSet attrs,\n                                  int defStyle) {\n        super(context, attrs, defStyle);\n        init();\n    }\n\n    private void init() {\n        mScroller = new Scroller(getContext());\n        mVelocityTracker = VelocityTracker.obtain();\n    }\n\n    @Override\n    public boolean onInterceptTouchEvent(MotionEvent event) {\n        boolean intercepted = false;\n        int x = (int) event.getX();\n        int y = (int) event.getY();\n\n        switch (event.getAction()) {\n            case MotionEvent.ACTION_DOWN: {\n                Log.d(TAG, \"onInterceptTouchEvent: ACTION_DOWN\");\n                intercepted = false;\n                if (!mScroller.isFinished()) {\n                    mScroller.abortAnimation();\n                    intercepted = true;\n                }\n                break;\n            }\n            case MotionEvent.ACTION_MOVE: {\n                Log.d(TAG, \"onInterceptTouchEvent: ACTION_MOVE\");\n                int deltaX = x - mLastXIntercept;\n                int deltaY = y - mLastYIntercept;\n                if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                    intercepted = true;\n                } else {\n                    intercepted = false;\n                }\n                break;\n            }\n            case MotionEvent.ACTION_UP: {\n                intercepted = false;\n                break;\n            }\n            default:\n                break;\n        }\n\n        Log.d(TAG, \"intercepted=\" + intercepted);\n        mLastX = x;\n        mLastY = y;\n        mLastXIntercept = x;\n        mLastYIntercept = y;\n\n        return intercepted;\n    }\n\n    @Override\n    public boolean onTouchEvent(MotionEvent event) {\n        mVelocityTracker.addMovement(event);\n        int x = (int) event.getX();\n        int y = (int) event.getY();\n        switch (event.getAction()) {\n            case MotionEvent.ACTION_DOWN: {\n                Log.d(TAG, \"onTouchEvent: ACTION_DOWN\");\n                if (!mScroller.isFinished()) {\n                    mScroller.abortAnimation();\n                }\n                break;\n            }\n            case MotionEvent.ACTION_MOVE: {\n                Log.d(TAG, \"onTouchEvent: ACTION_MOVE\");\n                int deltaX = x - mLastX;\n                int deltaY = y - mLastY;\n                Log.d(TAG, \"onTouchEvent: deltaX\" + deltaX);\n                scrollBy(-deltaX, 0);\n                break;\n            }\n            case MotionEvent.ACTION_UP: {\n\n                int scrollX = getScrollX();\n                int scrollToChildIndex = scrollX / mChildWidth;\n                mVelocityTracker.computeCurrentVelocity(1000);\n                float xVelocity = mVelocityTracker.getXVelocity();\n\n                //滑的速度到达阈值就认为需要进入下一页\n                if (Math.abs(xVelocity) >= 100) {\n                    mChildIndex = xVelocity > 0 ? mChildIndex - 1 : mChildIndex + 1;\n                } else {\n                    //滑动的距离超过一半，就进入下一页\n                    mChildIndex = (scrollX + mChildWidth / 2) / mChildWidth;\n                }\n                //保证在0页和最后一页滑动时不会越界\n                mChildIndex = Math.max(0, Math.min(mChildIndex, mChildrenSize - 1));\n                //没有达到进入下一页的要求，恢复原样\n                int dx = mChildIndex * mChildWidth - scrollX;\n                smoothScrollBy(dx, 0);\n                Log.d(TAG, \"onTouchEvent: dx = \" + dx);\n                mVelocityTracker.clear();\n                break;\n            }\n            default:\n                break;\n        }\n\n        mLastX = x;\n        mLastY = y;\n        return true;\n    }\n\n    @Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n        int measuredWidth = 0;\n        int measuredHeight = 0;\n        final int childCount = getChildCount();\n        measureChildren(widthMeasureSpec, heightMeasureSpec);\n\n        int widthSpaceSize = MeasureSpec.getSize(widthMeasureSpec);\n        int widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);\n        int heightSpaceSize = MeasureSpec.getSize(heightMeasureSpec);\n        int heightSpecMode = MeasureSpec.getMode(heightMeasureSpec);\n        if (childCount == 0) {\n            setMeasuredDimension(0, 0);\n        } else if (heightSpecMode == MeasureSpec.AT_MOST) {\n            final View childView = getChildAt(0);\n            measuredHeight = childView.getMeasuredHeight();\n            setMeasuredDimension(widthSpaceSize, childView.getMeasuredHeight());\n        } else if (widthSpecMode == MeasureSpec.AT_MOST) {\n            final View childView = getChildAt(0);\n            measuredWidth = childView.getMeasuredWidth() * childCount;\n            setMeasuredDimension(measuredWidth, heightSpaceSize);\n        } else {\n            final View childView = getChildAt(0);\n            measuredWidth = childView.getMeasuredWidth() * childCount;\n            measuredHeight = childView.getMeasuredHeight();\n            setMeasuredDimension(measuredWidth, measuredHeight);\n        }\n    }\n\n    @Override\n    protected void onLayout(boolean changed, int l, int t, int r, int b) {\n        int childLeft = 0;\n        final int childCount = getChildCount();\n        mChildrenSize = childCount;\n\n        for (int i = 0; i < childCount; i++) {\n            final View childView = getChildAt(i);\n            if (childView.getVisibility() != View.GONE) {\n                final int childWidth = childView.getMeasuredWidth();\n                mChildWidth = childWidth;\n                childView.layout(childLeft, 0, childLeft + childWidth,\n                        childView.getMeasuredHeight());\n                childLeft += childWidth;\n            }\n        }\n    }\n\n    private void smoothScrollBy(int dx, int dy) {\n        mScroller.startScroll(getScrollX(), 0, dx, 0, 500);\n        invalidate();\n    }\n\n    @Override\n    public void computeScroll() {\n        if (mScroller.computeScrollOffset()) {\n            scrollTo(mScroller.getCurrX(), mScroller.getCurrY());\n            postInvalidate();\n        }\n    }\n\n    @Override\n    protected void onDetachedFromWindow() {\n        mVelocityTracker.recycle();\n        super.onDetachedFromWindow();\n    }\n}\n```\n","slug":"View的弹性滑动","published":1,"updated":"2016-12-28T12:14:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix8xu70u000lwwv6c7ik9ly9","content":"<p>相信开发Android的人都会有这种体会：从网上下载的demo运行的好好的，但是只要出现了滑动冲突，Demo就无法正常工作了。但是不用担心，解决滑动冲突有固定的模式，常见的有内部拦截和外部拦截两种，只要按照这个模式来就可以顺利解决。<br><a id=\"more\"></a></p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>相信开发Android的人都会有这种体会：从网上下载的demo运行的好好的，但是只要出现了滑动冲突，Demo就无法正常工作了。但是不用担心，解决滑动冲突有固定的模式，常见的有内部拦截和外部拦截两种，只要按照这个模式来就可以顺利解决。本文会涉及到View事件分发的相关知识，关于事件分发请参考<a href=\"http://sparkyuan.me/2016/03/11/View%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/\" target=\"_blank\" rel=\"external\">http://sparkyuan.me/2016/03/11/View%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/</a></p>\n<h1 id=\"常见的滑动冲突场景\"><a href=\"#常见的滑动冲突场景\" class=\"headerlink\" title=\"常见的滑动冲突场景\"></a>常见的滑动冲突场景</h1><p><img src=\"http://img.blog.csdn.net/20160229164733489\" alt=\"常见场景\"></p>\n<h1 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h1><p><img src=\"http://img.blog.csdn.net/20160229164638864\" alt=\"示例\"></p>\n<h1 id=\"处理规则\"><a href=\"#处理规则\" class=\"headerlink\" title=\"处理规则\"></a>处理规则</h1><p>对于场景1，处理规则为：当用户左右滑动时，让外部的View拦截点击事件，当用户上下滑动时，让内部的View拦截点击事件。当产生滑动时，根据滑动的起始点与终点坐标位置，如果垂直方向滑动距离大，就判断为垂直滑动，否则判断为水平滑动。其他两种情况处理方法相似，<strong>都是从业务需求上得出相应的规则。</strong></p>\n<h1 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h1><h2 id=\"外部拦截发\"><a href=\"#外部拦截发\" class=\"headerlink\" title=\"外部拦截发\"></a>外部拦截发</h2><p>所有的点击事件都先经过父容器拦截处理，如果父容器需要拦截就拦截，不需要就传给内部的View。伪代码如下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onInterceptTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">boolean</span> intercepted = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">switch</span> (event.getAction()) &#123;</div><div class=\"line\">          <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN: &#123;</div><div class=\"line\">          \tintercepted = <span class=\"keyword\">false</span>;</div><div class=\"line\">              <span class=\"keyword\">break</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE: &#123;</div><div class=\"line\">              <span class=\"keyword\">if</span> (满足父容器的拦截要求) &#123;</div><div class=\"line\">                  intercepted = <span class=\"keyword\">true</span>;</div><div class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                  intercepted = <span class=\"keyword\">false</span>;</div><div class=\"line\">              &#125;</div><div class=\"line\">              <span class=\"keyword\">break</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">case</span> MotionEvent.ACTION_UP: &#123;</div><div class=\"line\">              intercepted = <span class=\"keyword\">false</span>;</div><div class=\"line\">              <span class=\"keyword\">break</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">default</span>:</div><div class=\"line\">              <span class=\"keyword\">break</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      mLastXIntercept = x;</div><div class=\"line\">      mLastYIntercept = y;</div><div class=\"line\">      <span class=\"keyword\">return</span> intercepted;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p><strong>注：</strong><br>ACTION_DOWN这个事件是不能拦截的，因为一旦拦截后续的事件都会由父容器处理了。</p>\n<h2 id=\"内部拦截法\"><a href=\"#内部拦截法\" class=\"headerlink\" title=\"内部拦截法\"></a>内部拦截法</h2><p>父容器不拦截任何事件，所有事件都传给子元素。如果子元素需要此事件就直接消耗，否则就交给父容器进行处理。完成这个功能需要配合requestDisallowInterceptTouchEvent()方法才可。这个方法表示是否让父容器拦截事件。伪代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">int</span> x = (<span class=\"keyword\">int</span>) event.getX();</div><div class=\"line\">       <span class=\"keyword\">int</span> y = (<span class=\"keyword\">int</span>) event.getY();</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">switch</span> (event.getAction()) &#123;</div><div class=\"line\">       <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN: &#123;</div><div class=\"line\">           parent.requestDisallowInterceptTouchEvent(<span class=\"keyword\">true</span>);</div><div class=\"line\">           <span class=\"keyword\">break</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE: &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (满足父容器的拦截要求) &#123;</div><div class=\"line\">               parent.requestDisallowInterceptTouchEvent(<span class=\"keyword\">false</span>);</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">break</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">case</span> MotionEvent.ACTION_UP: &#123;</div><div class=\"line\">           <span class=\"keyword\">break</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">default</span>:</div><div class=\"line\">           <span class=\"keyword\">break</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       mLastX = x;</div><div class=\"line\">       mLastY = y;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.dispatchTouchEvent(event);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p><strong>注</strong><br>父容器默认拦截除了ACTION_DOWN以外的其他事件，这样子当元素调用parent.requestDisallowInterceptTouchEvent(false)时，父元素才能拦截所需的事件。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ul>\n<li>解决滑动冲突有两种方法，推荐外部拦截法，实现起来简单。</li>\n<li>本文以场景1为例做了讲解，场景2,3的做法与1类似，都是根据业务需要制定处理规则。</li>\n</ul>\n<h1 id=\"示例效果的源码\"><a href=\"#示例效果的源码\" class=\"headerlink\" title=\"示例效果的源码\"></a>示例效果的源码</h1><h2 id=\"Activity\"><a href=\"#Activity\" class=\"headerlink\" title=\"Activity\"></a>Activity</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoActivity_1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"DemoActivity_1\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> HorizontalScrollViewEx mListContainer;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.demo_1);</div><div class=\"line\">        Log.d(TAG, <span class=\"string\">\"onCreate\"</span>);</div><div class=\"line\">        initView();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initView</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        LayoutInflater inflater = getLayoutInflater();</div><div class=\"line\">        mListContainer = (HorizontalScrollViewEx) findViewById(R.id.container);</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> screenWidth = MyUtils.getScreenMetrics(<span class=\"keyword\">this</span>).widthPixels;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> screenHeight = MyUtils.getScreenMetrics(<span class=\"keyword\">this</span>).heightPixels;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</div><div class=\"line\">            ViewGroup layout = (ViewGroup) inflater.inflate(</div><div class=\"line\">                    R.layout.content_layout, mListContainer, <span class=\"keyword\">false</span>);</div><div class=\"line\">            layout.getLayoutParams().width = screenWidth;</div><div class=\"line\">            TextView textView = (TextView) layout.findViewById(R.id.title);</div><div class=\"line\">            textView.setText(<span class=\"string\">\"page \"</span> + (i + <span class=\"number\">1</span>));</div><div class=\"line\">            layout.setBackgroundColor(Color.rgb(<span class=\"number\">255</span> / (i + <span class=\"number\">1</span>), <span class=\"number\">255</span> / (i + <span class=\"number\">1</span>), <span class=\"number\">0</span>));</div><div class=\"line\">            createList(layout);</div><div class=\"line\">            mListContainer.addView(layout);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">createList</span><span class=\"params\">(ViewGroup layout)</span> </span>&#123;</div><div class=\"line\">        ListView listView = (ListView) layout.findViewById(R.id.list);</div><div class=\"line\">        ArrayList&lt;String&gt; datas = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">50</span>; i++) &#123;</div><div class=\"line\">            datas.add(<span class=\"string\">\"name \"</span> + i);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        ArrayAdapter&lt;String&gt; adapter = <span class=\"keyword\">new</span> ArrayAdapter&lt;String&gt;(<span class=\"keyword\">this</span>,</div><div class=\"line\">                R.layout.content_list_item, R.id.name, datas);</div><div class=\"line\">        listView.setAdapter(adapter);</div><div class=\"line\">        listView.setOnItemClickListener(<span class=\"keyword\">new</span> OnItemClickListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onItemClick</span><span class=\"params\">(AdapterView&lt;?&gt; parent, View view,</span></span></div><div class=\"line\">                    <span class=\"keyword\">int</span> position, <span class=\"keyword\">long</span> id) &#123;</div><div class=\"line\">                Toast.makeText(DemoActivity_1.<span class=\"keyword\">this</span>, <span class=\"string\">\"click item\"</span>,</div><div class=\"line\">                        Toast.LENGTH_SHORT).show();</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"水平滑动的View\"><a href=\"#水平滑动的View\" class=\"headerlink\" title=\"水平滑动的View\"></a>水平滑动的View</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HorizontalScrollViewEx</span> <span class=\"keyword\">extends</span> <span class=\"title\">ViewGroup</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"HorizontalScrollViewEx\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mChildrenSize;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mChildWidth;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mChildIndex;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 分别记录上次滑动的坐标</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mLastX = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mLastY = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"comment\">// 分别记录上次滑动的坐标(onInterceptTouchEvent)</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mLastXIntercept = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mLastYIntercept = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Scroller mScroller;</div><div class=\"line\">    <span class=\"keyword\">private</span> VelocityTracker mVelocityTracker;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HorizontalScrollViewEx</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context);</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HorizontalScrollViewEx</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HorizontalScrollViewEx</span><span class=\"params\">(Context context, AttributeSet attrs,</span></span></div><div class=\"line\">                                  <span class=\"keyword\">int</span> defStyle) &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyle);</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mScroller = <span class=\"keyword\">new</span> Scroller(getContext());</div><div class=\"line\">        mVelocityTracker = VelocityTracker.obtain();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onInterceptTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">boolean</span> intercepted = <span class=\"keyword\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> x = (<span class=\"keyword\">int</span>) event.getX();</div><div class=\"line\">        <span class=\"keyword\">int</span> y = (<span class=\"keyword\">int</span>) event.getY();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">switch</span> (event.getAction()) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN: &#123;</div><div class=\"line\">                Log.d(TAG, <span class=\"string\">\"onInterceptTouchEvent: ACTION_DOWN\"</span>);</div><div class=\"line\">                intercepted = <span class=\"keyword\">false</span>;</div><div class=\"line\">                <span class=\"keyword\">if</span> (!mScroller.isFinished()) &#123;</div><div class=\"line\">                    mScroller.abortAnimation();</div><div class=\"line\">                    intercepted = <span class=\"keyword\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE: &#123;</div><div class=\"line\">                Log.d(TAG, <span class=\"string\">\"onInterceptTouchEvent: ACTION_MOVE\"</span>);</div><div class=\"line\">                <span class=\"keyword\">int</span> deltaX = x - mLastXIntercept;</div><div class=\"line\">                <span class=\"keyword\">int</span> deltaY = y - mLastYIntercept;</div><div class=\"line\">                <span class=\"keyword\">if</span> (Math.abs(deltaX) &gt; Math.abs(deltaY)) &#123;</div><div class=\"line\">                    intercepted = <span class=\"keyword\">true</span>;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    intercepted = <span class=\"keyword\">false</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_UP: &#123;</div><div class=\"line\">                intercepted = <span class=\"keyword\">false</span>;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        Log.d(TAG, <span class=\"string\">\"intercepted=\"</span> + intercepted);</div><div class=\"line\">        mLastX = x;</div><div class=\"line\">        mLastY = y;</div><div class=\"line\">        mLastXIntercept = x;</div><div class=\"line\">        mLastYIntercept = y;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> intercepted;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\">        mVelocityTracker.addMovement(event);</div><div class=\"line\">        <span class=\"keyword\">int</span> x = (<span class=\"keyword\">int</span>) event.getX();</div><div class=\"line\">        <span class=\"keyword\">int</span> y = (<span class=\"keyword\">int</span>) event.getY();</div><div class=\"line\">        <span class=\"keyword\">switch</span> (event.getAction()) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN: &#123;</div><div class=\"line\">                Log.d(TAG, <span class=\"string\">\"onTouchEvent: ACTION_DOWN\"</span>);</div><div class=\"line\">                <span class=\"keyword\">if</span> (!mScroller.isFinished()) &#123;</div><div class=\"line\">                    mScroller.abortAnimation();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE: &#123;</div><div class=\"line\">                Log.d(TAG, <span class=\"string\">\"onTouchEvent: ACTION_MOVE\"</span>);</div><div class=\"line\">                <span class=\"keyword\">int</span> deltaX = x - mLastX;</div><div class=\"line\">                <span class=\"keyword\">int</span> deltaY = y - mLastY;</div><div class=\"line\">                Log.d(TAG, <span class=\"string\">\"onTouchEvent: deltaX\"</span> + deltaX);</div><div class=\"line\">                scrollBy(-deltaX, <span class=\"number\">0</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_UP: &#123;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">int</span> scrollX = getScrollX();</div><div class=\"line\">                <span class=\"keyword\">int</span> scrollToChildIndex = scrollX / mChildWidth;</div><div class=\"line\">                mVelocityTracker.computeCurrentVelocity(<span class=\"number\">1000</span>);</div><div class=\"line\">                <span class=\"keyword\">float</span> xVelocity = mVelocityTracker.getXVelocity();</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">//滑的速度到达阈值就认为需要进入下一页</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (Math.abs(xVelocity) &gt;= <span class=\"number\">100</span>) &#123;</div><div class=\"line\">                    mChildIndex = xVelocity &gt; <span class=\"number\">0</span> ? mChildIndex - <span class=\"number\">1</span> : mChildIndex + <span class=\"number\">1</span>;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"comment\">//滑动的距离超过一半，就进入下一页</span></div><div class=\"line\">                    mChildIndex = (scrollX + mChildWidth / <span class=\"number\">2</span>) / mChildWidth;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"comment\">//保证在0页和最后一页滑动时不会越界</span></div><div class=\"line\">                mChildIndex = Math.max(<span class=\"number\">0</span>, Math.min(mChildIndex, mChildrenSize - <span class=\"number\">1</span>));</div><div class=\"line\">                <span class=\"comment\">//没有达到进入下一页的要求，恢复原样</span></div><div class=\"line\">                <span class=\"keyword\">int</span> dx = mChildIndex * mChildWidth - scrollX;</div><div class=\"line\">                smoothScrollBy(dx, <span class=\"number\">0</span>);</div><div class=\"line\">                Log.d(TAG, <span class=\"string\">\"onTouchEvent: dx = \"</span> + dx);</div><div class=\"line\">                mVelocityTracker.clear();</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        mLastX = x;</div><div class=\"line\">        mLastY = y;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class=\"line\">        <span class=\"keyword\">int</span> measuredWidth = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> measuredHeight = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childCount = getChildCount();</div><div class=\"line\">        measureChildren(widthMeasureSpec, heightMeasureSpec);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> widthSpaceSize = MeasureSpec.getSize(widthMeasureSpec);</div><div class=\"line\">        <span class=\"keyword\">int</span> widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class=\"line\">        <span class=\"keyword\">int</span> heightSpaceSize = MeasureSpec.getSize(heightMeasureSpec);</div><div class=\"line\">        <span class=\"keyword\">int</span> heightSpecMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class=\"line\">        <span class=\"keyword\">if</span> (childCount == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            setMeasuredDimension(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (heightSpecMode == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> View childView = getChildAt(<span class=\"number\">0</span>);</div><div class=\"line\">            measuredHeight = childView.getMeasuredHeight();</div><div class=\"line\">            setMeasuredDimension(widthSpaceSize, childView.getMeasuredHeight());</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (widthSpecMode == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> View childView = getChildAt(<span class=\"number\">0</span>);</div><div class=\"line\">            measuredWidth = childView.getMeasuredWidth() * childCount;</div><div class=\"line\">            setMeasuredDimension(measuredWidth, heightSpaceSize);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> View childView = getChildAt(<span class=\"number\">0</span>);</div><div class=\"line\">            measuredWidth = childView.getMeasuredWidth() * childCount;</div><div class=\"line\">            measuredHeight = childView.getMeasuredHeight();</div><div class=\"line\">            setMeasuredDimension(measuredWidth, measuredHeight);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> childLeft = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childCount = getChildCount();</div><div class=\"line\">        mChildrenSize = childCount;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; childCount; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> View childView = getChildAt(i);</div><div class=\"line\">            <span class=\"keyword\">if</span> (childView.getVisibility() != View.GONE) &#123;</div><div class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidth = childView.getMeasuredWidth();</div><div class=\"line\">                mChildWidth = childWidth;</div><div class=\"line\">                childView.layout(childLeft, <span class=\"number\">0</span>, childLeft + childWidth,</div><div class=\"line\">                        childView.getMeasuredHeight());</div><div class=\"line\">                childLeft += childWidth;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">smoothScrollBy</span><span class=\"params\">(<span class=\"keyword\">int</span> dx, <span class=\"keyword\">int</span> dy)</span> </span>&#123;</div><div class=\"line\">        mScroller.startScroll(getScrollX(), <span class=\"number\">0</span>, dx, <span class=\"number\">0</span>, <span class=\"number\">500</span>);</div><div class=\"line\">        invalidate();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">computeScroll</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mScroller.computeScrollOffset()) &#123;</div><div class=\"line\">            scrollTo(mScroller.getCurrX(), mScroller.getCurrY());</div><div class=\"line\">            postInvalidate();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDetachedFromWindow</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mVelocityTracker.recycle();</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDetachedFromWindow();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"<p>相信开发Android的人都会有这种体会：从网上下载的demo运行的好好的，但是只要出现了滑动冲突，Demo就无法正常工作了。但是不用担心，解决滑动冲突有固定的模式，常见的有内部拦截和外部拦截两种，只要按照这个模式来就可以顺利解决。<br>","more":"</p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>相信开发Android的人都会有这种体会：从网上下载的demo运行的好好的，但是只要出现了滑动冲突，Demo就无法正常工作了。但是不用担心，解决滑动冲突有固定的模式，常见的有内部拦截和外部拦截两种，只要按照这个模式来就可以顺利解决。本文会涉及到View事件分发的相关知识，关于事件分发请参考<a href=\"http://sparkyuan.me/2016/03/11/View%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/\">http://sparkyuan.me/2016/03/11/View%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/</a></p>\n<h1 id=\"常见的滑动冲突场景\"><a href=\"#常见的滑动冲突场景\" class=\"headerlink\" title=\"常见的滑动冲突场景\"></a>常见的滑动冲突场景</h1><p><img src=\"http://img.blog.csdn.net/20160229164733489\" alt=\"常见场景\"></p>\n<h1 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h1><p><img src=\"http://img.blog.csdn.net/20160229164638864\" alt=\"示例\"></p>\n<h1 id=\"处理规则\"><a href=\"#处理规则\" class=\"headerlink\" title=\"处理规则\"></a>处理规则</h1><p>对于场景1，处理规则为：当用户左右滑动时，让外部的View拦截点击事件，当用户上下滑动时，让内部的View拦截点击事件。当产生滑动时，根据滑动的起始点与终点坐标位置，如果垂直方向滑动距离大，就判断为垂直滑动，否则判断为水平滑动。其他两种情况处理方法相似，<strong>都是从业务需求上得出相应的规则。</strong></p>\n<h1 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h1><h2 id=\"外部拦截发\"><a href=\"#外部拦截发\" class=\"headerlink\" title=\"外部拦截发\"></a>外部拦截发</h2><p>所有的点击事件都先经过父容器拦截处理，如果父容器需要拦截就拦截，不需要就传给内部的View。伪代码如下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onInterceptTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\">      <span class=\"keyword\">boolean</span> intercepted = <span class=\"keyword\">false</span>;</div><div class=\"line\"></div><div class=\"line\">      <span class=\"keyword\">switch</span> (event.getAction()) &#123;</div><div class=\"line\">          <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN: &#123;</div><div class=\"line\">          \tintercepted = <span class=\"keyword\">false</span>;</div><div class=\"line\">              <span class=\"keyword\">break</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE: &#123;</div><div class=\"line\">              <span class=\"keyword\">if</span> (满足父容器的拦截要求) &#123;</div><div class=\"line\">                  intercepted = <span class=\"keyword\">true</span>;</div><div class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                  intercepted = <span class=\"keyword\">false</span>;</div><div class=\"line\">              &#125;</div><div class=\"line\">              <span class=\"keyword\">break</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">case</span> MotionEvent.ACTION_UP: &#123;</div><div class=\"line\">              intercepted = <span class=\"keyword\">false</span>;</div><div class=\"line\">              <span class=\"keyword\">break</span>;</div><div class=\"line\">          &#125;</div><div class=\"line\">          <span class=\"keyword\">default</span>:</div><div class=\"line\">              <span class=\"keyword\">break</span>;</div><div class=\"line\">      &#125;</div><div class=\"line\">      mLastXIntercept = x;</div><div class=\"line\">      mLastYIntercept = y;</div><div class=\"line\">      <span class=\"keyword\">return</span> intercepted;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure></p>\n<p><strong>注：</strong><br>ACTION_DOWN这个事件是不能拦截的，因为一旦拦截后续的事件都会由父容器处理了。</p>\n<h2 id=\"内部拦截法\"><a href=\"#内部拦截法\" class=\"headerlink\" title=\"内部拦截法\"></a>内部拦截法</h2><p>父容器不拦截任何事件，所有事件都传给子元素。如果子元素需要此事件就直接消耗，否则就交给父容器进行处理。完成这个功能需要配合requestDisallowInterceptTouchEvent()方法才可。这个方法表示是否让父容器拦截事件。伪代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">int</span> x = (<span class=\"keyword\">int</span>) event.getX();</div><div class=\"line\">       <span class=\"keyword\">int</span> y = (<span class=\"keyword\">int</span>) event.getY();</div><div class=\"line\"></div><div class=\"line\">       <span class=\"keyword\">switch</span> (event.getAction()) &#123;</div><div class=\"line\">       <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN: &#123;</div><div class=\"line\">           parent.requestDisallowInterceptTouchEvent(<span class=\"keyword\">true</span>);</div><div class=\"line\">           <span class=\"keyword\">break</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE: &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (满足父容器的拦截要求) &#123;</div><div class=\"line\">               parent.requestDisallowInterceptTouchEvent(<span class=\"keyword\">false</span>);</div><div class=\"line\">           &#125;</div><div class=\"line\">           <span class=\"keyword\">break</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">case</span> MotionEvent.ACTION_UP: &#123;</div><div class=\"line\">           <span class=\"keyword\">break</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"keyword\">default</span>:</div><div class=\"line\">           <span class=\"keyword\">break</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       mLastX = x;</div><div class=\"line\">       mLastY = y;</div><div class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.dispatchTouchEvent(event);</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n<p><strong>注</strong><br>父容器默认拦截除了ACTION_DOWN以外的其他事件，这样子当元素调用parent.requestDisallowInterceptTouchEvent(false)时，父元素才能拦截所需的事件。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ul>\n<li>解决滑动冲突有两种方法，推荐外部拦截法，实现起来简单。</li>\n<li>本文以场景1为例做了讲解，场景2,3的做法与1类似，都是根据业务需要制定处理规则。</li>\n</ul>\n<h1 id=\"示例效果的源码\"><a href=\"#示例效果的源码\" class=\"headerlink\" title=\"示例效果的源码\"></a>示例效果的源码</h1><h2 id=\"Activity\"><a href=\"#Activity\" class=\"headerlink\" title=\"Activity\"></a>Activity</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoActivity_1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"DemoActivity_1\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> HorizontalScrollViewEx mListContainer;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.demo_1);</div><div class=\"line\">        Log.d(TAG, <span class=\"string\">\"onCreate\"</span>);</div><div class=\"line\">        initView();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initView</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        LayoutInflater inflater = getLayoutInflater();</div><div class=\"line\">        mListContainer = (HorizontalScrollViewEx) findViewById(R.id.container);</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> screenWidth = MyUtils.getScreenMetrics(<span class=\"keyword\">this</span>).widthPixels;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> screenHeight = MyUtils.getScreenMetrics(<span class=\"keyword\">this</span>).heightPixels;</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</div><div class=\"line\">            ViewGroup layout = (ViewGroup) inflater.inflate(</div><div class=\"line\">                    R.layout.content_layout, mListContainer, <span class=\"keyword\">false</span>);</div><div class=\"line\">            layout.getLayoutParams().width = screenWidth;</div><div class=\"line\">            TextView textView = (TextView) layout.findViewById(R.id.title);</div><div class=\"line\">            textView.setText(<span class=\"string\">\"page \"</span> + (i + <span class=\"number\">1</span>));</div><div class=\"line\">            layout.setBackgroundColor(Color.rgb(<span class=\"number\">255</span> / (i + <span class=\"number\">1</span>), <span class=\"number\">255</span> / (i + <span class=\"number\">1</span>), <span class=\"number\">0</span>));</div><div class=\"line\">            createList(layout);</div><div class=\"line\">            mListContainer.addView(layout);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">createList</span><span class=\"params\">(ViewGroup layout)</span> </span>&#123;</div><div class=\"line\">        ListView listView = (ListView) layout.findViewById(R.id.list);</div><div class=\"line\">        ArrayList&lt;String&gt; datas = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">50</span>; i++) &#123;</div><div class=\"line\">            datas.add(<span class=\"string\">\"name \"</span> + i);</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        ArrayAdapter&lt;String&gt; adapter = <span class=\"keyword\">new</span> ArrayAdapter&lt;String&gt;(<span class=\"keyword\">this</span>,</div><div class=\"line\">                R.layout.content_list_item, R.id.name, datas);</div><div class=\"line\">        listView.setAdapter(adapter);</div><div class=\"line\">        listView.setOnItemClickListener(<span class=\"keyword\">new</span> OnItemClickListener() &#123;</div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onItemClick</span><span class=\"params\">(AdapterView&lt;?&gt; parent, View view,</div><div class=\"line\">                    <span class=\"keyword\">int</span> position, <span class=\"keyword\">long</span> id)</span> </span>&#123;</div><div class=\"line\">                Toast.makeText(DemoActivity_1.<span class=\"keyword\">this</span>, <span class=\"string\">\"click item\"</span>,</div><div class=\"line\">                        Toast.LENGTH_SHORT).show();</div><div class=\"line\"></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"水平滑动的View\"><a href=\"#水平滑动的View\" class=\"headerlink\" title=\"水平滑动的View\"></a>水平滑动的View</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div><div class=\"line\">139</div><div class=\"line\">140</div><div class=\"line\">141</div><div class=\"line\">142</div><div class=\"line\">143</div><div class=\"line\">144</div><div class=\"line\">145</div><div class=\"line\">146</div><div class=\"line\">147</div><div class=\"line\">148</div><div class=\"line\">149</div><div class=\"line\">150</div><div class=\"line\">151</div><div class=\"line\">152</div><div class=\"line\">153</div><div class=\"line\">154</div><div class=\"line\">155</div><div class=\"line\">156</div><div class=\"line\">157</div><div class=\"line\">158</div><div class=\"line\">159</div><div class=\"line\">160</div><div class=\"line\">161</div><div class=\"line\">162</div><div class=\"line\">163</div><div class=\"line\">164</div><div class=\"line\">165</div><div class=\"line\">166</div><div class=\"line\">167</div><div class=\"line\">168</div><div class=\"line\">169</div><div class=\"line\">170</div><div class=\"line\">171</div><div class=\"line\">172</div><div class=\"line\">173</div><div class=\"line\">174</div><div class=\"line\">175</div><div class=\"line\">176</div><div class=\"line\">177</div><div class=\"line\">178</div><div class=\"line\">179</div><div class=\"line\">180</div><div class=\"line\">181</div><div class=\"line\">182</div><div class=\"line\">183</div><div class=\"line\">184</div><div class=\"line\">185</div><div class=\"line\">186</div><div class=\"line\">187</div><div class=\"line\">188</div><div class=\"line\">189</div><div class=\"line\">190</div><div class=\"line\">191</div><div class=\"line\">192</div><div class=\"line\">193</div><div class=\"line\">194</div><div class=\"line\">195</div><div class=\"line\">196</div><div class=\"line\">197</div><div class=\"line\">198</div><div class=\"line\">199</div><div class=\"line\">200</div><div class=\"line\">201</div><div class=\"line\">202</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HorizontalScrollViewEx</span> <span class=\"keyword\">extends</span> <span class=\"title\">ViewGroup</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"HorizontalScrollViewEx\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mChildrenSize;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mChildWidth;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mChildIndex;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">// 分别记录上次滑动的坐标</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mLastX = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mLastY = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"comment\">// 分别记录上次滑动的坐标(onInterceptTouchEvent)</span></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mLastXIntercept = <span class=\"number\">0</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mLastYIntercept = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Scroller mScroller;</div><div class=\"line\">    <span class=\"keyword\">private</span> VelocityTracker mVelocityTracker;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HorizontalScrollViewEx</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context);</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HorizontalScrollViewEx</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HorizontalScrollViewEx</span><span class=\"params\">(Context context, AttributeSet attrs,</div><div class=\"line\">                                  <span class=\"keyword\">int</span> defStyle)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyle);</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mScroller = <span class=\"keyword\">new</span> Scroller(getContext());</div><div class=\"line\">        mVelocityTracker = VelocityTracker.obtain();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onInterceptTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">boolean</span> intercepted = <span class=\"keyword\">false</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> x = (<span class=\"keyword\">int</span>) event.getX();</div><div class=\"line\">        <span class=\"keyword\">int</span> y = (<span class=\"keyword\">int</span>) event.getY();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">switch</span> (event.getAction()) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN: &#123;</div><div class=\"line\">                Log.d(TAG, <span class=\"string\">\"onInterceptTouchEvent: ACTION_DOWN\"</span>);</div><div class=\"line\">                intercepted = <span class=\"keyword\">false</span>;</div><div class=\"line\">                <span class=\"keyword\">if</span> (!mScroller.isFinished()) &#123;</div><div class=\"line\">                    mScroller.abortAnimation();</div><div class=\"line\">                    intercepted = <span class=\"keyword\">true</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE: &#123;</div><div class=\"line\">                Log.d(TAG, <span class=\"string\">\"onInterceptTouchEvent: ACTION_MOVE\"</span>);</div><div class=\"line\">                <span class=\"keyword\">int</span> deltaX = x - mLastXIntercept;</div><div class=\"line\">                <span class=\"keyword\">int</span> deltaY = y - mLastYIntercept;</div><div class=\"line\">                <span class=\"keyword\">if</span> (Math.abs(deltaX) &gt; Math.abs(deltaY)) &#123;</div><div class=\"line\">                    intercepted = <span class=\"keyword\">true</span>;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    intercepted = <span class=\"keyword\">false</span>;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_UP: &#123;</div><div class=\"line\">                intercepted = <span class=\"keyword\">false</span>;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        Log.d(TAG, <span class=\"string\">\"intercepted=\"</span> + intercepted);</div><div class=\"line\">        mLastX = x;</div><div class=\"line\">        mLastY = y;</div><div class=\"line\">        mLastXIntercept = x;</div><div class=\"line\">        mLastYIntercept = y;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> intercepted;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</div><div class=\"line\">        mVelocityTracker.addMovement(event);</div><div class=\"line\">        <span class=\"keyword\">int</span> x = (<span class=\"keyword\">int</span>) event.getX();</div><div class=\"line\">        <span class=\"keyword\">int</span> y = (<span class=\"keyword\">int</span>) event.getY();</div><div class=\"line\">        <span class=\"keyword\">switch</span> (event.getAction()) &#123;</div><div class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN: &#123;</div><div class=\"line\">                Log.d(TAG, <span class=\"string\">\"onTouchEvent: ACTION_DOWN\"</span>);</div><div class=\"line\">                <span class=\"keyword\">if</span> (!mScroller.isFinished()) &#123;</div><div class=\"line\">                    mScroller.abortAnimation();</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE: &#123;</div><div class=\"line\">                Log.d(TAG, <span class=\"string\">\"onTouchEvent: ACTION_MOVE\"</span>);</div><div class=\"line\">                <span class=\"keyword\">int</span> deltaX = x - mLastX;</div><div class=\"line\">                <span class=\"keyword\">int</span> deltaY = y - mLastY;</div><div class=\"line\">                Log.d(TAG, <span class=\"string\">\"onTouchEvent: deltaX\"</span> + deltaX);</div><div class=\"line\">                scrollBy(-deltaX, <span class=\"number\">0</span>);</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_UP: &#123;</div><div class=\"line\"></div><div class=\"line\">                <span class=\"keyword\">int</span> scrollX = getScrollX();</div><div class=\"line\">                <span class=\"keyword\">int</span> scrollToChildIndex = scrollX / mChildWidth;</div><div class=\"line\">                mVelocityTracker.computeCurrentVelocity(<span class=\"number\">1000</span>);</div><div class=\"line\">                <span class=\"keyword\">float</span> xVelocity = mVelocityTracker.getXVelocity();</div><div class=\"line\"></div><div class=\"line\">                <span class=\"comment\">//滑的速度到达阈值就认为需要进入下一页</span></div><div class=\"line\">                <span class=\"keyword\">if</span> (Math.abs(xVelocity) &gt;= <span class=\"number\">100</span>) &#123;</div><div class=\"line\">                    mChildIndex = xVelocity &gt; <span class=\"number\">0</span> ? mChildIndex - <span class=\"number\">1</span> : mChildIndex + <span class=\"number\">1</span>;</div><div class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">                    <span class=\"comment\">//滑动的距离超过一半，就进入下一页</span></div><div class=\"line\">                    mChildIndex = (scrollX + mChildWidth / <span class=\"number\">2</span>) / mChildWidth;</div><div class=\"line\">                &#125;</div><div class=\"line\">                <span class=\"comment\">//保证在0页和最后一页滑动时不会越界</span></div><div class=\"line\">                mChildIndex = Math.max(<span class=\"number\">0</span>, Math.min(mChildIndex, mChildrenSize - <span class=\"number\">1</span>));</div><div class=\"line\">                <span class=\"comment\">//没有达到进入下一页的要求，恢复原样</span></div><div class=\"line\">                <span class=\"keyword\">int</span> dx = mChildIndex * mChildWidth - scrollX;</div><div class=\"line\">                smoothScrollBy(dx, <span class=\"number\">0</span>);</div><div class=\"line\">                Log.d(TAG, <span class=\"string\">\"onTouchEvent: dx = \"</span> + dx);</div><div class=\"line\">                mVelocityTracker.clear();</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">            <span class=\"keyword\">default</span>:</div><div class=\"line\">                <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        mLastX = x;</div><div class=\"line\">        mLastY = y;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class=\"line\">        <span class=\"keyword\">int</span> measuredWidth = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">int</span> measuredHeight = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childCount = getChildCount();</div><div class=\"line\">        measureChildren(widthMeasureSpec, heightMeasureSpec);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">int</span> widthSpaceSize = MeasureSpec.getSize(widthMeasureSpec);</div><div class=\"line\">        <span class=\"keyword\">int</span> widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class=\"line\">        <span class=\"keyword\">int</span> heightSpaceSize = MeasureSpec.getSize(heightMeasureSpec);</div><div class=\"line\">        <span class=\"keyword\">int</span> heightSpecMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class=\"line\">        <span class=\"keyword\">if</span> (childCount == <span class=\"number\">0</span>) &#123;</div><div class=\"line\">            setMeasuredDimension(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (heightSpecMode == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> View childView = getChildAt(<span class=\"number\">0</span>);</div><div class=\"line\">            measuredHeight = childView.getMeasuredHeight();</div><div class=\"line\">            setMeasuredDimension(widthSpaceSize, childView.getMeasuredHeight());</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (widthSpecMode == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> View childView = getChildAt(<span class=\"number\">0</span>);</div><div class=\"line\">            measuredWidth = childView.getMeasuredWidth() * childCount;</div><div class=\"line\">            setMeasuredDimension(measuredWidth, heightSpaceSize);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> View childView = getChildAt(<span class=\"number\">0</span>);</div><div class=\"line\">            measuredWidth = childView.getMeasuredWidth() * childCount;</div><div class=\"line\">            measuredHeight = childView.getMeasuredHeight();</div><div class=\"line\">            setMeasuredDimension(measuredWidth, measuredHeight);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> childLeft = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childCount = getChildCount();</div><div class=\"line\">        mChildrenSize = childCount;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; childCount; i++) &#123;</div><div class=\"line\">            <span class=\"keyword\">final</span> View childView = getChildAt(i);</div><div class=\"line\">            <span class=\"keyword\">if</span> (childView.getVisibility() != View.GONE) &#123;</div><div class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidth = childView.getMeasuredWidth();</div><div class=\"line\">                mChildWidth = childWidth;</div><div class=\"line\">                childView.layout(childLeft, <span class=\"number\">0</span>, childLeft + childWidth,</div><div class=\"line\">                        childView.getMeasuredHeight());</div><div class=\"line\">                childLeft += childWidth;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">smoothScrollBy</span><span class=\"params\">(<span class=\"keyword\">int</span> dx, <span class=\"keyword\">int</span> dy)</span> </span>&#123;</div><div class=\"line\">        mScroller.startScroll(getScrollX(), <span class=\"number\">0</span>, dx, <span class=\"number\">0</span>, <span class=\"number\">500</span>);</div><div class=\"line\">        invalidate();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">computeScroll</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (mScroller.computeScrollOffset()) &#123;</div><div class=\"line\">            scrollTo(mScroller.getCurrX(), mScroller.getCurrY());</div><div class=\"line\">            postInvalidate();</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDetachedFromWindow</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mVelocityTracker.recycle();</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDetachedFromWindow();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"View事件分发机制","date":"2016-03-11T12:46:25.000Z","_content":"\n# 介绍\n点击事件的事件分发就是对MotionEvent事件的分发过程，当一个MotionEvent产生了以后，系统需要把这个事件传递给一个具体的View，而这个传递的过程就是分发的过程。\n<!-- more -->\n\n# 涉及到的三个方法\n\n- dispatchTouchEvent：用来进行事件的分发，如果事件能够传递给当前View，那么此方法一定会被调用，返回结果受当前View的onTouchEvent和View的dispatchTouchEvent方法的影响，表示是否当消耗当前事件\n- onInterceptTouchEvent：用来判断是否拦截某个事件，如果当前View拦截了某个事件，那么在同一个事件序列当中，此方法不会被再次调用，返回结果表示是否拦截当前事件；\n- onTouchEvent：在dispatchTouchEvent方法中调用，用来处理点击事件，返回结果表示是否消耗当前事件，如果不消耗，则在同一个事件序列中，当前View无法再次接收到事件。\n\n## 三个方法之间的关系\n\n```java\npublic boolean dispatchTouchEvent(MotionEvent ev) { \n    boolean consume = false;\n    if(onInterceptTouchEvent(ev)) { \n        consume = onTouchEvent(ev);\n    } else { \n        consume = child.dispatchTouchEvent(ev); \n    }\n    return consume; \n}\n```\n\n上面的伪代码很好的描述了三者之间的关系。如果当前View拦截事件，就交给自己的onTouchEvent去处理，否则就传给子View，直到事件被最终处理。\n\n# 事件分发顺序\n当一个点击事件产生后，它的传递过程如下：Activity -> Window -> View。如果View的onTouchEvent返回false，那么它的父容器onTouchEvent将会被调用，以此类推，最终将由Activity的onTouchEvent处理。\n\n## Activity对事件的分发过程\n**Activity -> Window -> DecorView。**\n\nWindows是一个抽象类，可以控制**顶级View**的外观和行为策略，PhoneWindow是这个类的唯一个实现。\nDecorView就是当前界面的底层容器，即setContentView所设置的View是它的一个子View。\n\n## 顶级View对点击事件的分发过程\n\n**ViewGroup -> dispatchTouchEvent -> onInterceptTouchEvent -> onTouch or onTouchEvent**\n\n顶级View一般都是一个ViewGroup。拦截事件之后，如果ViewGroup设置了mOnTouchListener，则Listener里的onTouch方法会屏蔽掉onTouchEvent。如果onTouchEvent设置了mOnClickListener，则Listener里的onClick会被调用。如果ViewGroup没有拦截则传给子View直到整个事件分发完成。\n\n##View对点击事件的处理过程\n如果View设置了mOnTouchListener，则Listener里的onTouch方法会屏蔽掉onTouchEvent。如果onTouchEvent设置了mOnClickListener，则Listener里的onClick会被调用。\nView没有onInterceptTouchEvent方法，一旦有点击事件传递给他，他就会处理。\n\n注：上面只是描述了事件分发过程的原理，关于源码的分析请参考书本的相应章节。\n\n欢迎转载，转载请注明出处[http://sparkyuan.github.io/](http://sparkyuan.github.io/)","source":"_posts/View事件分发机制.md","raw":"title: View事件分发机制\ndate: 2016/3/11 20:46:25\ncategories:\n- Android\n- Android开发艺术探索笔记\ntags:\n- Android\n- View\n- 事件分发机制\n---\n\n# 介绍\n点击事件的事件分发就是对MotionEvent事件的分发过程，当一个MotionEvent产生了以后，系统需要把这个事件传递给一个具体的View，而这个传递的过程就是分发的过程。\n<!-- more -->\n\n# 涉及到的三个方法\n\n- dispatchTouchEvent：用来进行事件的分发，如果事件能够传递给当前View，那么此方法一定会被调用，返回结果受当前View的onTouchEvent和View的dispatchTouchEvent方法的影响，表示是否当消耗当前事件\n- onInterceptTouchEvent：用来判断是否拦截某个事件，如果当前View拦截了某个事件，那么在同一个事件序列当中，此方法不会被再次调用，返回结果表示是否拦截当前事件；\n- onTouchEvent：在dispatchTouchEvent方法中调用，用来处理点击事件，返回结果表示是否消耗当前事件，如果不消耗，则在同一个事件序列中，当前View无法再次接收到事件。\n\n## 三个方法之间的关系\n\n```java\npublic boolean dispatchTouchEvent(MotionEvent ev) { \n    boolean consume = false;\n    if(onInterceptTouchEvent(ev)) { \n        consume = onTouchEvent(ev);\n    } else { \n        consume = child.dispatchTouchEvent(ev); \n    }\n    return consume; \n}\n```\n\n上面的伪代码很好的描述了三者之间的关系。如果当前View拦截事件，就交给自己的onTouchEvent去处理，否则就传给子View，直到事件被最终处理。\n\n# 事件分发顺序\n当一个点击事件产生后，它的传递过程如下：Activity -> Window -> View。如果View的onTouchEvent返回false，那么它的父容器onTouchEvent将会被调用，以此类推，最终将由Activity的onTouchEvent处理。\n\n## Activity对事件的分发过程\n**Activity -> Window -> DecorView。**\n\nWindows是一个抽象类，可以控制**顶级View**的外观和行为策略，PhoneWindow是这个类的唯一个实现。\nDecorView就是当前界面的底层容器，即setContentView所设置的View是它的一个子View。\n\n## 顶级View对点击事件的分发过程\n\n**ViewGroup -> dispatchTouchEvent -> onInterceptTouchEvent -> onTouch or onTouchEvent**\n\n顶级View一般都是一个ViewGroup。拦截事件之后，如果ViewGroup设置了mOnTouchListener，则Listener里的onTouch方法会屏蔽掉onTouchEvent。如果onTouchEvent设置了mOnClickListener，则Listener里的onClick会被调用。如果ViewGroup没有拦截则传给子View直到整个事件分发完成。\n\n##View对点击事件的处理过程\n如果View设置了mOnTouchListener，则Listener里的onTouch方法会屏蔽掉onTouchEvent。如果onTouchEvent设置了mOnClickListener，则Listener里的onClick会被调用。\nView没有onInterceptTouchEvent方法，一旦有点击事件传递给他，他就会处理。\n\n注：上面只是描述了事件分发过程的原理，关于源码的分析请参考书本的相应章节。\n\n欢迎转载，转载请注明出处[http://sparkyuan.github.io/](http://sparkyuan.github.io/)","slug":"View事件分发机制","published":1,"updated":"2016-12-28T12:14:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix8xu70w000owwv6389h7a5t","content":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>点击事件的事件分发就是对MotionEvent事件的分发过程，当一个MotionEvent产生了以后，系统需要把这个事件传递给一个具体的View，而这个传递的过程就是分发的过程。<br><a id=\"more\"></a></p>\n<h1 id=\"涉及到的三个方法\"><a href=\"#涉及到的三个方法\" class=\"headerlink\" title=\"涉及到的三个方法\"></a>涉及到的三个方法</h1><ul>\n<li>dispatchTouchEvent：用来进行事件的分发，如果事件能够传递给当前View，那么此方法一定会被调用，返回结果受当前View的onTouchEvent和View的dispatchTouchEvent方法的影响，表示是否当消耗当前事件</li>\n<li>onInterceptTouchEvent：用来判断是否拦截某个事件，如果当前View拦截了某个事件，那么在同一个事件序列当中，此方法不会被再次调用，返回结果表示是否拦截当前事件；</li>\n<li>onTouchEvent：在dispatchTouchEvent方法中调用，用来处理点击事件，返回结果表示是否消耗当前事件，如果不消耗，则在同一个事件序列中，当前View无法再次接收到事件。</li>\n</ul>\n<h2 id=\"三个方法之间的关系\"><a href=\"#三个方法之间的关系\" class=\"headerlink\" title=\"三个方法之间的关系\"></a>三个方法之间的关系</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123; </div><div class=\"line\">    <span class=\"keyword\">boolean</span> consume = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(onInterceptTouchEvent(ev)) &#123; </div><div class=\"line\">        consume = onTouchEvent(ev);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; </div><div class=\"line\">        consume = child.dispatchTouchEvent(ev); </div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> consume; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的伪代码很好的描述了三者之间的关系。如果当前View拦截事件，就交给自己的onTouchEvent去处理，否则就传给子View，直到事件被最终处理。</p>\n<h1 id=\"事件分发顺序\"><a href=\"#事件分发顺序\" class=\"headerlink\" title=\"事件分发顺序\"></a>事件分发顺序</h1><p>当一个点击事件产生后，它的传递过程如下：Activity -&gt; Window -&gt; View。如果View的onTouchEvent返回false，那么它的父容器onTouchEvent将会被调用，以此类推，最终将由Activity的onTouchEvent处理。</p>\n<h2 id=\"Activity对事件的分发过程\"><a href=\"#Activity对事件的分发过程\" class=\"headerlink\" title=\"Activity对事件的分发过程\"></a>Activity对事件的分发过程</h2><p><strong>Activity -&gt; Window -&gt; DecorView。</strong></p>\n<p>Windows是一个抽象类，可以控制<strong>顶级View</strong>的外观和行为策略，PhoneWindow是这个类的唯一个实现。<br>DecorView就是当前界面的底层容器，即setContentView所设置的View是它的一个子View。</p>\n<h2 id=\"顶级View对点击事件的分发过程\"><a href=\"#顶级View对点击事件的分发过程\" class=\"headerlink\" title=\"顶级View对点击事件的分发过程\"></a>顶级View对点击事件的分发过程</h2><p><strong>ViewGroup -&gt; dispatchTouchEvent -&gt; onInterceptTouchEvent -&gt; onTouch or onTouchEvent</strong></p>\n<p>顶级View一般都是一个ViewGroup。拦截事件之后，如果ViewGroup设置了mOnTouchListener，则Listener里的onTouch方法会屏蔽掉onTouchEvent。如果onTouchEvent设置了mOnClickListener，则Listener里的onClick会被调用。如果ViewGroup没有拦截则传给子View直到整个事件分发完成。</p>\n<p>##View对点击事件的处理过程<br>如果View设置了mOnTouchListener，则Listener里的onTouch方法会屏蔽掉onTouchEvent。如果onTouchEvent设置了mOnClickListener，则Listener里的onClick会被调用。<br>View没有onInterceptTouchEvent方法，一旦有点击事件传递给他，他就会处理。</p>\n<p>注：上面只是描述了事件分发过程的原理，关于源码的分析请参考书本的相应章节。</p>\n<p>欢迎转载，转载请注明出处<a href=\"http://sparkyuan.github.io/\">http://sparkyuan.github.io/</a></p>\n","excerpt":"<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>点击事件的事件分发就是对MotionEvent事件的分发过程，当一个MotionEvent产生了以后，系统需要把这个事件传递给一个具体的View，而这个传递的过程就是分发的过程。<br>","more":"</p>\n<h1 id=\"涉及到的三个方法\"><a href=\"#涉及到的三个方法\" class=\"headerlink\" title=\"涉及到的三个方法\"></a>涉及到的三个方法</h1><ul>\n<li>dispatchTouchEvent：用来进行事件的分发，如果事件能够传递给当前View，那么此方法一定会被调用，返回结果受当前View的onTouchEvent和View的dispatchTouchEvent方法的影响，表示是否当消耗当前事件</li>\n<li>onInterceptTouchEvent：用来判断是否拦截某个事件，如果当前View拦截了某个事件，那么在同一个事件序列当中，此方法不会被再次调用，返回结果表示是否拦截当前事件；</li>\n<li>onTouchEvent：在dispatchTouchEvent方法中调用，用来处理点击事件，返回结果表示是否消耗当前事件，如果不消耗，则在同一个事件序列中，当前View无法再次接收到事件。</li>\n</ul>\n<h2 id=\"三个方法之间的关系\"><a href=\"#三个方法之间的关系\" class=\"headerlink\" title=\"三个方法之间的关系\"></a>三个方法之间的关系</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123; </div><div class=\"line\">    <span class=\"keyword\">boolean</span> consume = <span class=\"keyword\">false</span>;</div><div class=\"line\">    <span class=\"keyword\">if</span>(onInterceptTouchEvent(ev)) &#123; </div><div class=\"line\">        consume = onTouchEvent(ev);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; </div><div class=\"line\">        consume = child.dispatchTouchEvent(ev); </div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">return</span> consume; </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>上面的伪代码很好的描述了三者之间的关系。如果当前View拦截事件，就交给自己的onTouchEvent去处理，否则就传给子View，直到事件被最终处理。</p>\n<h1 id=\"事件分发顺序\"><a href=\"#事件分发顺序\" class=\"headerlink\" title=\"事件分发顺序\"></a>事件分发顺序</h1><p>当一个点击事件产生后，它的传递过程如下：Activity -&gt; Window -&gt; View。如果View的onTouchEvent返回false，那么它的父容器onTouchEvent将会被调用，以此类推，最终将由Activity的onTouchEvent处理。</p>\n<h2 id=\"Activity对事件的分发过程\"><a href=\"#Activity对事件的分发过程\" class=\"headerlink\" title=\"Activity对事件的分发过程\"></a>Activity对事件的分发过程</h2><p><strong>Activity -&gt; Window -&gt; DecorView。</strong></p>\n<p>Windows是一个抽象类，可以控制<strong>顶级View</strong>的外观和行为策略，PhoneWindow是这个类的唯一个实现。<br>DecorView就是当前界面的底层容器，即setContentView所设置的View是它的一个子View。</p>\n<h2 id=\"顶级View对点击事件的分发过程\"><a href=\"#顶级View对点击事件的分发过程\" class=\"headerlink\" title=\"顶级View对点击事件的分发过程\"></a>顶级View对点击事件的分发过程</h2><p><strong>ViewGroup -&gt; dispatchTouchEvent -&gt; onInterceptTouchEvent -&gt; onTouch or onTouchEvent</strong></p>\n<p>顶级View一般都是一个ViewGroup。拦截事件之后，如果ViewGroup设置了mOnTouchListener，则Listener里的onTouch方法会屏蔽掉onTouchEvent。如果onTouchEvent设置了mOnClickListener，则Listener里的onClick会被调用。如果ViewGroup没有拦截则传给子View直到整个事件分发完成。</p>\n<p>##View对点击事件的处理过程<br>如果View设置了mOnTouchListener，则Listener里的onTouch方法会屏蔽掉onTouchEvent。如果onTouchEvent设置了mOnClickListener，则Listener里的onClick会被调用。<br>View没有onInterceptTouchEvent方法，一旦有点击事件传递给他，他就会处理。</p>\n<p>注：上面只是描述了事件分发过程的原理，关于源码的分析请参考书本的相应章节。</p>\n<p>欢迎转载，转载请注明出处<a href=\"http://sparkyuan.github.io/\">http://sparkyuan.github.io/</a></p>"},{"title":"从源码到apk——apk打包过程","date":"2016-04-01T08:12:53.000Z","_content":"Android程序是怎么从源码变成可以安装使用的apk的\n<!-- more -->\n\n# 流程\n\n## 官方版\n![build](/images/build.png)\n\n## 详细版\n![build-detail](/images/android_build_process_detail.png)\n\n上面就是一个关于构建过程的一个典型的流程图。\n\n- aapt（Android Asset Packaging Tool）给你的Activity提供所需的资源文件,如 AndroidManifest.xml，XML文件,并编译它们。同时产生R.java文件，使你可以在java代码中引用这些资源。\n- aidl工具把.aidl接口转换成Java接口。\n- 你所有的Java代码,包括 R.java和 .aidl文件,由Java编译器和编译输出.class文件。\n- dex工具把.class文件转换成Dalvik字节文件，第三方的类和.class也被转换成.dex文件\n- 所有无法编译的资源（比如图片），编译好的资源文件和.dex都被送到apkbuilder工具中，生成最后的.apk\n- 生成.apk时必须制定是debug还是release，release还要提供相应的key\n- 如果选择release版本，还需要使用zipalign工具对apk对齐。齐处理即使得所有资源文件距离文件起始偏移为4字节的整数倍，这样通过内存映射访问apk文件时处理速度更快。\n\n# 输出\n生成的apk在app/build/outputs/apk/目录下，命名规则 app-<flavor>-<buildtype>.apk，例如，app-demo-debug.apk.\n\n","source":"_posts/从源码到APK.md","raw":"title: 从源码到apk——apk打包过程\ndate: 2016/4/1 16:12:53\ncategories:\n- Android\ntags:\n- apk\n\n---\nAndroid程序是怎么从源码变成可以安装使用的apk的\n<!-- more -->\n\n# 流程\n\n## 官方版\n![build](/images/build.png)\n\n## 详细版\n![build-detail](/images/android_build_process_detail.png)\n\n上面就是一个关于构建过程的一个典型的流程图。\n\n- aapt（Android Asset Packaging Tool）给你的Activity提供所需的资源文件,如 AndroidManifest.xml，XML文件,并编译它们。同时产生R.java文件，使你可以在java代码中引用这些资源。\n- aidl工具把.aidl接口转换成Java接口。\n- 你所有的Java代码,包括 R.java和 .aidl文件,由Java编译器和编译输出.class文件。\n- dex工具把.class文件转换成Dalvik字节文件，第三方的类和.class也被转换成.dex文件\n- 所有无法编译的资源（比如图片），编译好的资源文件和.dex都被送到apkbuilder工具中，生成最后的.apk\n- 生成.apk时必须制定是debug还是release，release还要提供相应的key\n- 如果选择release版本，还需要使用zipalign工具对apk对齐。齐处理即使得所有资源文件距离文件起始偏移为4字节的整数倍，这样通过内存映射访问apk文件时处理速度更快。\n\n# 输出\n生成的apk在app/build/outputs/apk/目录下，命名规则 app-<flavor>-<buildtype>.apk，例如，app-demo-debug.apk.\n\n","slug":"从源码到APK","published":1,"updated":"2016-12-28T12:14:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix8xu70z000swwv69nc8x46m","content":"<p>Android程序是怎么从源码变成可以安装使用的apk的<br><a id=\"more\"></a></p>\n<h1 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h1><h2 id=\"官方版\"><a href=\"#官方版\" class=\"headerlink\" title=\"官方版\"></a>官方版</h2><p><img src=\"/images/build.png\" alt=\"build\"></p>\n<h2 id=\"详细版\"><a href=\"#详细版\" class=\"headerlink\" title=\"详细版\"></a>详细版</h2><p><img src=\"/images/android_build_process_detail.png\" alt=\"build-detail\"></p>\n<p>上面就是一个关于构建过程的一个典型的流程图。</p>\n<ul>\n<li>aapt（Android Asset Packaging Tool）给你的Activity提供所需的资源文件,如 AndroidManifest.xml，XML文件,并编译它们。同时产生R.java文件，使你可以在java代码中引用这些资源。</li>\n<li>aidl工具把.aidl接口转换成Java接口。</li>\n<li>你所有的Java代码,包括 R.java和 .aidl文件,由Java编译器和编译输出.class文件。</li>\n<li>dex工具把.class文件转换成Dalvik字节文件，第三方的类和.class也被转换成.dex文件</li>\n<li>所有无法编译的资源（比如图片），编译好的资源文件和.dex都被送到apkbuilder工具中，生成最后的.apk</li>\n<li>生成.apk时必须制定是debug还是release，release还要提供相应的key</li>\n<li>如果选择release版本，还需要使用zipalign工具对apk对齐。齐处理即使得所有资源文件距离文件起始偏移为4字节的整数倍，这样通过内存映射访问apk文件时处理速度更快。</li>\n</ul>\n<h1 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h1><p>生成的apk在app/build/outputs/apk/目录下，命名规则 app-<flavor>-<buildtype>.apk，例如，app-demo-debug.apk.</buildtype></flavor></p>\n","excerpt":"<p>Android程序是怎么从源码变成可以安装使用的apk的<br>","more":"</p>\n<h1 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h1><h2 id=\"官方版\"><a href=\"#官方版\" class=\"headerlink\" title=\"官方版\"></a>官方版</h2><p><img src=\"/images/build.png\" alt=\"build\"></p>\n<h2 id=\"详细版\"><a href=\"#详细版\" class=\"headerlink\" title=\"详细版\"></a>详细版</h2><p><img src=\"/images/android_build_process_detail.png\" alt=\"build-detail\"></p>\n<p>上面就是一个关于构建过程的一个典型的流程图。</p>\n<ul>\n<li>aapt（Android Asset Packaging Tool）给你的Activity提供所需的资源文件,如 AndroidManifest.xml，XML文件,并编译它们。同时产生R.java文件，使你可以在java代码中引用这些资源。</li>\n<li>aidl工具把.aidl接口转换成Java接口。</li>\n<li>你所有的Java代码,包括 R.java和 .aidl文件,由Java编译器和编译输出.class文件。</li>\n<li>dex工具把.class文件转换成Dalvik字节文件，第三方的类和.class也被转换成.dex文件</li>\n<li>所有无法编译的资源（比如图片），编译好的资源文件和.dex都被送到apkbuilder工具中，生成最后的.apk</li>\n<li>生成.apk时必须制定是debug还是release，release还要提供相应的key</li>\n<li>如果选择release版本，还需要使用zipalign工具对apk对齐。齐处理即使得所有资源文件距离文件起始偏移为4字节的整数倍，这样通过内存映射访问apk文件时处理速度更快。</li>\n</ul>\n<h1 id=\"输出\"><a href=\"#输出\" class=\"headerlink\" title=\"输出\"></a>输出</h1><p>生成的apk在app/build/outputs/apk/目录下，命名规则 app-<flavor>-<buildtype>.apk，例如，app-demo-debug.apk.</p>"},{"title":"ViewRoot、DecorView、MeasureSpec和View的工作原理","date":"2016-03-11T12:46:25.000Z","_content":"View的绘制流程是从ViewRoot的performTraversals方法开始的，它经过measure、layout和draw三个过程才能最终将一个View绘制出来，其中measure用来测量View的宽和高，layout用来确定View在父容器中的放置位置，而draw则负责将View绘制在屏幕上。\n<!-- more -->\n\n# ViewRoot和DecorView\n## ViewRoot\n\n- ViewRoot对应ViewRootImpl类，它是连接WindowManager和DecorView的纽带，View的三大流程均通过ViewRoot来完成。\n- ActivityThread中，Activity创建完成后，会将DecorView添加到Window中，同时创建ViewRootImpl对象，并建立两者的关联。\n\n## DecorView\n- DecorView作为顶级View，一般情况下它内部包含一个竖直方向的LinearLayout，在这个LinearLayout里面有上下两个部分（具体情况和Android版本及主体有关），上面的是标题栏，下面的是内容栏。在Activity中通过setContentView所设置的布局文件其实就是被加到内容栏之中的，而内容栏的id是content，在代码中可以通过ViewGroup content = （ViewGroup)findViewById(R.android.id.content)来得到content对应的layout。\n- DecorView其实是一个FrameLayout，View层的事件都先经过DecorView，然后才传递给我们的View。\n\n# MeasureSpec\n在测量过程中，系统会将**View的LayoutParams根据父容器所施加的规则转换成对应的MeasureSpec，然后再根据这个MeasureSpec来测量出View的宽和高。**测量出来的宽和高不一定等于View最终的宽和高。\n\nMeasureSpec将SpecMode和SpecSize打包成一个int值来避免过多的对象内存分配，高2位代表SpecMode，低30位代表SpecSize，SpecMode是指测量模式，而SpecSize是指在某种测量模式下的规格大小。\nSpecMode有三类：\n- UNSPECIFIED：父容器不对View有任何限制，要多大给多大，这种情况一般用于系统内部，表示一种测量状态\n- EXACTLY：父容器已经检测出View所需要的精确大小，这个时候View的最终大小就是SpecSize所指定的值。它对应于LayoutParams中的match_parent和具体的数值这两种模式\n- AT_MOST：父容器指定了一个可用大小即SpecSize，View的大小不能大于这个值，具体是什么值要看不同View的具体实现。它对应于LayoutParams中的wrap_content。\n\n# 普通MeasureSpec的创建规则\n**对于普通View，其MeasureSpec由父容器的MeasureSpec和自身的LayoutParams来共同决定。**\n\n- 子View为精确宽高，无论父容器的MeasureSpec，子View的MeasureSpec都为精确值且遵循LayoutParams中的值。\n- 子View为match_parent时，如果父容器是精确模式，则子View也为精确模式且为父容器的剩余空间大小；如果父容器是最大模式，则子View也是最大模式且其大小不会超过父容器的剩余空间。\n- 子View为wrap_content时，无论父View是精确还是最大模式，子View的模式总是最大模式，且不会超过父容器的剩余空间。\n\n# View的工作流程\n## measure\nViewGroup的measure方法会遍历每个子元素，并调用子元素内部的measure方法，measure源码如下：\n```java\n protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),\n                getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));\n    }\n```\n\n注：\n\n- getDefaultSize()返回MeasureSpec中的specSize，也就是View测量后的大小。\n- getSuggestedMinimumWidth()，View如果没有背景，那么返回android:minWidth这个属性指定的值，这个值可以为0；如果设置了背景，则返回背景的最小宽度和minWidth中的**最大值**。\n- getSuggestedMinimumHeight()，与getSuggestedMinimumWidth()类似。\n- 直接继承View的自定义控件需要重写onMeasure方法并设置wrap_content时的自身大小，否则在布局中使用wrap_content时就相当于使用match_parent。因为LayoutParams=wrap_content的情况下，MeasureSpec为AT_MOST，所以View的宽和高为父容器当前剩余的空间，这种效果与match_parent一致。**具体处理方法要根据需求灵活决定。**\n\n### 如何得到View的宽和高\n\n在Activity的onCreate、onStart、onResume方法中均无法正确得到某个View的宽/高信息，这是因为View的measure过程和Activity的生命周期方法不是同步执行的，因此无法保证Activity执行了onCreate、onStart、onResume时某个View就已经测量完毕了，如果View还没有测量完毕，那么获得的宽/高就是0。\n\n可以通过如下四个方法来解决这个问题：\n- Activity或者View的onWindowFocusChanged方法（注意该方法会在Activity Pause和resume时被多次调用）\n- view.post(new Runnable( {@Overidde public void run(){})})，在run方法中获取。\n- ViewTreeObserver中的onGlobalLayoutListener中。\n- 手动调用View的measure方法。\n示例代码请参考原书P190页\n\n## layout\nlayout的作用是用来确定子视图在父视图中的位置。源码如下：\n\n```java\npublic void layout(int l, int t, int r, int b) {  \n    int oldL = mLeft;  \n    int oldT = mTop;  \n    int oldB = mBottom;  \n    int oldR = mRight;  \n    boolean changed = setFrame(l, t, r, b);  \n    if (changed || (mPrivateFlags & LAYOUT_REQUIRED) == LAYOUT_REQUIRED) {  \n        if (ViewDebug.TRACE_HIERARCHY) {  \n            ViewDebug.trace(this, ViewDebug.HierarchyTraceType.ON_LAYOUT);  \n        }  \n        onLayout(changed, l, t, r, b);  \n        mPrivateFlags &= ~LAYOUT_REQUIRED;  \n        if (mOnLayoutChangeListeners != null) {  \n            ArrayList<OnLayoutChangeListener> listenersCopy =  \n                    (ArrayList<OnLayoutChangeListener>) mOnLayoutChangeListeners.clone();  \n            int numListeners = listenersCopy.size();  \n            for (int i = 0; i < numListeners; ++i) {  \n                listenersCopy.get(i).onLayoutChange(this, l, t, r, b, oldL, oldT, oldR, oldB);  \n            }  \n        }  \n    }  \n    mPrivateFlags &= ~FORCE_LAYOUT;  \n}  \n```\n通过setFrame()确定四个顶点的位置，进而确定View在父容器中的位置。\n\n在View的默认实现中，View的测量宽/高和最终宽/高是相等的，只不过测量宽/高形成于View的measure过程，而最终宽/高形成于View的layout过程，即两者的赋值时机不同，测量宽/高的赋值时机稍微早一些。多数情况下可以认为View的测量宽/高就等于最终的宽/高，但对于在View的layout中改变了View的left、top、right、bottom四个属性时，得出的测量宽/高有可能和最终的宽/高不一致。\n\n## draw\ndraw的过程很简单主要有以下几步：\n\n- 绘制背景(background.draw)\n- 绘制自己(onDraw)\n- 绘制children(dispatchDraw)\n- 绘制装饰(onDrawScrollBars)。\n\n源码如下\n```java\npublic void draw(Canvas canvas) {  \n  \n        / * Draw traversal performs several drawing steps which must be executed  \n         * in the appropriate order:  \n         *  \n         *      1. Draw the background if need  \n         *      2. If necessary, save the canvas' layers to prepare for fading  \n         *      3. Draw view's content  \n         *      4. Draw children (dispatchDraw)  \n         *      5. If necessary, draw the fading edges and restore layers  \n         *      6. Draw decorations (scrollbars for instance)  \n         */  \n  \n       //Step 1, draw the background, if needed  \n        if (!dirtyOpaque) {  \n            drawBackground(canvas);  \n        }  \n  \n         // skip step 2 & 5 if possible (common case)  \n        final int viewFlags = mViewFlags;  \n        if (!verticalEdges && !horizontalEdges) {  \n            // Step 3, draw the content  \n            if (!dirtyOpaque) onDraw(canvas);  \n  \n            // Step 4, draw the children  \n            dispatchDraw(canvas);  \n  \n            // Step 6, draw decorations (scrollbars)  \n            onDrawScrollBars(canvas);  \n  \n            if (mOverlay != null && !mOverlay.isEmpty()) {  \n                mOverlay.getOverlayView().dispatchDraw(canvas);  \n            }  \n  \n            // we're done...  \n            return;  \n        }  \n  \n        // Step 2, save the canvas' layers  \n        ...  \n  \n        // Step 3, draw the content  \n        if (!dirtyOpaque)   \n            onDraw(canvas);  \n  \n        // Step 4, draw the children  \n        dispatchDraw(canvas);  \n  \n        // Step 5, draw the fade effect and restore layers  \n  \n        // Step 6, draw decorations (scrollbars)  \n        onDrawScrollBars(canvas);  \n    }  \n```\n\n注：\n\n- View有一个特殊的方法setWillNotDraw，如果一个View不需要绘制任何内容，设置这个标记位true后，系统会进行优化。默认情况下，View没有启用这个优化标记位，但是ViewGroup会默认启用这个优化标记位。\n- 这个标记位对实际开发的意义是：如果自定义控件继承于ViewGroup并且本身不具备绘制功能时，就可以开启这个标记位从而便于系统进行后续的优化。当明确知道一个ViewGroup需要通过onDraw来绘制内容时，需要显示地关闭WILL_NOT_DRAW这个标记位。\n\n欢迎转载，转载请注明出处[http://sparkyuan.me/](http://sparkyuan.me/)","source":"_posts/View的工作原理.md","raw":"title: ViewRoot、DecorView、MeasureSpec和View的工作原理\ndate: 2016/3/11 20:46:25\ncategories:\n- Android\n- Android开发艺术探索笔记\ntags:\n- Android\n- View\n---\nView的绘制流程是从ViewRoot的performTraversals方法开始的，它经过measure、layout和draw三个过程才能最终将一个View绘制出来，其中measure用来测量View的宽和高，layout用来确定View在父容器中的放置位置，而draw则负责将View绘制在屏幕上。\n<!-- more -->\n\n# ViewRoot和DecorView\n## ViewRoot\n\n- ViewRoot对应ViewRootImpl类，它是连接WindowManager和DecorView的纽带，View的三大流程均通过ViewRoot来完成。\n- ActivityThread中，Activity创建完成后，会将DecorView添加到Window中，同时创建ViewRootImpl对象，并建立两者的关联。\n\n## DecorView\n- DecorView作为顶级View，一般情况下它内部包含一个竖直方向的LinearLayout，在这个LinearLayout里面有上下两个部分（具体情况和Android版本及主体有关），上面的是标题栏，下面的是内容栏。在Activity中通过setContentView所设置的布局文件其实就是被加到内容栏之中的，而内容栏的id是content，在代码中可以通过ViewGroup content = （ViewGroup)findViewById(R.android.id.content)来得到content对应的layout。\n- DecorView其实是一个FrameLayout，View层的事件都先经过DecorView，然后才传递给我们的View。\n\n# MeasureSpec\n在测量过程中，系统会将**View的LayoutParams根据父容器所施加的规则转换成对应的MeasureSpec，然后再根据这个MeasureSpec来测量出View的宽和高。**测量出来的宽和高不一定等于View最终的宽和高。\n\nMeasureSpec将SpecMode和SpecSize打包成一个int值来避免过多的对象内存分配，高2位代表SpecMode，低30位代表SpecSize，SpecMode是指测量模式，而SpecSize是指在某种测量模式下的规格大小。\nSpecMode有三类：\n- UNSPECIFIED：父容器不对View有任何限制，要多大给多大，这种情况一般用于系统内部，表示一种测量状态\n- EXACTLY：父容器已经检测出View所需要的精确大小，这个时候View的最终大小就是SpecSize所指定的值。它对应于LayoutParams中的match_parent和具体的数值这两种模式\n- AT_MOST：父容器指定了一个可用大小即SpecSize，View的大小不能大于这个值，具体是什么值要看不同View的具体实现。它对应于LayoutParams中的wrap_content。\n\n# 普通MeasureSpec的创建规则\n**对于普通View，其MeasureSpec由父容器的MeasureSpec和自身的LayoutParams来共同决定。**\n\n- 子View为精确宽高，无论父容器的MeasureSpec，子View的MeasureSpec都为精确值且遵循LayoutParams中的值。\n- 子View为match_parent时，如果父容器是精确模式，则子View也为精确模式且为父容器的剩余空间大小；如果父容器是最大模式，则子View也是最大模式且其大小不会超过父容器的剩余空间。\n- 子View为wrap_content时，无论父View是精确还是最大模式，子View的模式总是最大模式，且不会超过父容器的剩余空间。\n\n# View的工作流程\n## measure\nViewGroup的measure方法会遍历每个子元素，并调用子元素内部的measure方法，measure源码如下：\n```java\n protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),\n                getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));\n    }\n```\n\n注：\n\n- getDefaultSize()返回MeasureSpec中的specSize，也就是View测量后的大小。\n- getSuggestedMinimumWidth()，View如果没有背景，那么返回android:minWidth这个属性指定的值，这个值可以为0；如果设置了背景，则返回背景的最小宽度和minWidth中的**最大值**。\n- getSuggestedMinimumHeight()，与getSuggestedMinimumWidth()类似。\n- 直接继承View的自定义控件需要重写onMeasure方法并设置wrap_content时的自身大小，否则在布局中使用wrap_content时就相当于使用match_parent。因为LayoutParams=wrap_content的情况下，MeasureSpec为AT_MOST，所以View的宽和高为父容器当前剩余的空间，这种效果与match_parent一致。**具体处理方法要根据需求灵活决定。**\n\n### 如何得到View的宽和高\n\n在Activity的onCreate、onStart、onResume方法中均无法正确得到某个View的宽/高信息，这是因为View的measure过程和Activity的生命周期方法不是同步执行的，因此无法保证Activity执行了onCreate、onStart、onResume时某个View就已经测量完毕了，如果View还没有测量完毕，那么获得的宽/高就是0。\n\n可以通过如下四个方法来解决这个问题：\n- Activity或者View的onWindowFocusChanged方法（注意该方法会在Activity Pause和resume时被多次调用）\n- view.post(new Runnable( {@Overidde public void run(){})})，在run方法中获取。\n- ViewTreeObserver中的onGlobalLayoutListener中。\n- 手动调用View的measure方法。\n示例代码请参考原书P190页\n\n## layout\nlayout的作用是用来确定子视图在父视图中的位置。源码如下：\n\n```java\npublic void layout(int l, int t, int r, int b) {  \n    int oldL = mLeft;  \n    int oldT = mTop;  \n    int oldB = mBottom;  \n    int oldR = mRight;  \n    boolean changed = setFrame(l, t, r, b);  \n    if (changed || (mPrivateFlags & LAYOUT_REQUIRED) == LAYOUT_REQUIRED) {  \n        if (ViewDebug.TRACE_HIERARCHY) {  \n            ViewDebug.trace(this, ViewDebug.HierarchyTraceType.ON_LAYOUT);  \n        }  \n        onLayout(changed, l, t, r, b);  \n        mPrivateFlags &= ~LAYOUT_REQUIRED;  \n        if (mOnLayoutChangeListeners != null) {  \n            ArrayList<OnLayoutChangeListener> listenersCopy =  \n                    (ArrayList<OnLayoutChangeListener>) mOnLayoutChangeListeners.clone();  \n            int numListeners = listenersCopy.size();  \n            for (int i = 0; i < numListeners; ++i) {  \n                listenersCopy.get(i).onLayoutChange(this, l, t, r, b, oldL, oldT, oldR, oldB);  \n            }  \n        }  \n    }  \n    mPrivateFlags &= ~FORCE_LAYOUT;  \n}  \n```\n通过setFrame()确定四个顶点的位置，进而确定View在父容器中的位置。\n\n在View的默认实现中，View的测量宽/高和最终宽/高是相等的，只不过测量宽/高形成于View的measure过程，而最终宽/高形成于View的layout过程，即两者的赋值时机不同，测量宽/高的赋值时机稍微早一些。多数情况下可以认为View的测量宽/高就等于最终的宽/高，但对于在View的layout中改变了View的left、top、right、bottom四个属性时，得出的测量宽/高有可能和最终的宽/高不一致。\n\n## draw\ndraw的过程很简单主要有以下几步：\n\n- 绘制背景(background.draw)\n- 绘制自己(onDraw)\n- 绘制children(dispatchDraw)\n- 绘制装饰(onDrawScrollBars)。\n\n源码如下\n```java\npublic void draw(Canvas canvas) {  \n  \n        / * Draw traversal performs several drawing steps which must be executed  \n         * in the appropriate order:  \n         *  \n         *      1. Draw the background if need  \n         *      2. If necessary, save the canvas' layers to prepare for fading  \n         *      3. Draw view's content  \n         *      4. Draw children (dispatchDraw)  \n         *      5. If necessary, draw the fading edges and restore layers  \n         *      6. Draw decorations (scrollbars for instance)  \n         */  \n  \n       //Step 1, draw the background, if needed  \n        if (!dirtyOpaque) {  \n            drawBackground(canvas);  \n        }  \n  \n         // skip step 2 & 5 if possible (common case)  \n        final int viewFlags = mViewFlags;  \n        if (!verticalEdges && !horizontalEdges) {  \n            // Step 3, draw the content  \n            if (!dirtyOpaque) onDraw(canvas);  \n  \n            // Step 4, draw the children  \n            dispatchDraw(canvas);  \n  \n            // Step 6, draw decorations (scrollbars)  \n            onDrawScrollBars(canvas);  \n  \n            if (mOverlay != null && !mOverlay.isEmpty()) {  \n                mOverlay.getOverlayView().dispatchDraw(canvas);  \n            }  \n  \n            // we're done...  \n            return;  \n        }  \n  \n        // Step 2, save the canvas' layers  \n        ...  \n  \n        // Step 3, draw the content  \n        if (!dirtyOpaque)   \n            onDraw(canvas);  \n  \n        // Step 4, draw the children  \n        dispatchDraw(canvas);  \n  \n        // Step 5, draw the fade effect and restore layers  \n  \n        // Step 6, draw decorations (scrollbars)  \n        onDrawScrollBars(canvas);  \n    }  \n```\n\n注：\n\n- View有一个特殊的方法setWillNotDraw，如果一个View不需要绘制任何内容，设置这个标记位true后，系统会进行优化。默认情况下，View没有启用这个优化标记位，但是ViewGroup会默认启用这个优化标记位。\n- 这个标记位对实际开发的意义是：如果自定义控件继承于ViewGroup并且本身不具备绘制功能时，就可以开启这个标记位从而便于系统进行后续的优化。当明确知道一个ViewGroup需要通过onDraw来绘制内容时，需要显示地关闭WILL_NOT_DRAW这个标记位。\n\n欢迎转载，转载请注明出处[http://sparkyuan.me/](http://sparkyuan.me/)","slug":"View的工作原理","published":1,"updated":"2016-12-28T12:14:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix8xu710000vwwv6l1hcn19i","content":"<p>View的绘制流程是从ViewRoot的performTraversals方法开始的，它经过measure、layout和draw三个过程才能最终将一个View绘制出来，其中measure用来测量View的宽和高，layout用来确定View在父容器中的放置位置，而draw则负责将View绘制在屏幕上。<br><a id=\"more\"></a></p>\n<h1 id=\"ViewRoot和DecorView\"><a href=\"#ViewRoot和DecorView\" class=\"headerlink\" title=\"ViewRoot和DecorView\"></a>ViewRoot和DecorView</h1><h2 id=\"ViewRoot\"><a href=\"#ViewRoot\" class=\"headerlink\" title=\"ViewRoot\"></a>ViewRoot</h2><ul>\n<li>ViewRoot对应ViewRootImpl类，它是连接WindowManager和DecorView的纽带，View的三大流程均通过ViewRoot来完成。</li>\n<li>ActivityThread中，Activity创建完成后，会将DecorView添加到Window中，同时创建ViewRootImpl对象，并建立两者的关联。</li>\n</ul>\n<h2 id=\"DecorView\"><a href=\"#DecorView\" class=\"headerlink\" title=\"DecorView\"></a>DecorView</h2><ul>\n<li>DecorView作为顶级View，一般情况下它内部包含一个竖直方向的LinearLayout，在这个LinearLayout里面有上下两个部分（具体情况和Android版本及主体有关），上面的是标题栏，下面的是内容栏。在Activity中通过setContentView所设置的布局文件其实就是被加到内容栏之中的，而内容栏的id是content，在代码中可以通过ViewGroup content = （ViewGroup)findViewById(R.android.id.content)来得到content对应的layout。</li>\n<li>DecorView其实是一个FrameLayout，View层的事件都先经过DecorView，然后才传递给我们的View。</li>\n</ul>\n<h1 id=\"MeasureSpec\"><a href=\"#MeasureSpec\" class=\"headerlink\" title=\"MeasureSpec\"></a>MeasureSpec</h1><p>在测量过程中，系统会将<strong>View的LayoutParams根据父容器所施加的规则转换成对应的MeasureSpec，然后再根据这个MeasureSpec来测量出View的宽和高。</strong>测量出来的宽和高不一定等于View最终的宽和高。</p>\n<p>MeasureSpec将SpecMode和SpecSize打包成一个int值来避免过多的对象内存分配，高2位代表SpecMode，低30位代表SpecSize，SpecMode是指测量模式，而SpecSize是指在某种测量模式下的规格大小。<br>SpecMode有三类：</p>\n<ul>\n<li>UNSPECIFIED：父容器不对View有任何限制，要多大给多大，这种情况一般用于系统内部，表示一种测量状态</li>\n<li>EXACTLY：父容器已经检测出View所需要的精确大小，这个时候View的最终大小就是SpecSize所指定的值。它对应于LayoutParams中的match_parent和具体的数值这两种模式</li>\n<li>AT_MOST：父容器指定了一个可用大小即SpecSize，View的大小不能大于这个值，具体是什么值要看不同View的具体实现。它对应于LayoutParams中的wrap_content。</li>\n</ul>\n<h1 id=\"普通MeasureSpec的创建规则\"><a href=\"#普通MeasureSpec的创建规则\" class=\"headerlink\" title=\"普通MeasureSpec的创建规则\"></a>普通MeasureSpec的创建规则</h1><p><strong>对于普通View，其MeasureSpec由父容器的MeasureSpec和自身的LayoutParams来共同决定。</strong></p>\n<ul>\n<li>子View为精确宽高，无论父容器的MeasureSpec，子View的MeasureSpec都为精确值且遵循LayoutParams中的值。</li>\n<li>子View为match_parent时，如果父容器是精确模式，则子View也为精确模式且为父容器的剩余空间大小；如果父容器是最大模式，则子View也是最大模式且其大小不会超过父容器的剩余空间。</li>\n<li>子View为wrap_content时，无论父View是精确还是最大模式，子View的模式总是最大模式，且不会超过父容器的剩余空间。</li>\n</ul>\n<h1 id=\"View的工作流程\"><a href=\"#View的工作流程\" class=\"headerlink\" title=\"View的工作流程\"></a>View的工作流程</h1><h2 id=\"measure\"><a href=\"#measure\" class=\"headerlink\" title=\"measure\"></a>measure</h2><p>ViewGroup的measure方法会遍历每个子元素，并调用子元素内部的measure方法，measure源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">       setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),</div><div class=\"line\">               getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>注：</p>\n<ul>\n<li>getDefaultSize()返回MeasureSpec中的specSize，也就是View测量后的大小。</li>\n<li>getSuggestedMinimumWidth()，View如果没有背景，那么返回android:minWidth这个属性指定的值，这个值可以为0；如果设置了背景，则返回背景的最小宽度和minWidth中的<strong>最大值</strong>。</li>\n<li>getSuggestedMinimumHeight()，与getSuggestedMinimumWidth()类似。</li>\n<li>直接继承View的自定义控件需要重写onMeasure方法并设置wrap_content时的自身大小，否则在布局中使用wrap_content时就相当于使用match_parent。因为LayoutParams=wrap_content的情况下，MeasureSpec为AT_MOST，所以View的宽和高为父容器当前剩余的空间，这种效果与match_parent一致。<strong>具体处理方法要根据需求灵活决定。</strong></li>\n</ul>\n<h3 id=\"如何得到View的宽和高\"><a href=\"#如何得到View的宽和高\" class=\"headerlink\" title=\"如何得到View的宽和高\"></a>如何得到View的宽和高</h3><p>在Activity的onCreate、onStart、onResume方法中均无法正确得到某个View的宽/高信息，这是因为View的measure过程和Activity的生命周期方法不是同步执行的，因此无法保证Activity执行了onCreate、onStart、onResume时某个View就已经测量完毕了，如果View还没有测量完毕，那么获得的宽/高就是0。</p>\n<p>可以通过如下四个方法来解决这个问题：</p>\n<ul>\n<li>Activity或者View的onWindowFocusChanged方法（注意该方法会在Activity Pause和resume时被多次调用）</li>\n<li>view.post(new Runnable( {@Overidde public void run(){})})，在run方法中获取。</li>\n<li>ViewTreeObserver中的onGlobalLayoutListener中。</li>\n<li>手动调用View的measure方法。<br>示例代码请参考原书P190页</li>\n</ul>\n<h2 id=\"layout\"><a href=\"#layout\" class=\"headerlink\" title=\"layout\"></a>layout</h2><p>layout的作用是用来确定子视图在父视图中的位置。源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">layout</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">int</span> oldL = mLeft;  </div><div class=\"line\">    <span class=\"keyword\">int</span> oldT = mTop;  </div><div class=\"line\">    <span class=\"keyword\">int</span> oldB = mBottom;  </div><div class=\"line\">    <span class=\"keyword\">int</span> oldR = mRight;  </div><div class=\"line\">    <span class=\"keyword\">boolean</span> changed = setFrame(l, t, r, b);  </div><div class=\"line\">    <span class=\"keyword\">if</span> (changed || (mPrivateFlags &amp; LAYOUT_REQUIRED) == LAYOUT_REQUIRED) &#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (ViewDebug.TRACE_HIERARCHY) &#123;  </div><div class=\"line\">            ViewDebug.trace(<span class=\"keyword\">this</span>, ViewDebug.HierarchyTraceType.ON_LAYOUT);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        onLayout(changed, l, t, r, b);  </div><div class=\"line\">        mPrivateFlags &amp;= ~LAYOUT_REQUIRED;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (mOnLayoutChangeListeners != <span class=\"keyword\">null</span>) &#123;  </div><div class=\"line\">            ArrayList&lt;OnLayoutChangeListener&gt; listenersCopy =  </div><div class=\"line\">                    (ArrayList&lt;OnLayoutChangeListener&gt;) mOnLayoutChangeListeners.clone();  </div><div class=\"line\">            <span class=\"keyword\">int</span> numListeners = listenersCopy.size();  </div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numListeners; ++i) &#123;  </div><div class=\"line\">                listenersCopy.get(i).onLayoutChange(<span class=\"keyword\">this</span>, l, t, r, b, oldL, oldT, oldR, oldB);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    mPrivateFlags &amp;= ~FORCE_LAYOUT;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过setFrame()确定四个顶点的位置，进而确定View在父容器中的位置。</p>\n<p>在View的默认实现中，View的测量宽/高和最终宽/高是相等的，只不过测量宽/高形成于View的measure过程，而最终宽/高形成于View的layout过程，即两者的赋值时机不同，测量宽/高的赋值时机稍微早一些。多数情况下可以认为View的测量宽/高就等于最终的宽/高，但对于在View的layout中改变了View的left、top、right、bottom四个属性时，得出的测量宽/高有可能和最终的宽/高不一致。</p>\n<h2 id=\"draw\"><a href=\"#draw\" class=\"headerlink\" title=\"draw\"></a>draw</h2><p>draw的过程很简单主要有以下几步：</p>\n<ul>\n<li>绘制背景(background.draw)</li>\n<li>绘制自己(onDraw)</li>\n<li>绘制children(dispatchDraw)</li>\n<li>绘制装饰(onDrawScrollBars)。</li>\n</ul>\n<p>源码如下<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void draw(Canvas canvas) &#123;  </div><div class=\"line\">  </div><div class=\"line\">        / * Draw traversal performs several drawing steps which must be executed  </div><div class=\"line\">         * in the appropriate order:  </div><div class=\"line\">         *  </div><div class=\"line\">         *      1. Draw the background if need  </div><div class=\"line\">         *      2. If necessary, save the canvas' layers to prepare for fading  </div><div class=\"line\">         *      3. Draw view's content  </div><div class=\"line\">         *      4. Draw children (dispatchDraw)  </div><div class=\"line\">         *      5. If necessary, draw the fading edges and restore layers  </div><div class=\"line\">         *      6. Draw decorations (scrollbars for instance)  </div><div class=\"line\">         */  </div><div class=\"line\">  </div><div class=\"line\">       //Step 1, draw the background, if needed  </div><div class=\"line\">        if (!dirtyOpaque) &#123;  </div><div class=\"line\">            drawBackground(canvas);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">  </div><div class=\"line\">         // skip step 2 &amp; 5 if possible (common case)  </div><div class=\"line\">        final int viewFlags = mViewFlags;  </div><div class=\"line\">        if (!verticalEdges &amp;&amp; !horizontalEdges) &#123;  </div><div class=\"line\">            // Step 3, draw the content  </div><div class=\"line\">            if (!dirtyOpaque) onDraw(canvas);  </div><div class=\"line\">  </div><div class=\"line\">            // Step 4, draw the children  </div><div class=\"line\">            dispatchDraw(canvas);  </div><div class=\"line\">  </div><div class=\"line\">            // Step 6, draw decorations (scrollbars)  </div><div class=\"line\">            onDrawScrollBars(canvas);  </div><div class=\"line\">  </div><div class=\"line\">            if (mOverlay != null &amp;&amp; !mOverlay.isEmpty()) &#123;  </div><div class=\"line\">                mOverlay.getOverlayView().dispatchDraw(canvas);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">  </div><div class=\"line\">            // we're done...  </div><div class=\"line\">            return;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">  </div><div class=\"line\">        // Step 2, save the canvas' layers  </div><div class=\"line\">        ...  </div><div class=\"line\">  </div><div class=\"line\">        // Step 3, draw the content  </div><div class=\"line\">        if (!dirtyOpaque)   </div><div class=\"line\">            onDraw(canvas);  </div><div class=\"line\">  </div><div class=\"line\">        // Step 4, draw the children  </div><div class=\"line\">        dispatchDraw(canvas);  </div><div class=\"line\">  </div><div class=\"line\">        // Step 5, draw the fade effect and restore layers  </div><div class=\"line\">  </div><div class=\"line\">        // Step 6, draw decorations (scrollbars)  </div><div class=\"line\">        onDrawScrollBars(canvas);  </div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>注：</p>\n<ul>\n<li>View有一个特殊的方法setWillNotDraw，如果一个View不需要绘制任何内容，设置这个标记位true后，系统会进行优化。默认情况下，View没有启用这个优化标记位，但是ViewGroup会默认启用这个优化标记位。</li>\n<li>这个标记位对实际开发的意义是：如果自定义控件继承于ViewGroup并且本身不具备绘制功能时，就可以开启这个标记位从而便于系统进行后续的优化。当明确知道一个ViewGroup需要通过onDraw来绘制内容时，需要显示地关闭WILL_NOT_DRAW这个标记位。</li>\n</ul>\n<p>欢迎转载，转载请注明出处<a href=\"http://sparkyuan.me/\" target=\"_blank\" rel=\"external\">http://sparkyuan.me/</a></p>\n","excerpt":"<p>View的绘制流程是从ViewRoot的performTraversals方法开始的，它经过measure、layout和draw三个过程才能最终将一个View绘制出来，其中measure用来测量View的宽和高，layout用来确定View在父容器中的放置位置，而draw则负责将View绘制在屏幕上。<br>","more":"</p>\n<h1 id=\"ViewRoot和DecorView\"><a href=\"#ViewRoot和DecorView\" class=\"headerlink\" title=\"ViewRoot和DecorView\"></a>ViewRoot和DecorView</h1><h2 id=\"ViewRoot\"><a href=\"#ViewRoot\" class=\"headerlink\" title=\"ViewRoot\"></a>ViewRoot</h2><ul>\n<li>ViewRoot对应ViewRootImpl类，它是连接WindowManager和DecorView的纽带，View的三大流程均通过ViewRoot来完成。</li>\n<li>ActivityThread中，Activity创建完成后，会将DecorView添加到Window中，同时创建ViewRootImpl对象，并建立两者的关联。</li>\n</ul>\n<h2 id=\"DecorView\"><a href=\"#DecorView\" class=\"headerlink\" title=\"DecorView\"></a>DecorView</h2><ul>\n<li>DecorView作为顶级View，一般情况下它内部包含一个竖直方向的LinearLayout，在这个LinearLayout里面有上下两个部分（具体情况和Android版本及主体有关），上面的是标题栏，下面的是内容栏。在Activity中通过setContentView所设置的布局文件其实就是被加到内容栏之中的，而内容栏的id是content，在代码中可以通过ViewGroup content = （ViewGroup)findViewById(R.android.id.content)来得到content对应的layout。</li>\n<li>DecorView其实是一个FrameLayout，View层的事件都先经过DecorView，然后才传递给我们的View。</li>\n</ul>\n<h1 id=\"MeasureSpec\"><a href=\"#MeasureSpec\" class=\"headerlink\" title=\"MeasureSpec\"></a>MeasureSpec</h1><p>在测量过程中，系统会将<strong>View的LayoutParams根据父容器所施加的规则转换成对应的MeasureSpec，然后再根据这个MeasureSpec来测量出View的宽和高。</strong>测量出来的宽和高不一定等于View最终的宽和高。</p>\n<p>MeasureSpec将SpecMode和SpecSize打包成一个int值来避免过多的对象内存分配，高2位代表SpecMode，低30位代表SpecSize，SpecMode是指测量模式，而SpecSize是指在某种测量模式下的规格大小。<br>SpecMode有三类：</p>\n<ul>\n<li>UNSPECIFIED：父容器不对View有任何限制，要多大给多大，这种情况一般用于系统内部，表示一种测量状态</li>\n<li>EXACTLY：父容器已经检测出View所需要的精确大小，这个时候View的最终大小就是SpecSize所指定的值。它对应于LayoutParams中的match_parent和具体的数值这两种模式</li>\n<li>AT_MOST：父容器指定了一个可用大小即SpecSize，View的大小不能大于这个值，具体是什么值要看不同View的具体实现。它对应于LayoutParams中的wrap_content。</li>\n</ul>\n<h1 id=\"普通MeasureSpec的创建规则\"><a href=\"#普通MeasureSpec的创建规则\" class=\"headerlink\" title=\"普通MeasureSpec的创建规则\"></a>普通MeasureSpec的创建规则</h1><p><strong>对于普通View，其MeasureSpec由父容器的MeasureSpec和自身的LayoutParams来共同决定。</strong></p>\n<ul>\n<li>子View为精确宽高，无论父容器的MeasureSpec，子View的MeasureSpec都为精确值且遵循LayoutParams中的值。</li>\n<li>子View为match_parent时，如果父容器是精确模式，则子View也为精确模式且为父容器的剩余空间大小；如果父容器是最大模式，则子View也是最大模式且其大小不会超过父容器的剩余空间。</li>\n<li>子View为wrap_content时，无论父View是精确还是最大模式，子View的模式总是最大模式，且不会超过父容器的剩余空间。</li>\n</ul>\n<h1 id=\"View的工作流程\"><a href=\"#View的工作流程\" class=\"headerlink\" title=\"View的工作流程\"></a>View的工作流程</h1><h2 id=\"measure\"><a href=\"#measure\" class=\"headerlink\" title=\"measure\"></a>measure</h2><p>ViewGroup的measure方法会遍历每个子元素，并调用子元素内部的measure方法，measure源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">       setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),</div><div class=\"line\">               getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure></p>\n<p>注：</p>\n<ul>\n<li>getDefaultSize()返回MeasureSpec中的specSize，也就是View测量后的大小。</li>\n<li>getSuggestedMinimumWidth()，View如果没有背景，那么返回android:minWidth这个属性指定的值，这个值可以为0；如果设置了背景，则返回背景的最小宽度和minWidth中的<strong>最大值</strong>。</li>\n<li>getSuggestedMinimumHeight()，与getSuggestedMinimumWidth()类似。</li>\n<li>直接继承View的自定义控件需要重写onMeasure方法并设置wrap_content时的自身大小，否则在布局中使用wrap_content时就相当于使用match_parent。因为LayoutParams=wrap_content的情况下，MeasureSpec为AT_MOST，所以View的宽和高为父容器当前剩余的空间，这种效果与match_parent一致。<strong>具体处理方法要根据需求灵活决定。</strong></li>\n</ul>\n<h3 id=\"如何得到View的宽和高\"><a href=\"#如何得到View的宽和高\" class=\"headerlink\" title=\"如何得到View的宽和高\"></a>如何得到View的宽和高</h3><p>在Activity的onCreate、onStart、onResume方法中均无法正确得到某个View的宽/高信息，这是因为View的measure过程和Activity的生命周期方法不是同步执行的，因此无法保证Activity执行了onCreate、onStart、onResume时某个View就已经测量完毕了，如果View还没有测量完毕，那么获得的宽/高就是0。</p>\n<p>可以通过如下四个方法来解决这个问题：</p>\n<ul>\n<li>Activity或者View的onWindowFocusChanged方法（注意该方法会在Activity Pause和resume时被多次调用）</li>\n<li>view.post(new Runnable( {@Overidde public void run(){})})，在run方法中获取。</li>\n<li>ViewTreeObserver中的onGlobalLayoutListener中。</li>\n<li>手动调用View的measure方法。<br>示例代码请参考原书P190页</li>\n</ul>\n<h2 id=\"layout\"><a href=\"#layout\" class=\"headerlink\" title=\"layout\"></a>layout</h2><p>layout的作用是用来确定子视图在父视图中的位置。源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">layout</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;  </div><div class=\"line\">    <span class=\"keyword\">int</span> oldL = mLeft;  </div><div class=\"line\">    <span class=\"keyword\">int</span> oldT = mTop;  </div><div class=\"line\">    <span class=\"keyword\">int</span> oldB = mBottom;  </div><div class=\"line\">    <span class=\"keyword\">int</span> oldR = mRight;  </div><div class=\"line\">    <span class=\"keyword\">boolean</span> changed = setFrame(l, t, r, b);  </div><div class=\"line\">    <span class=\"keyword\">if</span> (changed || (mPrivateFlags &amp; LAYOUT_REQUIRED) == LAYOUT_REQUIRED) &#123;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (ViewDebug.TRACE_HIERARCHY) &#123;  </div><div class=\"line\">            ViewDebug.trace(<span class=\"keyword\">this</span>, ViewDebug.HierarchyTraceType.ON_LAYOUT);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">        onLayout(changed, l, t, r, b);  </div><div class=\"line\">        mPrivateFlags &amp;= ~LAYOUT_REQUIRED;  </div><div class=\"line\">        <span class=\"keyword\">if</span> (mOnLayoutChangeListeners != <span class=\"keyword\">null</span>) &#123;  </div><div class=\"line\">            ArrayList&lt;OnLayoutChangeListener&gt; listenersCopy =  </div><div class=\"line\">                    (ArrayList&lt;OnLayoutChangeListener&gt;) mOnLayoutChangeListeners.clone();  </div><div class=\"line\">            <span class=\"keyword\">int</span> numListeners = listenersCopy.size();  </div><div class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numListeners; ++i) &#123;  </div><div class=\"line\">                listenersCopy.get(i).onLayoutChange(<span class=\"keyword\">this</span>, l, t, r, b, oldL, oldT, oldR, oldB);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">    &#125;  </div><div class=\"line\">    mPrivateFlags &amp;= ~FORCE_LAYOUT;  </div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>通过setFrame()确定四个顶点的位置，进而确定View在父容器中的位置。</p>\n<p>在View的默认实现中，View的测量宽/高和最终宽/高是相等的，只不过测量宽/高形成于View的measure过程，而最终宽/高形成于View的layout过程，即两者的赋值时机不同，测量宽/高的赋值时机稍微早一些。多数情况下可以认为View的测量宽/高就等于最终的宽/高，但对于在View的layout中改变了View的left、top、right、bottom四个属性时，得出的测量宽/高有可能和最终的宽/高不一致。</p>\n<h2 id=\"draw\"><a href=\"#draw\" class=\"headerlink\" title=\"draw\"></a>draw</h2><p>draw的过程很简单主要有以下几步：</p>\n<ul>\n<li>绘制背景(background.draw)</li>\n<li>绘制自己(onDraw)</li>\n<li>绘制children(dispatchDraw)</li>\n<li>绘制装饰(onDrawScrollBars)。</li>\n</ul>\n<p>源码如下<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\">public void draw(Canvas canvas) &#123;  </div><div class=\"line\">  </div><div class=\"line\">        / * Draw traversal performs several drawing steps which must be executed  </div><div class=\"line\">         * in the appropriate order:  </div><div class=\"line\">         *  </div><div class=\"line\">         *      1. Draw the background if need  </div><div class=\"line\">         *      2. If necessary, save the canvas' layers to prepare for fading  </div><div class=\"line\">         *      3. Draw view's content  </div><div class=\"line\">         *      4. Draw children (dispatchDraw)  </div><div class=\"line\">         *      5. If necessary, draw the fading edges and restore layers  </div><div class=\"line\">         *      6. Draw decorations (scrollbars for instance)  </div><div class=\"line\">         */  </div><div class=\"line\">  </div><div class=\"line\">       //Step 1, draw the background, if needed  </div><div class=\"line\">        if (!dirtyOpaque) &#123;  </div><div class=\"line\">            drawBackground(canvas);  </div><div class=\"line\">        &#125;  </div><div class=\"line\">  </div><div class=\"line\">         // skip step 2 &amp; 5 if possible (common case)  </div><div class=\"line\">        final int viewFlags = mViewFlags;  </div><div class=\"line\">        if (!verticalEdges &amp;&amp; !horizontalEdges) &#123;  </div><div class=\"line\">            // Step 3, draw the content  </div><div class=\"line\">            if (!dirtyOpaque) onDraw(canvas);  </div><div class=\"line\">  </div><div class=\"line\">            // Step 4, draw the children  </div><div class=\"line\">            dispatchDraw(canvas);  </div><div class=\"line\">  </div><div class=\"line\">            // Step 6, draw decorations (scrollbars)  </div><div class=\"line\">            onDrawScrollBars(canvas);  </div><div class=\"line\">  </div><div class=\"line\">            if (mOverlay != null &amp;&amp; !mOverlay.isEmpty()) &#123;  </div><div class=\"line\">                mOverlay.getOverlayView().dispatchDraw(canvas);  </div><div class=\"line\">            &#125;  </div><div class=\"line\">  </div><div class=\"line\">            // we're done...  </div><div class=\"line\">            return;  </div><div class=\"line\">        &#125;  </div><div class=\"line\">  </div><div class=\"line\">        // Step 2, save the canvas' layers  </div><div class=\"line\">        ...  </div><div class=\"line\">  </div><div class=\"line\">        // Step 3, draw the content  </div><div class=\"line\">        if (!dirtyOpaque)   </div><div class=\"line\">            onDraw(canvas);  </div><div class=\"line\">  </div><div class=\"line\">        // Step 4, draw the children  </div><div class=\"line\">        dispatchDraw(canvas);  </div><div class=\"line\">  </div><div class=\"line\">        // Step 5, draw the fade effect and restore layers  </div><div class=\"line\">  </div><div class=\"line\">        // Step 6, draw decorations (scrollbars)  </div><div class=\"line\">        onDrawScrollBars(canvas);  </div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>注：</p>\n<ul>\n<li>View有一个特殊的方法setWillNotDraw，如果一个View不需要绘制任何内容，设置这个标记位true后，系统会进行优化。默认情况下，View没有启用这个优化标记位，但是ViewGroup会默认启用这个优化标记位。</li>\n<li>这个标记位对实际开发的意义是：如果自定义控件继承于ViewGroup并且本身不具备绘制功能时，就可以开启这个标记位从而便于系统进行后续的优化。当明确知道一个ViewGroup需要通过onDraw来绘制内容时，需要显示地关闭WILL_NOT_DRAW这个标记位。</li>\n</ul>\n<p>欢迎转载，转载请注明出处<a href=\"http://sparkyuan.me/\">http://sparkyuan.me/</a></p>"},{"title":"Windows和WindowManager","date":"2016-03-11T12:46:25.000Z","_content":"Window表示一个窗口的概念，在某些特殊的时候，比如你需要在桌面或者锁屏上显示一些类似悬浮窗的东西时候就需要用到Window。Window是一个抽象类，Window的实现类是PhoneWindow。Window的具体实现位于WindowManagerService中，WindowManager和WindowManagerService的交互是一个IPC过程。Android中所有的视图都是通过Window来呈现的，不管是Activity、Dialog还是Toast，他们的视图实际上都是附加在Window上的。\n<!-- more -->\n\n#一个悬浮窗的例子\n\n点击Button按钮，将一个ImageView添加到坐标为（100,300）的位置上，并且可以随手拖动的。\n\n![示例](http://img.blog.csdn.net/20160310205856256)\n\n下面是这一段的源码，展示了如何使用WindowManager添加一个Window。\n\n```java\npublic class TestActivity extends Activity implements OnTouchListener {\n\n    private static final String TAG = \"TestActivity\";\n\n    private Button mCreateWindowButton;\n\n    private ImageView mImageView;\n    private WindowManager.LayoutParams mLayoutParams;\n    private WindowManager mWindowManager;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_test);\n        initView();\n    }\n\n    private void initView() {\n        mCreateWindowButton = (Button) findViewById(R.id.button1);\n        mWindowManager = (WindowManager) getSystemService(Context.WINDOW_SERVICE);\n    }\n\n    public void onButtonClick(View v) {\n\n        if (v == mCreateWindowButton) {\n            mImageView = new ImageView(this);\n            mImageView.setBackgroundResource(R.drawable.ic_launcher);\n            mLayoutParams = new WindowManager.LayoutParams(\n                    LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT, 0, 0,\n                    PixelFormat.TRANSPARENT);\n            mLayoutParams.flags = LayoutParams.FLAG_NOT_TOUCH_MODAL\n                    | LayoutParams.FLAG_NOT_FOCUSABLE\n                    | LayoutParams.FLAG_SHOW_WHEN_LOCKED;\n            mLayoutParams.type = LayoutParams.TYPE_SYSTEM_ERROR;\n            mLayoutParams.gravity = Gravity.TOP | Gravity.LEFT;\n            mLayoutParams.x = 100;\n            mLayoutParams.y = 300;\n            mImageView.setOnTouchListener(this);\n            mWindowManager.addView(mImageView, mLayoutParams);\n        }\n    }\n\n    @Override\n    public boolean onTouch(View v, MotionEvent event) {\n        int rawX = (int) event.getRawX();\n        int rawY = (int) event.getRawY();\n        int x = (int) event.getX();\n        int y = (int) event.getY();\n\n        switch (event.getAction()) {\n        case MotionEvent.ACTION_DOWN: {\n            break;\n        }\n        case MotionEvent.ACTION_MOVE: {\n            Log.d(TAG, \"onTouch: rawX \" + rawX);\n            Log.d(TAG, \"onTouch: rawY \" + rawY);\n            mLayoutParams.x = rawX;\n            mLayoutParams.y = rawY;\n            mWindowManager.updateViewLayout(mImageView, mLayoutParams);\n            break;\n        }\n        case MotionEvent.ACTION_UP: {\n            break;\n        }\n        default:\n            break;\n        }\n        return false;\n    }\n\n    @Override\n    protected void onDestroy() {\n        try {\n            mWindowManager.removeView(mImageView);\n        } catch (IllegalArgumentException e) {\n            e.printStackTrace();\n        }\n        super.onDestroy();\n    }\n}\n```\n\n\n#WindowManager.LayoutParams的Flag和Type\n##FLAG\n- FLAG_NOT_FOCUSABLE，当前Window不获取焦点，也不接收各种输入事件，会同时启用FLAG_NOT_TOUCH_MODAL，事件会传递给下层具有焦点的Window。\n- FLAG_NOT_TOUCH_MODAL，当前Window区域外的单击事件传递给底层，区域内的单击事件自己处理，一般都需要开启。 \n- FLAG_SHOW_WHEN_LOCKED，可以让Window显示在锁屏界面上。\n\n##Type\nType表示Window的类型，有应用Window、子Window和系统Window。\n- 应用Window，一般对应一个Activity。层级范围1～99。 \n- 子Window，不能单独存在，需要特定的父Window，比如一般的Dialog。层级范围1000～1999。\n- 系统Window，需要权限声明，比如Toast。层级范围2000～2999。\n\n一般可以选用WindowManager.LayoutParams.TYPE_SYSTEM_ERROR或者TYPE_SYSTEM_OVERLAY同时声明权限。使用WindowManager.LayoutParams.TYPE_SYSTEM_ERROR时，同时声明<uses-permission android:name=\"android.permission.SYSTEM_ALERT_WINDOW\" />\n\n#注\n- Window并不实际存在，以View的形式存在。每个Window对应着一个View和ViewRootImpl，Window和View通过ViewRootImpl建立联系。所以在实际使用中其实我们并不能访问到真正的Window，而只能通过WindowManager。\n- WindowManager常用的三个功能：addView，updateViewLayout，removeView\n- 别忘了onDestory()中的mWindowManager.removeView(mImageView)\n","source":"_posts/Windows和WindowManager.md","raw":"title: Windows和WindowManager\ndate: 2016/3/11 20:46:25\ncategories:\n- Android\n- Android开发艺术探索笔记\ntags:\n- Android\n- Window\n- WindowManager\n---\nWindow表示一个窗口的概念，在某些特殊的时候，比如你需要在桌面或者锁屏上显示一些类似悬浮窗的东西时候就需要用到Window。Window是一个抽象类，Window的实现类是PhoneWindow。Window的具体实现位于WindowManagerService中，WindowManager和WindowManagerService的交互是一个IPC过程。Android中所有的视图都是通过Window来呈现的，不管是Activity、Dialog还是Toast，他们的视图实际上都是附加在Window上的。\n<!-- more -->\n\n#一个悬浮窗的例子\n\n点击Button按钮，将一个ImageView添加到坐标为（100,300）的位置上，并且可以随手拖动的。\n\n![示例](http://img.blog.csdn.net/20160310205856256)\n\n下面是这一段的源码，展示了如何使用WindowManager添加一个Window。\n\n```java\npublic class TestActivity extends Activity implements OnTouchListener {\n\n    private static final String TAG = \"TestActivity\";\n\n    private Button mCreateWindowButton;\n\n    private ImageView mImageView;\n    private WindowManager.LayoutParams mLayoutParams;\n    private WindowManager mWindowManager;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_test);\n        initView();\n    }\n\n    private void initView() {\n        mCreateWindowButton = (Button) findViewById(R.id.button1);\n        mWindowManager = (WindowManager) getSystemService(Context.WINDOW_SERVICE);\n    }\n\n    public void onButtonClick(View v) {\n\n        if (v == mCreateWindowButton) {\n            mImageView = new ImageView(this);\n            mImageView.setBackgroundResource(R.drawable.ic_launcher);\n            mLayoutParams = new WindowManager.LayoutParams(\n                    LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT, 0, 0,\n                    PixelFormat.TRANSPARENT);\n            mLayoutParams.flags = LayoutParams.FLAG_NOT_TOUCH_MODAL\n                    | LayoutParams.FLAG_NOT_FOCUSABLE\n                    | LayoutParams.FLAG_SHOW_WHEN_LOCKED;\n            mLayoutParams.type = LayoutParams.TYPE_SYSTEM_ERROR;\n            mLayoutParams.gravity = Gravity.TOP | Gravity.LEFT;\n            mLayoutParams.x = 100;\n            mLayoutParams.y = 300;\n            mImageView.setOnTouchListener(this);\n            mWindowManager.addView(mImageView, mLayoutParams);\n        }\n    }\n\n    @Override\n    public boolean onTouch(View v, MotionEvent event) {\n        int rawX = (int) event.getRawX();\n        int rawY = (int) event.getRawY();\n        int x = (int) event.getX();\n        int y = (int) event.getY();\n\n        switch (event.getAction()) {\n        case MotionEvent.ACTION_DOWN: {\n            break;\n        }\n        case MotionEvent.ACTION_MOVE: {\n            Log.d(TAG, \"onTouch: rawX \" + rawX);\n            Log.d(TAG, \"onTouch: rawY \" + rawY);\n            mLayoutParams.x = rawX;\n            mLayoutParams.y = rawY;\n            mWindowManager.updateViewLayout(mImageView, mLayoutParams);\n            break;\n        }\n        case MotionEvent.ACTION_UP: {\n            break;\n        }\n        default:\n            break;\n        }\n        return false;\n    }\n\n    @Override\n    protected void onDestroy() {\n        try {\n            mWindowManager.removeView(mImageView);\n        } catch (IllegalArgumentException e) {\n            e.printStackTrace();\n        }\n        super.onDestroy();\n    }\n}\n```\n\n\n#WindowManager.LayoutParams的Flag和Type\n##FLAG\n- FLAG_NOT_FOCUSABLE，当前Window不获取焦点，也不接收各种输入事件，会同时启用FLAG_NOT_TOUCH_MODAL，事件会传递给下层具有焦点的Window。\n- FLAG_NOT_TOUCH_MODAL，当前Window区域外的单击事件传递给底层，区域内的单击事件自己处理，一般都需要开启。 \n- FLAG_SHOW_WHEN_LOCKED，可以让Window显示在锁屏界面上。\n\n##Type\nType表示Window的类型，有应用Window、子Window和系统Window。\n- 应用Window，一般对应一个Activity。层级范围1～99。 \n- 子Window，不能单独存在，需要特定的父Window，比如一般的Dialog。层级范围1000～1999。\n- 系统Window，需要权限声明，比如Toast。层级范围2000～2999。\n\n一般可以选用WindowManager.LayoutParams.TYPE_SYSTEM_ERROR或者TYPE_SYSTEM_OVERLAY同时声明权限。使用WindowManager.LayoutParams.TYPE_SYSTEM_ERROR时，同时声明<uses-permission android:name=\"android.permission.SYSTEM_ALERT_WINDOW\" />\n\n#注\n- Window并不实际存在，以View的形式存在。每个Window对应着一个View和ViewRootImpl，Window和View通过ViewRootImpl建立联系。所以在实际使用中其实我们并不能访问到真正的Window，而只能通过WindowManager。\n- WindowManager常用的三个功能：addView，updateViewLayout，removeView\n- 别忘了onDestory()中的mWindowManager.removeView(mImageView)\n","slug":"Windows和WindowManager","published":1,"updated":"2016-12-28T12:14:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix8xu712000ywwv6a4sva0it","content":"<p>Window表示一个窗口的概念，在某些特殊的时候，比如你需要在桌面或者锁屏上显示一些类似悬浮窗的东西时候就需要用到Window。Window是一个抽象类，Window的实现类是PhoneWindow。Window的具体实现位于WindowManagerService中，WindowManager和WindowManagerService的交互是一个IPC过程。Android中所有的视图都是通过Window来呈现的，不管是Activity、Dialog还是Toast，他们的视图实际上都是附加在Window上的。<br><a id=\"more\"></a></p>\n<p>#一个悬浮窗的例子</p>\n<p>点击Button按钮，将一个ImageView添加到坐标为（100,300）的位置上，并且可以随手拖动的。</p>\n<p><img src=\"http://img.blog.csdn.net/20160310205856256\" alt=\"示例\"></p>\n<p>下面是这一段的源码，展示了如何使用WindowManager添加一个Window。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> <span class=\"keyword\">implements</span> <span class=\"title\">OnTouchListener</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"TestActivity\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Button mCreateWindowButton;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ImageView mImageView;</div><div class=\"line\">    <span class=\"keyword\">private</span> WindowManager.LayoutParams mLayoutParams;</div><div class=\"line\">    <span class=\"keyword\">private</span> WindowManager mWindowManager;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_test);</div><div class=\"line\">        initView();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initView</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mCreateWindowButton = (Button) findViewById(R.id.button1);</div><div class=\"line\">        mWindowManager = (WindowManager) getSystemService(Context.WINDOW_SERVICE);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onButtonClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (v == mCreateWindowButton) &#123;</div><div class=\"line\">            mImageView = <span class=\"keyword\">new</span> ImageView(<span class=\"keyword\">this</span>);</div><div class=\"line\">            mImageView.setBackgroundResource(R.drawable.ic_launcher);</div><div class=\"line\">            mLayoutParams = <span class=\"keyword\">new</span> WindowManager.LayoutParams(</div><div class=\"line\">                    LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</div><div class=\"line\">                    PixelFormat.TRANSPARENT);</div><div class=\"line\">            mLayoutParams.flags = LayoutParams.FLAG_NOT_TOUCH_MODAL</div><div class=\"line\">                    | LayoutParams.FLAG_NOT_FOCUSABLE</div><div class=\"line\">                    | LayoutParams.FLAG_SHOW_WHEN_LOCKED;</div><div class=\"line\">            mLayoutParams.type = LayoutParams.TYPE_SYSTEM_ERROR;</div><div class=\"line\">            mLayoutParams.gravity = Gravity.TOP | Gravity.LEFT;</div><div class=\"line\">            mLayoutParams.x = <span class=\"number\">100</span>;</div><div class=\"line\">            mLayoutParams.y = <span class=\"number\">300</span>;</div><div class=\"line\">            mImageView.setOnTouchListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">            mWindowManager.addView(mImageView, mLayoutParams);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouch</span><span class=\"params\">(View v, MotionEvent event)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> rawX = (<span class=\"keyword\">int</span>) event.getRawX();</div><div class=\"line\">        <span class=\"keyword\">int</span> rawY = (<span class=\"keyword\">int</span>) event.getRawY();</div><div class=\"line\">        <span class=\"keyword\">int</span> x = (<span class=\"keyword\">int</span>) event.getX();</div><div class=\"line\">        <span class=\"keyword\">int</span> y = (<span class=\"keyword\">int</span>) event.getY();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">switch</span> (event.getAction()) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN: &#123;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE: &#123;</div><div class=\"line\">            Log.d(TAG, <span class=\"string\">\"onTouch: rawX \"</span> + rawX);</div><div class=\"line\">            Log.d(TAG, <span class=\"string\">\"onTouch: rawY \"</span> + rawY);</div><div class=\"line\">            mLayoutParams.x = rawX;</div><div class=\"line\">            mLayoutParams.y = rawY;</div><div class=\"line\">            mWindowManager.updateViewLayout(mImageView, mLayoutParams);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_UP: &#123;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            mWindowManager.removeView(mImageView);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalArgumentException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>#WindowManager.LayoutParams的Flag和Type</p>\n<p>##FLAG</p>\n<ul>\n<li>FLAG_NOT_FOCUSABLE，当前Window不获取焦点，也不接收各种输入事件，会同时启用FLAG_NOT_TOUCH_MODAL，事件会传递给下层具有焦点的Window。</li>\n<li>FLAG_NOT_TOUCH_MODAL，当前Window区域外的单击事件传递给底层，区域内的单击事件自己处理，一般都需要开启。 </li>\n<li>FLAG_SHOW_WHEN_LOCKED，可以让Window显示在锁屏界面上。</li>\n</ul>\n<p>##Type<br>Type表示Window的类型，有应用Window、子Window和系统Window。</p>\n<ul>\n<li>应用Window，一般对应一个Activity。层级范围1～99。 </li>\n<li>子Window，不能单独存在，需要特定的父Window，比如一般的Dialog。层级范围1000～1999。</li>\n<li>系统Window，需要权限声明，比如Toast。层级范围2000～2999。</li>\n</ul>\n<p>一般可以选用WindowManager.LayoutParams.TYPE_SYSTEM_ERROR或者TYPE_SYSTEM_OVERLAY同时声明权限。使用WindowManager.LayoutParams.TYPE_SYSTEM_ERROR时，同时声明<uses-permission android:name=\"android.permission.SYSTEM_ALERT_WINDOW\"></uses-permission></p>\n<p>#注</p>\n<ul>\n<li>Window并不实际存在，以View的形式存在。每个Window对应着一个View和ViewRootImpl，Window和View通过ViewRootImpl建立联系。所以在实际使用中其实我们并不能访问到真正的Window，而只能通过WindowManager。</li>\n<li>WindowManager常用的三个功能：addView，updateViewLayout，removeView</li>\n<li>别忘了onDestory()中的mWindowManager.removeView(mImageView)</li>\n</ul>\n","excerpt":"<p>Window表示一个窗口的概念，在某些特殊的时候，比如你需要在桌面或者锁屏上显示一些类似悬浮窗的东西时候就需要用到Window。Window是一个抽象类，Window的实现类是PhoneWindow。Window的具体实现位于WindowManagerService中，WindowManager和WindowManagerService的交互是一个IPC过程。Android中所有的视图都是通过Window来呈现的，不管是Activity、Dialog还是Toast，他们的视图实际上都是附加在Window上的。<br>","more":"</p>\n<p>#一个悬浮窗的例子</p>\n<p>点击Button按钮，将一个ImageView添加到坐标为（100,300）的位置上，并且可以随手拖动的。</p>\n<p><img src=\"http://img.blog.csdn.net/20160310205856256\" alt=\"示例\"></p>\n<p>下面是这一段的源码，展示了如何使用WindowManager添加一个Window。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> <span class=\"keyword\">implements</span> <span class=\"title\">OnTouchListener</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"TestActivity\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> Button mCreateWindowButton;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> ImageView mImageView;</div><div class=\"line\">    <span class=\"keyword\">private</span> WindowManager.LayoutParams mLayoutParams;</div><div class=\"line\">    <span class=\"keyword\">private</span> WindowManager mWindowManager;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</div><div class=\"line\">        setContentView(R.layout.activity_test);</div><div class=\"line\">        initView();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initView</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mCreateWindowButton = (Button) findViewById(R.id.button1);</div><div class=\"line\">        mWindowManager = (WindowManager) getSystemService(Context.WINDOW_SERVICE);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onButtonClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">if</span> (v == mCreateWindowButton) &#123;</div><div class=\"line\">            mImageView = <span class=\"keyword\">new</span> ImageView(<span class=\"keyword\">this</span>);</div><div class=\"line\">            mImageView.setBackgroundResource(R.drawable.ic_launcher);</div><div class=\"line\">            mLayoutParams = <span class=\"keyword\">new</span> WindowManager.LayoutParams(</div><div class=\"line\">                    LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</div><div class=\"line\">                    PixelFormat.TRANSPARENT);</div><div class=\"line\">            mLayoutParams.flags = LayoutParams.FLAG_NOT_TOUCH_MODAL</div><div class=\"line\">                    | LayoutParams.FLAG_NOT_FOCUSABLE</div><div class=\"line\">                    | LayoutParams.FLAG_SHOW_WHEN_LOCKED;</div><div class=\"line\">            mLayoutParams.type = LayoutParams.TYPE_SYSTEM_ERROR;</div><div class=\"line\">            mLayoutParams.gravity = Gravity.TOP | Gravity.LEFT;</div><div class=\"line\">            mLayoutParams.x = <span class=\"number\">100</span>;</div><div class=\"line\">            mLayoutParams.y = <span class=\"number\">300</span>;</div><div class=\"line\">            mImageView.setOnTouchListener(<span class=\"keyword\">this</span>);</div><div class=\"line\">            mWindowManager.addView(mImageView, mLayoutParams);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouch</span><span class=\"params\">(View v, MotionEvent event)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> rawX = (<span class=\"keyword\">int</span>) event.getRawX();</div><div class=\"line\">        <span class=\"keyword\">int</span> rawY = (<span class=\"keyword\">int</span>) event.getRawY();</div><div class=\"line\">        <span class=\"keyword\">int</span> x = (<span class=\"keyword\">int</span>) event.getX();</div><div class=\"line\">        <span class=\"keyword\">int</span> y = (<span class=\"keyword\">int</span>) event.getY();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">switch</span> (event.getAction()) &#123;</div><div class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN: &#123;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE: &#123;</div><div class=\"line\">            Log.d(TAG, <span class=\"string\">\"onTouch: rawX \"</span> + rawX);</div><div class=\"line\">            Log.d(TAG, <span class=\"string\">\"onTouch: rawY \"</span> + rawY);</div><div class=\"line\">            mLayoutParams.x = rawX;</div><div class=\"line\">            mLayoutParams.y = rawY;</div><div class=\"line\">            mWindowManager.updateViewLayout(mImageView, mLayoutParams);</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_UP: &#123;</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">default</span>:</div><div class=\"line\">            <span class=\"keyword\">break</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            mWindowManager.removeView(mImageView);</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalArgumentException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>#WindowManager.LayoutParams的Flag和Type</p>\n<p>##FLAG</p>\n<ul>\n<li>FLAG_NOT_FOCUSABLE，当前Window不获取焦点，也不接收各种输入事件，会同时启用FLAG_NOT_TOUCH_MODAL，事件会传递给下层具有焦点的Window。</li>\n<li>FLAG_NOT_TOUCH_MODAL，当前Window区域外的单击事件传递给底层，区域内的单击事件自己处理，一般都需要开启。 </li>\n<li>FLAG_SHOW_WHEN_LOCKED，可以让Window显示在锁屏界面上。</li>\n</ul>\n<p>##Type<br>Type表示Window的类型，有应用Window、子Window和系统Window。</p>\n<ul>\n<li>应用Window，一般对应一个Activity。层级范围1～99。 </li>\n<li>子Window，不能单独存在，需要特定的父Window，比如一般的Dialog。层级范围1000～1999。</li>\n<li>系统Window，需要权限声明，比如Toast。层级范围2000～2999。</li>\n</ul>\n<p>一般可以选用WindowManager.LayoutParams.TYPE_SYSTEM_ERROR或者TYPE_SYSTEM_OVERLAY同时声明权限。使用WindowManager.LayoutParams.TYPE_SYSTEM_ERROR时，同时声明<uses-permission android:name=\"android.permission.SYSTEM_ALERT_WINDOW\" /></p>\n<p>#注</p>\n<ul>\n<li>Window并不实际存在，以View的形式存在。每个Window对应着一个View和ViewRootImpl，Window和View通过ViewRootImpl建立联系。所以在实际使用中其实我们并不能访问到真正的Window，而只能通过WindowManager。</li>\n<li>WindowManager常用的三个功能：addView，updateViewLayout，removeView</li>\n<li>别忘了onDestory()中的mWindowManager.removeView(mImageView)</li>\n</ul>"},{"title":"从源码的角度理解四大组件的工作过程","date":"2016-03-14T14:35:04.000Z","_content":"\n系统对四大组件的过程进行了很大程度的封装，日常开发中并不需要了解底层的工作原理，那么研究这些原理的意义在哪里呢？\n- 如果你想在技术上更进一步，那么了解一些系统的工作原理是十分必要的，也是开发人员日后成长为高级工程师所必备的技术能力。\n- Android作为一个优秀的基于Linux操作系统，其内部一定有很多值得我们学习的地方，通过对Android操作系统的学习对提高开发人员的内功有很大的好处。\n- 如果你从事Android Rom开发，那就没什么好说的了，看源码吧。\n\n本文侧重于对四大组件工作过程的分析，通过分析他们的工作过程理解系统内部运行机制，加深我们对Android整体系统结构的认识。\n<!-- more -->\n\n本文中的UML图来自[@amurocrash](http://blog.csdn.net/amurocrash)，感谢amurocrash。\nAndroid相关部分的源码实在是太多，全部贴上了太过繁琐，所以借用了amurocrash同学的UML图使得整个流程更加容易理解。\n\n# 四大组件的运行状态\n- Activity的主要作用是展示一个界面并和用户交互，它扮演的是一种前台界面的角色。\n- Service是一种计算型组件，用于在后台执行一系列计算任务。Service有两种状态：启动状态和绑定状态。启动状态时的Service不需要与外界交互，绑定状态的Service可以方便的和Service组件进行通信。**Service是运行在主线程中的**，因此耗时的后台计算仍然需要在单独的线程中去完成。灵活采用stopService和unBindService这两个方法才能完全停止一个Service组件。\n- BroadcastReceiver是一种消息型组件，用于在不同的组件乃至不同的应用之间传递消息。广播注册有静态和动态两种方式，动态注册通过Context.registerReceiver()来实现，不需要时通过Contex.unRegisterReceiver()来解除广播，这种方式必须要应用启动才能注册；静态注册则在AndroidManifest文件中进行，应用安装时会被系统解析，不需要启动应用就可接收广播。匹配过程是通过<intent-filter>来描述的。\n- ContentProvider是一种共享型组件，用于向其他组件乃至其他应用共享数据。它内部维持着一份数据集合，并需要实现增删改查这四种操作，这个数据集合既可以通过数据库来实现，也可以采用其他类型来实现，比如List，Map等。需要注意的是，增删改查要处理好线程同步，这几个方法是在Binder线程池中被调用的，另外，ContentProvider不需要手动停止。\n\n\n# Activity的工作过程\n\n![UML图](/images/Activity_UML.png)\n\n注\n- 启动Activity的真实实现是由ActivityManagerNative.getDefault().startActivity方法来完成的。这个方法返回ActivityManagerService。\n- ActivityManagerService（AMS）继承自ActivityManagerNative，而ActivityManagerNative继承自Binder并实现了IActivityManager这个Binder接口，因此AMS也是一个Binder。\n- AMS这个Binder对象采用单例模式对外提供，第一次调用它的get方法时会通过create方法初始化，后续调用中直接返回之前创建的对象。\n- 从makeApplication的实现可以看出，如果Application已经被创建过了，那么就不会再重复创建，这也意味着一个应用只有一个Application对象。Application的创建也是通过Instrumentation来完成的，这个过程和Activity对象的创建过程一样，都是通过类加载器来实现的。\n- ContextImpl是Context的具体实现，ContextImpl是通过Activity的attach方法来和Activity建立关联的，在attach方法中Activity还会完成Window的创建并建立自己和Window的关联，这样当Activity接受到事件就可以传递给window了。\n\n# Service的工作过程\n\n## 启动过程\n\n![启动过程](/images/service_UML.png)\n\n## 绑定过程\n![绑定过程](/images/service_UML2.png)\n注\n- Service有两种状态：启动状态和绑定状态，两种状态是可以共存的。\n\n# BroadcastReceiver的工作过程\nBroadcastReceiver的工作过程包括广播注册过程、广播发送和接收过程。\n## 动态注册\n![动态注册](/images/Broadcast_UML.png)\n## 发送和接收\n![发送](/images/Broadcast_UML2.png)\n\n注：\n- 静态注册是由PackageManagerService（PMS）在应用安装的时候完成整个注册过程的，除广播以外，其他三大组件也都是在应用安装时由PMS解析并注册的。\n- 广播的发送有几种类型：普通广播、有序广播和粘性广播，有序广播和粘性广播与普通广播相比具有不同的特性，但是发送和接收过程是类似的。\n- FLAG_INCLUDE_STOPPED_PACKAGES:广播会发送给已经停止的应用，FLAG_EXCLUDE_STOPPED_PACKAGES广播不会发送给已经停止的应用\n- 从Android 3.1开始，处于停止状态的应用无法接受到开机广播。\n\n# ContentProvider\n## 启动过程\n![启动过程](/images/qidong.png)\n\n- 当ContentProvider所在的进程启动时，会同时被启动并被发布到AMS中，需要注意的是，这个时候它的onCreate要先去Application的onCreate执行，这在四大组件中是一个少有的现象。\n- 用启动的入口为ActivityThread的main方法，main方法会创建ActivityThread实例并创建主线程消息队列。\n- attach方法中远程调用AMS的attachApplication方法，并提供ApplicationThread用于和AMS的通信。 \n- attachApplication方法会通过bindApplication方法和H来调回ActivityThread的handleBindApplication，这个方法会先创建Application，再加载ContentProvider，然后才会回调Application的onCreate方法。\n- ContentProvider的multiprocess属性决定了ContentProvider是否是单例（false时），一般都用单例。\n- ontentResolver的具体类是ApplicationContentResolver，当ContentProvider所在进程未启动时，第一次访问它会触发ContentProvider的创建以及进程启动。\n\n## Query流程\n![query](/images/contentprovider_UML.png)\n\ninsert，delete和update方法类似，这里就不在分析了。\n\n\n","source":"_posts/四大组件的工作过程.md","raw":"title: 从源码的角度理解四大组件的工作过程\ndate: 2016/3/14 22:35:04\ncategories:\n- Android\n- Android开发艺术探索笔记\ntags:\n- Activity\n- Service\n- BroadcastReceiver\n- ContentProvider\n---\n\n系统对四大组件的过程进行了很大程度的封装，日常开发中并不需要了解底层的工作原理，那么研究这些原理的意义在哪里呢？\n- 如果你想在技术上更进一步，那么了解一些系统的工作原理是十分必要的，也是开发人员日后成长为高级工程师所必备的技术能力。\n- Android作为一个优秀的基于Linux操作系统，其内部一定有很多值得我们学习的地方，通过对Android操作系统的学习对提高开发人员的内功有很大的好处。\n- 如果你从事Android Rom开发，那就没什么好说的了，看源码吧。\n\n本文侧重于对四大组件工作过程的分析，通过分析他们的工作过程理解系统内部运行机制，加深我们对Android整体系统结构的认识。\n<!-- more -->\n\n本文中的UML图来自[@amurocrash](http://blog.csdn.net/amurocrash)，感谢amurocrash。\nAndroid相关部分的源码实在是太多，全部贴上了太过繁琐，所以借用了amurocrash同学的UML图使得整个流程更加容易理解。\n\n# 四大组件的运行状态\n- Activity的主要作用是展示一个界面并和用户交互，它扮演的是一种前台界面的角色。\n- Service是一种计算型组件，用于在后台执行一系列计算任务。Service有两种状态：启动状态和绑定状态。启动状态时的Service不需要与外界交互，绑定状态的Service可以方便的和Service组件进行通信。**Service是运行在主线程中的**，因此耗时的后台计算仍然需要在单独的线程中去完成。灵活采用stopService和unBindService这两个方法才能完全停止一个Service组件。\n- BroadcastReceiver是一种消息型组件，用于在不同的组件乃至不同的应用之间传递消息。广播注册有静态和动态两种方式，动态注册通过Context.registerReceiver()来实现，不需要时通过Contex.unRegisterReceiver()来解除广播，这种方式必须要应用启动才能注册；静态注册则在AndroidManifest文件中进行，应用安装时会被系统解析，不需要启动应用就可接收广播。匹配过程是通过<intent-filter>来描述的。\n- ContentProvider是一种共享型组件，用于向其他组件乃至其他应用共享数据。它内部维持着一份数据集合，并需要实现增删改查这四种操作，这个数据集合既可以通过数据库来实现，也可以采用其他类型来实现，比如List，Map等。需要注意的是，增删改查要处理好线程同步，这几个方法是在Binder线程池中被调用的，另外，ContentProvider不需要手动停止。\n\n\n# Activity的工作过程\n\n![UML图](/images/Activity_UML.png)\n\n注\n- 启动Activity的真实实现是由ActivityManagerNative.getDefault().startActivity方法来完成的。这个方法返回ActivityManagerService。\n- ActivityManagerService（AMS）继承自ActivityManagerNative，而ActivityManagerNative继承自Binder并实现了IActivityManager这个Binder接口，因此AMS也是一个Binder。\n- AMS这个Binder对象采用单例模式对外提供，第一次调用它的get方法时会通过create方法初始化，后续调用中直接返回之前创建的对象。\n- 从makeApplication的实现可以看出，如果Application已经被创建过了，那么就不会再重复创建，这也意味着一个应用只有一个Application对象。Application的创建也是通过Instrumentation来完成的，这个过程和Activity对象的创建过程一样，都是通过类加载器来实现的。\n- ContextImpl是Context的具体实现，ContextImpl是通过Activity的attach方法来和Activity建立关联的，在attach方法中Activity还会完成Window的创建并建立自己和Window的关联，这样当Activity接受到事件就可以传递给window了。\n\n# Service的工作过程\n\n## 启动过程\n\n![启动过程](/images/service_UML.png)\n\n## 绑定过程\n![绑定过程](/images/service_UML2.png)\n注\n- Service有两种状态：启动状态和绑定状态，两种状态是可以共存的。\n\n# BroadcastReceiver的工作过程\nBroadcastReceiver的工作过程包括广播注册过程、广播发送和接收过程。\n## 动态注册\n![动态注册](/images/Broadcast_UML.png)\n## 发送和接收\n![发送](/images/Broadcast_UML2.png)\n\n注：\n- 静态注册是由PackageManagerService（PMS）在应用安装的时候完成整个注册过程的，除广播以外，其他三大组件也都是在应用安装时由PMS解析并注册的。\n- 广播的发送有几种类型：普通广播、有序广播和粘性广播，有序广播和粘性广播与普通广播相比具有不同的特性，但是发送和接收过程是类似的。\n- FLAG_INCLUDE_STOPPED_PACKAGES:广播会发送给已经停止的应用，FLAG_EXCLUDE_STOPPED_PACKAGES广播不会发送给已经停止的应用\n- 从Android 3.1开始，处于停止状态的应用无法接受到开机广播。\n\n# ContentProvider\n## 启动过程\n![启动过程](/images/qidong.png)\n\n- 当ContentProvider所在的进程启动时，会同时被启动并被发布到AMS中，需要注意的是，这个时候它的onCreate要先去Application的onCreate执行，这在四大组件中是一个少有的现象。\n- 用启动的入口为ActivityThread的main方法，main方法会创建ActivityThread实例并创建主线程消息队列。\n- attach方法中远程调用AMS的attachApplication方法，并提供ApplicationThread用于和AMS的通信。 \n- attachApplication方法会通过bindApplication方法和H来调回ActivityThread的handleBindApplication，这个方法会先创建Application，再加载ContentProvider，然后才会回调Application的onCreate方法。\n- ContentProvider的multiprocess属性决定了ContentProvider是否是单例（false时），一般都用单例。\n- ontentResolver的具体类是ApplicationContentResolver，当ContentProvider所在进程未启动时，第一次访问它会触发ContentProvider的创建以及进程启动。\n\n## Query流程\n![query](/images/contentprovider_UML.png)\n\ninsert，delete和update方法类似，这里就不在分析了。\n\n\n","slug":"四大组件的工作过程","published":1,"updated":"2016-12-28T12:14:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix8xu7130011wwv65cbewse7","content":"<p>系统对四大组件的过程进行了很大程度的封装，日常开发中并不需要了解底层的工作原理，那么研究这些原理的意义在哪里呢？</p>\n<ul>\n<li>如果你想在技术上更进一步，那么了解一些系统的工作原理是十分必要的，也是开发人员日后成长为高级工程师所必备的技术能力。</li>\n<li>Android作为一个优秀的基于Linux操作系统，其内部一定有很多值得我们学习的地方，通过对Android操作系统的学习对提高开发人员的内功有很大的好处。</li>\n<li>如果你从事Android Rom开发，那就没什么好说的了，看源码吧。</li>\n</ul>\n<p>本文侧重于对四大组件工作过程的分析，通过分析他们的工作过程理解系统内部运行机制，加深我们对Android整体系统结构的认识。<br><a id=\"more\"></a></p>\n<p>本文中的UML图来自<a href=\"http://blog.csdn.net/amurocrash\" target=\"_blank\" rel=\"external\">@amurocrash</a>，感谢amurocrash。<br>Android相关部分的源码实在是太多，全部贴上了太过繁琐，所以借用了amurocrash同学的UML图使得整个流程更加容易理解。</p>\n<h1 id=\"四大组件的运行状态\"><a href=\"#四大组件的运行状态\" class=\"headerlink\" title=\"四大组件的运行状态\"></a>四大组件的运行状态</h1><ul>\n<li>Activity的主要作用是展示一个界面并和用户交互，它扮演的是一种前台界面的角色。</li>\n<li>Service是一种计算型组件，用于在后台执行一系列计算任务。Service有两种状态：启动状态和绑定状态。启动状态时的Service不需要与外界交互，绑定状态的Service可以方便的和Service组件进行通信。<strong>Service是运行在主线程中的</strong>，因此耗时的后台计算仍然需要在单独的线程中去完成。灵活采用stopService和unBindService这两个方法才能完全停止一个Service组件。</li>\n<li>BroadcastReceiver是一种消息型组件，用于在不同的组件乃至不同的应用之间传递消息。广播注册有静态和动态两种方式，动态注册通过Context.registerReceiver()来实现，不需要时通过Contex.unRegisterReceiver()来解除广播，这种方式必须要应用启动才能注册；静态注册则在AndroidManifest文件中进行，应用安装时会被系统解析，不需要启动应用就可接收广播。匹配过程是通过<intent-filter>来描述的。</intent-filter></li>\n<li>ContentProvider是一种共享型组件，用于向其他组件乃至其他应用共享数据。它内部维持着一份数据集合，并需要实现增删改查这四种操作，这个数据集合既可以通过数据库来实现，也可以采用其他类型来实现，比如List，Map等。需要注意的是，增删改查要处理好线程同步，这几个方法是在Binder线程池中被调用的，另外，ContentProvider不需要手动停止。</li>\n</ul>\n<h1 id=\"Activity的工作过程\"><a href=\"#Activity的工作过程\" class=\"headerlink\" title=\"Activity的工作过程\"></a>Activity的工作过程</h1><p><img src=\"/images/Activity_UML.png\" alt=\"UML图\"></p>\n<p>注</p>\n<ul>\n<li>启动Activity的真实实现是由ActivityManagerNative.getDefault().startActivity方法来完成的。这个方法返回ActivityManagerService。</li>\n<li>ActivityManagerService（AMS）继承自ActivityManagerNative，而ActivityManagerNative继承自Binder并实现了IActivityManager这个Binder接口，因此AMS也是一个Binder。</li>\n<li>AMS这个Binder对象采用单例模式对外提供，第一次调用它的get方法时会通过create方法初始化，后续调用中直接返回之前创建的对象。</li>\n<li>从makeApplication的实现可以看出，如果Application已经被创建过了，那么就不会再重复创建，这也意味着一个应用只有一个Application对象。Application的创建也是通过Instrumentation来完成的，这个过程和Activity对象的创建过程一样，都是通过类加载器来实现的。</li>\n<li>ContextImpl是Context的具体实现，ContextImpl是通过Activity的attach方法来和Activity建立关联的，在attach方法中Activity还会完成Window的创建并建立自己和Window的关联，这样当Activity接受到事件就可以传递给window了。</li>\n</ul>\n<h1 id=\"Service的工作过程\"><a href=\"#Service的工作过程\" class=\"headerlink\" title=\"Service的工作过程\"></a>Service的工作过程</h1><h2 id=\"启动过程\"><a href=\"#启动过程\" class=\"headerlink\" title=\"启动过程\"></a>启动过程</h2><p><img src=\"/images/service_UML.png\" alt=\"启动过程\"></p>\n<h2 id=\"绑定过程\"><a href=\"#绑定过程\" class=\"headerlink\" title=\"绑定过程\"></a>绑定过程</h2><p><img src=\"/images/service_UML2.png\" alt=\"绑定过程\"><br>注</p>\n<ul>\n<li>Service有两种状态：启动状态和绑定状态，两种状态是可以共存的。</li>\n</ul>\n<h1 id=\"BroadcastReceiver的工作过程\"><a href=\"#BroadcastReceiver的工作过程\" class=\"headerlink\" title=\"BroadcastReceiver的工作过程\"></a>BroadcastReceiver的工作过程</h1><p>BroadcastReceiver的工作过程包括广播注册过程、广播发送和接收过程。</p>\n<h2 id=\"动态注册\"><a href=\"#动态注册\" class=\"headerlink\" title=\"动态注册\"></a>动态注册</h2><p><img src=\"/images/Broadcast_UML.png\" alt=\"动态注册\"></p>\n<h2 id=\"发送和接收\"><a href=\"#发送和接收\" class=\"headerlink\" title=\"发送和接收\"></a>发送和接收</h2><p><img src=\"/images/Broadcast_UML2.png\" alt=\"发送\"></p>\n<p>注：</p>\n<ul>\n<li>静态注册是由PackageManagerService（PMS）在应用安装的时候完成整个注册过程的，除广播以外，其他三大组件也都是在应用安装时由PMS解析并注册的。</li>\n<li>广播的发送有几种类型：普通广播、有序广播和粘性广播，有序广播和粘性广播与普通广播相比具有不同的特性，但是发送和接收过程是类似的。</li>\n<li>FLAG_INCLUDE_STOPPED_PACKAGES:广播会发送给已经停止的应用，FLAG_EXCLUDE_STOPPED_PACKAGES广播不会发送给已经停止的应用</li>\n<li>从Android 3.1开始，处于停止状态的应用无法接受到开机广播。</li>\n</ul>\n<h1 id=\"ContentProvider\"><a href=\"#ContentProvider\" class=\"headerlink\" title=\"ContentProvider\"></a>ContentProvider</h1><h2 id=\"启动过程-1\"><a href=\"#启动过程-1\" class=\"headerlink\" title=\"启动过程\"></a>启动过程</h2><p><img src=\"/images/qidong.png\" alt=\"启动过程\"></p>\n<ul>\n<li>当ContentProvider所在的进程启动时，会同时被启动并被发布到AMS中，需要注意的是，这个时候它的onCreate要先去Application的onCreate执行，这在四大组件中是一个少有的现象。</li>\n<li>用启动的入口为ActivityThread的main方法，main方法会创建ActivityThread实例并创建主线程消息队列。</li>\n<li>attach方法中远程调用AMS的attachApplication方法，并提供ApplicationThread用于和AMS的通信。 </li>\n<li>attachApplication方法会通过bindApplication方法和H来调回ActivityThread的handleBindApplication，这个方法会先创建Application，再加载ContentProvider，然后才会回调Application的onCreate方法。</li>\n<li>ContentProvider的multiprocess属性决定了ContentProvider是否是单例（false时），一般都用单例。</li>\n<li>ontentResolver的具体类是ApplicationContentResolver，当ContentProvider所在进程未启动时，第一次访问它会触发ContentProvider的创建以及进程启动。</li>\n</ul>\n<h2 id=\"Query流程\"><a href=\"#Query流程\" class=\"headerlink\" title=\"Query流程\"></a>Query流程</h2><p><img src=\"/images/contentprovider_UML.png\" alt=\"query\"></p>\n<p>insert，delete和update方法类似，这里就不在分析了。</p>\n","excerpt":"<p>系统对四大组件的过程进行了很大程度的封装，日常开发中并不需要了解底层的工作原理，那么研究这些原理的意义在哪里呢？</p>\n<ul>\n<li>如果你想在技术上更进一步，那么了解一些系统的工作原理是十分必要的，也是开发人员日后成长为高级工程师所必备的技术能力。</li>\n<li>Android作为一个优秀的基于Linux操作系统，其内部一定有很多值得我们学习的地方，通过对Android操作系统的学习对提高开发人员的内功有很大的好处。</li>\n<li>如果你从事Android Rom开发，那就没什么好说的了，看源码吧。</li>\n</ul>\n<p>本文侧重于对四大组件工作过程的分析，通过分析他们的工作过程理解系统内部运行机制，加深我们对Android整体系统结构的认识。<br>","more":"</p>\n<p>本文中的UML图来自<a href=\"http://blog.csdn.net/amurocrash\">@amurocrash</a>，感谢amurocrash。<br>Android相关部分的源码实在是太多，全部贴上了太过繁琐，所以借用了amurocrash同学的UML图使得整个流程更加容易理解。</p>\n<h1 id=\"四大组件的运行状态\"><a href=\"#四大组件的运行状态\" class=\"headerlink\" title=\"四大组件的运行状态\"></a>四大组件的运行状态</h1><ul>\n<li>Activity的主要作用是展示一个界面并和用户交互，它扮演的是一种前台界面的角色。</li>\n<li>Service是一种计算型组件，用于在后台执行一系列计算任务。Service有两种状态：启动状态和绑定状态。启动状态时的Service不需要与外界交互，绑定状态的Service可以方便的和Service组件进行通信。<strong>Service是运行在主线程中的</strong>，因此耗时的后台计算仍然需要在单独的线程中去完成。灵活采用stopService和unBindService这两个方法才能完全停止一个Service组件。</li>\n<li>BroadcastReceiver是一种消息型组件，用于在不同的组件乃至不同的应用之间传递消息。广播注册有静态和动态两种方式，动态注册通过Context.registerReceiver()来实现，不需要时通过Contex.unRegisterReceiver()来解除广播，这种方式必须要应用启动才能注册；静态注册则在AndroidManifest文件中进行，应用安装时会被系统解析，不需要启动应用就可接收广播。匹配过程是通过<intent-filter>来描述的。</li>\n<li>ContentProvider是一种共享型组件，用于向其他组件乃至其他应用共享数据。它内部维持着一份数据集合，并需要实现增删改查这四种操作，这个数据集合既可以通过数据库来实现，也可以采用其他类型来实现，比如List，Map等。需要注意的是，增删改查要处理好线程同步，这几个方法是在Binder线程池中被调用的，另外，ContentProvider不需要手动停止。</li>\n</ul>\n<h1 id=\"Activity的工作过程\"><a href=\"#Activity的工作过程\" class=\"headerlink\" title=\"Activity的工作过程\"></a>Activity的工作过程</h1><p><img src=\"/images/Activity_UML.png\" alt=\"UML图\"></p>\n<p>注</p>\n<ul>\n<li>启动Activity的真实实现是由ActivityManagerNative.getDefault().startActivity方法来完成的。这个方法返回ActivityManagerService。</li>\n<li>ActivityManagerService（AMS）继承自ActivityManagerNative，而ActivityManagerNative继承自Binder并实现了IActivityManager这个Binder接口，因此AMS也是一个Binder。</li>\n<li>AMS这个Binder对象采用单例模式对外提供，第一次调用它的get方法时会通过create方法初始化，后续调用中直接返回之前创建的对象。</li>\n<li>从makeApplication的实现可以看出，如果Application已经被创建过了，那么就不会再重复创建，这也意味着一个应用只有一个Application对象。Application的创建也是通过Instrumentation来完成的，这个过程和Activity对象的创建过程一样，都是通过类加载器来实现的。</li>\n<li>ContextImpl是Context的具体实现，ContextImpl是通过Activity的attach方法来和Activity建立关联的，在attach方法中Activity还会完成Window的创建并建立自己和Window的关联，这样当Activity接受到事件就可以传递给window了。</li>\n</ul>\n<h1 id=\"Service的工作过程\"><a href=\"#Service的工作过程\" class=\"headerlink\" title=\"Service的工作过程\"></a>Service的工作过程</h1><h2 id=\"启动过程\"><a href=\"#启动过程\" class=\"headerlink\" title=\"启动过程\"></a>启动过程</h2><p><img src=\"/images/service_UML.png\" alt=\"启动过程\"></p>\n<h2 id=\"绑定过程\"><a href=\"#绑定过程\" class=\"headerlink\" title=\"绑定过程\"></a>绑定过程</h2><p><img src=\"/images/service_UML2.png\" alt=\"绑定过程\"><br>注</p>\n<ul>\n<li>Service有两种状态：启动状态和绑定状态，两种状态是可以共存的。</li>\n</ul>\n<h1 id=\"BroadcastReceiver的工作过程\"><a href=\"#BroadcastReceiver的工作过程\" class=\"headerlink\" title=\"BroadcastReceiver的工作过程\"></a>BroadcastReceiver的工作过程</h1><p>BroadcastReceiver的工作过程包括广播注册过程、广播发送和接收过程。</p>\n<h2 id=\"动态注册\"><a href=\"#动态注册\" class=\"headerlink\" title=\"动态注册\"></a>动态注册</h2><p><img src=\"/images/Broadcast_UML.png\" alt=\"动态注册\"></p>\n<h2 id=\"发送和接收\"><a href=\"#发送和接收\" class=\"headerlink\" title=\"发送和接收\"></a>发送和接收</h2><p><img src=\"/images/Broadcast_UML2.png\" alt=\"发送\"></p>\n<p>注：</p>\n<ul>\n<li>静态注册是由PackageManagerService（PMS）在应用安装的时候完成整个注册过程的，除广播以外，其他三大组件也都是在应用安装时由PMS解析并注册的。</li>\n<li>广播的发送有几种类型：普通广播、有序广播和粘性广播，有序广播和粘性广播与普通广播相比具有不同的特性，但是发送和接收过程是类似的。</li>\n<li>FLAG_INCLUDE_STOPPED_PACKAGES:广播会发送给已经停止的应用，FLAG_EXCLUDE_STOPPED_PACKAGES广播不会发送给已经停止的应用</li>\n<li>从Android 3.1开始，处于停止状态的应用无法接受到开机广播。</li>\n</ul>\n<h1 id=\"ContentProvider\"><a href=\"#ContentProvider\" class=\"headerlink\" title=\"ContentProvider\"></a>ContentProvider</h1><h2 id=\"启动过程-1\"><a href=\"#启动过程-1\" class=\"headerlink\" title=\"启动过程\"></a>启动过程</h2><p><img src=\"/images/qidong.png\" alt=\"启动过程\"></p>\n<ul>\n<li>当ContentProvider所在的进程启动时，会同时被启动并被发布到AMS中，需要注意的是，这个时候它的onCreate要先去Application的onCreate执行，这在四大组件中是一个少有的现象。</li>\n<li>用启动的入口为ActivityThread的main方法，main方法会创建ActivityThread实例并创建主线程消息队列。</li>\n<li>attach方法中远程调用AMS的attachApplication方法，并提供ApplicationThread用于和AMS的通信。 </li>\n<li>attachApplication方法会通过bindApplication方法和H来调回ActivityThread的handleBindApplication，这个方法会先创建Application，再加载ContentProvider，然后才会回调Application的onCreate方法。</li>\n<li>ContentProvider的multiprocess属性决定了ContentProvider是否是单例（false时），一般都用单例。</li>\n<li>ontentResolver的具体类是ApplicationContentResolver，当ContentProvider所在进程未启动时，第一次访问它会触发ContentProvider的创建以及进程启动。</li>\n</ul>\n<h2 id=\"Query流程\"><a href=\"#Query流程\" class=\"headerlink\" title=\"Query流程\"></a>Query流程</h2><p><img src=\"/images/contentprovider_UML.png\" alt=\"query\"></p>\n<p>insert，delete和update方法类似，这里就不在分析了。</p>"},{"title":"使用UncaughtExceptionHandler来处理未捕获的异常","date":"2016-03-28T08:06:51.000Z","_content":"所有的App都会发生crash，本文讲解的是如何采集crash信息以供后续开发处理这类问题。\n<!-- more -->\n\n# 基本思路\n\n当crash发生时，系统会调用UncaughtExceptionHandler的uncaughtException方法，我们可以在这个方法中捕获异常信息，把异常信息存到SD卡中，在合适的时候通过网络把crash信息传回服务器，这样就可以分析crash原因，在后续的版本中解决。\n先看一下Thread类中的一个方法，setDefaultUncaughtExceptionHandler\n\n```java\npublic static void setDefaultUncaughtExceptionHandler(UncaughtExceptionHandler handler) {\n    Thread.defaultUncaughtHandler = handler;\n}\n```\n\ndefaultUncaughtHandler是Thread类的静态成员变量，所以如果我们将自定义的UncaughtExceptionHandler设置给Thread的话，那么当前进程内的所有线程都能使用这个UncaughtExceptionHandler来处理异常了。\n\n# CrashHandler\n```java\npublic class CrashHandler implements UncaughtExceptionHandler {\n    private static final String TAG = \"CrashHandler\";\n    private static final boolean DEBUG = true;\n\n    private static final String PATH = Environment.getExternalStorageDirectory().getPath() + \"/CrashTest/log/\";\n    private static final String FILE_NAME = \"crash\";\n    private static final String FILE_NAME_SUFFIX = \".trace\";\n\n    private static CrashHandler sInstance = new CrashHandler();\n    private UncaughtExceptionHandler mDefaultCrashHandler;\n    private Context mContext;\n\n    private CrashHandler() {\n    }\n\n    public static CrashHandler getInstance() {\n        return sInstance;\n    }\n\n\t//需要初始化的单例\n    public void init(Context context) {\n        mDefaultCrashHandler = Thread.getDefaultUncaughtExceptionHandler();\n        Thread.setDefaultUncaughtExceptionHandler(this);\n        mContext = context.getApplicationContext();\n    }\n\n    /**\n     * 这个是最关键的函数，当程序中有未被捕获的异常，系统将会自动调用#uncaughtException方法\n     * thread为出现未捕获异常的线程，ex为未捕获的异常，有了这个ex，我们就可以得到异常信息。\n     */\n    @Override\n    public void uncaughtException(Thread thread, Throwable ex) {\n        try {\n            //导出异常信息到SD卡中\n            dumpExceptionToSDCard(ex);\n            uploadExceptionToServer();\n            //这里可以通过网络上传异常信息到服务器，便于开发人员分析日志从而解决bug\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        ex.printStackTrace();\n\n        //如果系统提供了默认的异常处理器，则交给系统去结束我们的程序，否则就由我们自己结束自己\n        if (mDefaultCrashHandler != null) {\n            mDefaultCrashHandler.uncaughtException(thread, ex);\n        } else {\n            Process.killProcess(Process.myPid());\n        }\n\n    }\n\n    private void dumpExceptionToSDCard(Throwable ex) throws IOException {\n        //如果SD卡不存在或无法使用，则无法把异常信息写入SD卡\n        if (!Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {\n            if (DEBUG) {\n                Log.w(TAG, \"sdcard unmounted,skip dump exception\");\n                return;\n            }\n        }\n\n        File dir = new File(PATH);\n        if (!dir.exists()) {\n            dir.mkdirs();\n        }\n        long current = System.currentTimeMillis();\n        String time = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date(current));\n        File file = new File(PATH + FILE_NAME + time + FILE_NAME_SUFFIX);\n\n        try {\n            PrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter(file)));\n            pw.println(time);\n            dumpPhoneInfo(pw);\n            pw.println();\n            ex.printStackTrace(pw);\n            pw.close();\n        } catch (Exception e) {\n            Log.e(TAG, \"dump crash info failed\");\n        }\n    }\n\n    private void dumpPhoneInfo(PrintWriter pw) throws NameNotFoundException {\n        PackageManager pm = mContext.getPackageManager();\n        PackageInfo pi = pm.getPackageInfo(mContext.getPackageName(), PackageManager.GET_ACTIVITIES);\n        pw.print(\"App Version: \");\n        pw.print(pi.versionName);\n        pw.print('_');\n        pw.println(pi.versionCode);\n\n        //android版本号\n        pw.print(\"OS Version: \");\n        pw.print(Build.VERSION.RELEASE);\n        pw.print(\"_\");\n        pw.println(Build.VERSION.SDK_INT);\n\n        //手机制造商\n        pw.print(\"Vendor: \");\n        pw.println(Build.MANUFACTURER);\n\n        //手机型号\n        pw.print(\"Model: \");\n        pw.println(Build.MODEL);\n\n        //cpu架构\n        pw.print(\"CPU ABI: \");\n        pw.println(Build.CPU_ABI);\n    }\n\n    private void uploadExceptionToServer() {\n      //TODO Upload Exception Message To Your Web Server\n    }\n\n}\n```\n\n# 使用方法\n在Application的onCreate方法中配置一下就可以\n```java\npublic class TestApp extends Application {\n\n    private static TestApp sInstance;\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        sInstance = this;\n\n        //在这里为应用设置异常处理程序，然后我们的程序才能捕获未处理的异常\n        CrashHandler crashHandler = CrashHandler.getInstance();\n        crashHandler.init(this);\n    }\n\n    public static TestApp getInstance() {\n        return sInstance;\n    }\n\n}\n\n```","source":"_posts/使用UncaughtExceptionHandler来处理未捕获的异常.md","raw":"title: 使用UncaughtExceptionHandler来处理未捕获的异常\ndate: 2016/3/28 16:06:51\ncategories:\n- Android\n- Android开发艺术探索笔记\ntags:\n- crash\n\n---\n所有的App都会发生crash，本文讲解的是如何采集crash信息以供后续开发处理这类问题。\n<!-- more -->\n\n# 基本思路\n\n当crash发生时，系统会调用UncaughtExceptionHandler的uncaughtException方法，我们可以在这个方法中捕获异常信息，把异常信息存到SD卡中，在合适的时候通过网络把crash信息传回服务器，这样就可以分析crash原因，在后续的版本中解决。\n先看一下Thread类中的一个方法，setDefaultUncaughtExceptionHandler\n\n```java\npublic static void setDefaultUncaughtExceptionHandler(UncaughtExceptionHandler handler) {\n    Thread.defaultUncaughtHandler = handler;\n}\n```\n\ndefaultUncaughtHandler是Thread类的静态成员变量，所以如果我们将自定义的UncaughtExceptionHandler设置给Thread的话，那么当前进程内的所有线程都能使用这个UncaughtExceptionHandler来处理异常了。\n\n# CrashHandler\n```java\npublic class CrashHandler implements UncaughtExceptionHandler {\n    private static final String TAG = \"CrashHandler\";\n    private static final boolean DEBUG = true;\n\n    private static final String PATH = Environment.getExternalStorageDirectory().getPath() + \"/CrashTest/log/\";\n    private static final String FILE_NAME = \"crash\";\n    private static final String FILE_NAME_SUFFIX = \".trace\";\n\n    private static CrashHandler sInstance = new CrashHandler();\n    private UncaughtExceptionHandler mDefaultCrashHandler;\n    private Context mContext;\n\n    private CrashHandler() {\n    }\n\n    public static CrashHandler getInstance() {\n        return sInstance;\n    }\n\n\t//需要初始化的单例\n    public void init(Context context) {\n        mDefaultCrashHandler = Thread.getDefaultUncaughtExceptionHandler();\n        Thread.setDefaultUncaughtExceptionHandler(this);\n        mContext = context.getApplicationContext();\n    }\n\n    /**\n     * 这个是最关键的函数，当程序中有未被捕获的异常，系统将会自动调用#uncaughtException方法\n     * thread为出现未捕获异常的线程，ex为未捕获的异常，有了这个ex，我们就可以得到异常信息。\n     */\n    @Override\n    public void uncaughtException(Thread thread, Throwable ex) {\n        try {\n            //导出异常信息到SD卡中\n            dumpExceptionToSDCard(ex);\n            uploadExceptionToServer();\n            //这里可以通过网络上传异常信息到服务器，便于开发人员分析日志从而解决bug\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        ex.printStackTrace();\n\n        //如果系统提供了默认的异常处理器，则交给系统去结束我们的程序，否则就由我们自己结束自己\n        if (mDefaultCrashHandler != null) {\n            mDefaultCrashHandler.uncaughtException(thread, ex);\n        } else {\n            Process.killProcess(Process.myPid());\n        }\n\n    }\n\n    private void dumpExceptionToSDCard(Throwable ex) throws IOException {\n        //如果SD卡不存在或无法使用，则无法把异常信息写入SD卡\n        if (!Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {\n            if (DEBUG) {\n                Log.w(TAG, \"sdcard unmounted,skip dump exception\");\n                return;\n            }\n        }\n\n        File dir = new File(PATH);\n        if (!dir.exists()) {\n            dir.mkdirs();\n        }\n        long current = System.currentTimeMillis();\n        String time = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\").format(new Date(current));\n        File file = new File(PATH + FILE_NAME + time + FILE_NAME_SUFFIX);\n\n        try {\n            PrintWriter pw = new PrintWriter(new BufferedWriter(new FileWriter(file)));\n            pw.println(time);\n            dumpPhoneInfo(pw);\n            pw.println();\n            ex.printStackTrace(pw);\n            pw.close();\n        } catch (Exception e) {\n            Log.e(TAG, \"dump crash info failed\");\n        }\n    }\n\n    private void dumpPhoneInfo(PrintWriter pw) throws NameNotFoundException {\n        PackageManager pm = mContext.getPackageManager();\n        PackageInfo pi = pm.getPackageInfo(mContext.getPackageName(), PackageManager.GET_ACTIVITIES);\n        pw.print(\"App Version: \");\n        pw.print(pi.versionName);\n        pw.print('_');\n        pw.println(pi.versionCode);\n\n        //android版本号\n        pw.print(\"OS Version: \");\n        pw.print(Build.VERSION.RELEASE);\n        pw.print(\"_\");\n        pw.println(Build.VERSION.SDK_INT);\n\n        //手机制造商\n        pw.print(\"Vendor: \");\n        pw.println(Build.MANUFACTURER);\n\n        //手机型号\n        pw.print(\"Model: \");\n        pw.println(Build.MODEL);\n\n        //cpu架构\n        pw.print(\"CPU ABI: \");\n        pw.println(Build.CPU_ABI);\n    }\n\n    private void uploadExceptionToServer() {\n      //TODO Upload Exception Message To Your Web Server\n    }\n\n}\n```\n\n# 使用方法\n在Application的onCreate方法中配置一下就可以\n```java\npublic class TestApp extends Application {\n\n    private static TestApp sInstance;\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        sInstance = this;\n\n        //在这里为应用设置异常处理程序，然后我们的程序才能捕获未处理的异常\n        CrashHandler crashHandler = CrashHandler.getInstance();\n        crashHandler.init(this);\n    }\n\n    public static TestApp getInstance() {\n        return sInstance;\n    }\n\n}\n\n```","slug":"使用UncaughtExceptionHandler来处理未捕获的异常","published":1,"updated":"2016-12-28T12:14:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix8xu7150014wwv6ovh3qwm3","content":"<p>所有的App都会发生crash，本文讲解的是如何采集crash信息以供后续开发处理这类问题。<br><a id=\"more\"></a></p>\n<h1 id=\"基本思路\"><a href=\"#基本思路\" class=\"headerlink\" title=\"基本思路\"></a>基本思路</h1><p>当crash发生时，系统会调用UncaughtExceptionHandler的uncaughtException方法，我们可以在这个方法中捕获异常信息，把异常信息存到SD卡中，在合适的时候通过网络把crash信息传回服务器，这样就可以分析crash原因，在后续的版本中解决。<br>先看一下Thread类中的一个方法，setDefaultUncaughtExceptionHandler</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setDefaultUncaughtExceptionHandler</span><span class=\"params\">(UncaughtExceptionHandler handler)</span> </span>&#123;</div><div class=\"line\">    Thread.defaultUncaughtHandler = handler;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>defaultUncaughtHandler是Thread类的静态成员变量，所以如果我们将自定义的UncaughtExceptionHandler设置给Thread的话，那么当前进程内的所有线程都能使用这个UncaughtExceptionHandler来处理异常了。</p>\n<h1 id=\"CrashHandler\"><a href=\"#CrashHandler\" class=\"headerlink\" title=\"CrashHandler\"></a>CrashHandler</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CrashHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">UncaughtExceptionHandler</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"CrashHandler\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> DEBUG = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String PATH = Environment.getExternalStorageDirectory().getPath() + <span class=\"string\">\"/CrashTest/log/\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String FILE_NAME = <span class=\"string\">\"crash\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String FILE_NAME_SUFFIX = <span class=\"string\">\".trace\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> CrashHandler sInstance = <span class=\"keyword\">new</span> CrashHandler();</div><div class=\"line\">    <span class=\"keyword\">private</span> UncaughtExceptionHandler mDefaultCrashHandler;</div><div class=\"line\">    <span class=\"keyword\">private</span> Context mContext;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">CrashHandler</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> CrashHandler <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> sInstance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//需要初始化的单例</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        mDefaultCrashHandler = Thread.getDefaultUncaughtExceptionHandler();</div><div class=\"line\">        Thread.setDefaultUncaughtExceptionHandler(<span class=\"keyword\">this</span>);</div><div class=\"line\">        mContext = context.getApplicationContext();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</span></div><div class=\"line\">     * 这个是最关键的函数，当程序中有未被捕获的异常，系统将会自动调用#uncaughtException方法</div><div class=\"line\">     * thread为出现未捕获异常的线程，ex为未捕获的异常，有了这个ex，我们就可以得到异常信息。</div><div class=\"line\">     */</div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">uncaughtException</span><span class=\"params\">(Thread thread, Throwable ex)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//导出异常信息到SD卡中</span></div><div class=\"line\">            dumpExceptionToSDCard(ex);</div><div class=\"line\">            uploadExceptionToServer();</div><div class=\"line\">            <span class=\"comment\">//这里可以通过网络上传异常信息到服务器，便于开发人员分析日志从而解决bug</span></div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        ex.printStackTrace();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//如果系统提供了默认的异常处理器，则交给系统去结束我们的程序，否则就由我们自己结束自己</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (mDefaultCrashHandler != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mDefaultCrashHandler.uncaughtException(thread, ex);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            Process.killProcess(Process.myPid());</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dumpExceptionToSDCard</span><span class=\"params\">(Throwable ex)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//如果SD卡不存在或无法使用，则无法把异常信息写入SD卡</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (!Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                Log.w(TAG, <span class=\"string\">\"sdcard unmounted,skip dump exception\"</span>);</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        File dir = <span class=\"keyword\">new</span> File(PATH);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!dir.exists()) &#123;</div><div class=\"line\">            dir.mkdirs();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">long</span> current = System.currentTimeMillis();</div><div class=\"line\">        String time = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>).format(<span class=\"keyword\">new</span> Date(current));</div><div class=\"line\">        File file = <span class=\"keyword\">new</span> File(PATH + FILE_NAME + time + FILE_NAME_SUFFIX);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            PrintWriter pw = <span class=\"keyword\">new</span> PrintWriter(<span class=\"keyword\">new</span> BufferedWriter(<span class=\"keyword\">new</span> FileWriter(file)));</div><div class=\"line\">            pw.println(time);</div><div class=\"line\">            dumpPhoneInfo(pw);</div><div class=\"line\">            pw.println();</div><div class=\"line\">            ex.printStackTrace(pw);</div><div class=\"line\">            pw.close();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            Log.e(TAG, <span class=\"string\">\"dump crash info failed\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dumpPhoneInfo</span><span class=\"params\">(PrintWriter pw)</span> <span class=\"keyword\">throws</span> NameNotFoundException </span>&#123;</div><div class=\"line\">        PackageManager pm = mContext.getPackageManager();</div><div class=\"line\">        PackageInfo pi = pm.getPackageInfo(mContext.getPackageName(), PackageManager.GET_ACTIVITIES);</div><div class=\"line\">        pw.print(<span class=\"string\">\"App Version: \"</span>);</div><div class=\"line\">        pw.print(pi.versionName);</div><div class=\"line\">        pw.print(<span class=\"string\">'_'</span>);</div><div class=\"line\">        pw.println(pi.versionCode);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//android版本号</span></div><div class=\"line\">        pw.print(<span class=\"string\">\"OS Version: \"</span>);</div><div class=\"line\">        pw.print(Build.VERSION.RELEASE);</div><div class=\"line\">        pw.print(<span class=\"string\">\"_\"</span>);</div><div class=\"line\">        pw.println(Build.VERSION.SDK_INT);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//手机制造商</span></div><div class=\"line\">        pw.print(<span class=\"string\">\"Vendor: \"</span>);</div><div class=\"line\">        pw.println(Build.MANUFACTURER);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//手机型号</span></div><div class=\"line\">        pw.print(<span class=\"string\">\"Model: \"</span>);</div><div class=\"line\">        pw.println(Build.MODEL);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//cpu架构</span></div><div class=\"line\">        pw.print(<span class=\"string\">\"CPU ABI: \"</span>);</div><div class=\"line\">        pw.println(Build.CPU_ABI);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">uploadExceptionToServer</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">//TODO Upload Exception Message To Your Web Server</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h1><p>在Application的onCreate方法中配置一下就可以<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestApp</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> TestApp sInstance;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\">        sInstance = <span class=\"keyword\">this</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//在这里为应用设置异常处理程序，然后我们的程序才能捕获未处理的异常</span></div><div class=\"line\">        CrashHandler crashHandler = CrashHandler.getInstance();</div><div class=\"line\">        crashHandler.init(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> TestApp <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> sInstance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n","excerpt":"<p>所有的App都会发生crash，本文讲解的是如何采集crash信息以供后续开发处理这类问题。<br>","more":"</p>\n<h1 id=\"基本思路\"><a href=\"#基本思路\" class=\"headerlink\" title=\"基本思路\"></a>基本思路</h1><p>当crash发生时，系统会调用UncaughtExceptionHandler的uncaughtException方法，我们可以在这个方法中捕获异常信息，把异常信息存到SD卡中，在合适的时候通过网络把crash信息传回服务器，这样就可以分析crash原因，在后续的版本中解决。<br>先看一下Thread类中的一个方法，setDefaultUncaughtExceptionHandler</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">setDefaultUncaughtExceptionHandler</span><span class=\"params\">(UncaughtExceptionHandler handler)</span> </span>&#123;</div><div class=\"line\">    Thread.defaultUncaughtHandler = handler;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>defaultUncaughtHandler是Thread类的静态成员变量，所以如果我们将自定义的UncaughtExceptionHandler设置给Thread的话，那么当前进程内的所有线程都能使用这个UncaughtExceptionHandler来处理异常了。</p>\n<h1 id=\"CrashHandler\"><a href=\"#CrashHandler\" class=\"headerlink\" title=\"CrashHandler\"></a>CrashHandler</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CrashHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">UncaughtExceptionHandler</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"CrashHandler\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> DEBUG = <span class=\"keyword\">true</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String PATH = Environment.getExternalStorageDirectory().getPath() + <span class=\"string\">\"/CrashTest/log/\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String FILE_NAME = <span class=\"string\">\"crash\"</span>;</div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String FILE_NAME_SUFFIX = <span class=\"string\">\".trace\"</span>;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> CrashHandler sInstance = <span class=\"keyword\">new</span> CrashHandler();</div><div class=\"line\">    <span class=\"keyword\">private</span> UncaughtExceptionHandler mDefaultCrashHandler;</div><div class=\"line\">    <span class=\"keyword\">private</span> Context mContext;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">CrashHandler</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> CrashHandler <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> sInstance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">\t<span class=\"comment\">//需要初始化的单例</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        mDefaultCrashHandler = Thread.getDefaultUncaughtExceptionHandler();</div><div class=\"line\">        Thread.setDefaultUncaughtExceptionHandler(<span class=\"keyword\">this</span>);</div><div class=\"line\">        mContext = context.getApplicationContext();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"comment\">/**</div><div class=\"line\">     * 这个是最关键的函数，当程序中有未被捕获的异常，系统将会自动调用#uncaughtException方法</div><div class=\"line\">     * thread为出现未捕获异常的线程，ex为未捕获的异常，有了这个ex，我们就可以得到异常信息。</div><div class=\"line\">     */</span></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">uncaughtException</span><span class=\"params\">(Thread thread, Throwable ex)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"comment\">//导出异常信息到SD卡中</span></div><div class=\"line\">            dumpExceptionToSDCard(ex);</div><div class=\"line\">            uploadExceptionToServer();</div><div class=\"line\">            <span class=\"comment\">//这里可以通过网络上传异常信息到服务器，便于开发人员分析日志从而解决bug</span></div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</div><div class=\"line\">            e.printStackTrace();</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        ex.printStackTrace();</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//如果系统提供了默认的异常处理器，则交给系统去结束我们的程序，否则就由我们自己结束自己</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (mDefaultCrashHandler != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">            mDefaultCrashHandler.uncaughtException(thread, ex);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">            Process.killProcess(Process.myPid());</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dumpExceptionToSDCard</span><span class=\"params\">(Throwable ex)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</div><div class=\"line\">        <span class=\"comment\">//如果SD卡不存在或无法使用，则无法把异常信息写入SD卡</span></div><div class=\"line\">        <span class=\"keyword\">if</span> (!Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) &#123;</div><div class=\"line\">            <span class=\"keyword\">if</span> (DEBUG) &#123;</div><div class=\"line\">                Log.w(TAG, <span class=\"string\">\"sdcard unmounted,skip dump exception\"</span>);</div><div class=\"line\">                <span class=\"keyword\">return</span>;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\"></div><div class=\"line\">        File dir = <span class=\"keyword\">new</span> File(PATH);</div><div class=\"line\">        <span class=\"keyword\">if</span> (!dir.exists()) &#123;</div><div class=\"line\">            dir.mkdirs();</div><div class=\"line\">        &#125;</div><div class=\"line\">        <span class=\"keyword\">long</span> current = System.currentTimeMillis();</div><div class=\"line\">        String time = <span class=\"keyword\">new</span> SimpleDateFormat(<span class=\"string\">\"yyyy-MM-dd HH:mm:ss\"</span>).format(<span class=\"keyword\">new</span> Date(current));</div><div class=\"line\">        File file = <span class=\"keyword\">new</span> File(PATH + FILE_NAME + time + FILE_NAME_SUFFIX);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            PrintWriter pw = <span class=\"keyword\">new</span> PrintWriter(<span class=\"keyword\">new</span> BufferedWriter(<span class=\"keyword\">new</span> FileWriter(file)));</div><div class=\"line\">            pw.println(time);</div><div class=\"line\">            dumpPhoneInfo(pw);</div><div class=\"line\">            pw.println();</div><div class=\"line\">            ex.printStackTrace(pw);</div><div class=\"line\">            pw.close();</div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</div><div class=\"line\">            Log.e(TAG, <span class=\"string\">\"dump crash info failed\"</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">dumpPhoneInfo</span><span class=\"params\">(PrintWriter pw)</span> <span class=\"keyword\">throws</span> NameNotFoundException </span>&#123;</div><div class=\"line\">        PackageManager pm = mContext.getPackageManager();</div><div class=\"line\">        PackageInfo pi = pm.getPackageInfo(mContext.getPackageName(), PackageManager.GET_ACTIVITIES);</div><div class=\"line\">        pw.print(<span class=\"string\">\"App Version: \"</span>);</div><div class=\"line\">        pw.print(pi.versionName);</div><div class=\"line\">        pw.print(<span class=\"string\">'_'</span>);</div><div class=\"line\">        pw.println(pi.versionCode);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//android版本号</span></div><div class=\"line\">        pw.print(<span class=\"string\">\"OS Version: \"</span>);</div><div class=\"line\">        pw.print(Build.VERSION.RELEASE);</div><div class=\"line\">        pw.print(<span class=\"string\">\"_\"</span>);</div><div class=\"line\">        pw.println(Build.VERSION.SDK_INT);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//手机制造商</span></div><div class=\"line\">        pw.print(<span class=\"string\">\"Vendor: \"</span>);</div><div class=\"line\">        pw.println(Build.MANUFACTURER);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//手机型号</span></div><div class=\"line\">        pw.print(<span class=\"string\">\"Model: \"</span>);</div><div class=\"line\">        pw.println(Build.MODEL);</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//cpu架构</span></div><div class=\"line\">        pw.print(<span class=\"string\">\"CPU ABI: \"</span>);</div><div class=\"line\">        pw.println(Build.CPU_ABI);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">uploadExceptionToServer</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">      <span class=\"comment\">//TODO Upload Exception Message To Your Web Server</span></div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h1><p>在Application的onCreate方法中配置一下就可以<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestApp</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> TestApp sInstance;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</div><div class=\"line\">        sInstance = <span class=\"keyword\">this</span>;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"comment\">//在这里为应用设置异常处理程序，然后我们的程序才能捕获未处理的异常</span></div><div class=\"line\">        CrashHandler crashHandler = CrashHandler.getInstance();</div><div class=\"line\">        crashHandler.init(<span class=\"keyword\">this</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> TestApp <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> sInstance;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>"},{"title":"一个规范的自定义View","date":"2016-03-11T12:46:25.000Z","_content":"一个规范的自定义View\n<!-- more -->\n\n# 一个不规范的自定义View\n\n这个自定义的View很简单，就是画一个圆，实现一个圆形效果的自定义View。\n\n先看一个不规范的自定义View是怎么做的\n\n```java\npublic class CircleView extends View {\n\n    private int mColor = Color.RED;\n    private Paint mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n\n    public CircleView(Context context) {\n        super(context);\n        init();\n    }\n\n    public CircleView(Context context, AttributeSet attrs) {\n        this(context, attrs, 0);\n    }\n\n    public CircleView(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        init();\n    }\n\n    private void init() {\n        mPaint.setColor(mColor);\n    }\n    \n    @Override\n    protected void onDraw(Canvas canvas) {\n        int width = getWidth();\n        int height = getHeight();\n        int radius = Math.min(width, height) / 2;\n        canvas.drawCircle(width / 2, height / 2, radius, mPaint);\n    }\n}\n\n```\n\n对应的xml\n\n```xml\n<com.ryg.chapter_4.ui.CircleView\n    android:id=\"@+id/circleView1\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"100dp\"\n    android:layout_margin=\"20dp\"\n    android:background=\"#000000\"\n    />\n```\n\n这样虽然也能画出一个圆来，但是这并不是一个规范的自定义View，主要存在以下问题：\n\n- android:padding属性是不能使用的\n- 使用wrap_content就相当于使用match_partent\n\n# 一个规范的自定义View\n为了解决以上问题需要重写View的onMeasure和onDraw方法。\n\n完整代码如下：\n\n```java\npublic class CircleView extends View {\n\n    private int mColor = Color.RED;\n    private Paint mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n\n    public CircleView(Context context) {\n        super(context);\n        init();\n    }\n\n    public CircleView(Context context, AttributeSet attrs) {\n        this(context, attrs, 0);\n    }\n\n    public CircleView(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.CircleView);\n        mColor = a.getColor(R.styleable.CircleView_circle_color, Color.RED);\n        a.recycle();\n        init();\n    }\n\n    private void init() {\n        mPaint.setColor(mColor);\n    }\n\n    @Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n        int widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);\n        int widthSpecSize = MeasureSpec.getSize(widthMeasureSpec);\n        int heightSpecMode = MeasureSpec.getMode(heightMeasureSpec);\n        int heightSpecSize = MeasureSpec.getSize(heightMeasureSpec);\n        if (widthSpecMode == MeasureSpec.AT_MOST\n                && heightSpecMode == MeasureSpec.AT_MOST) {\n            setMeasuredDimension(200, 200);\n        } else if (widthSpecMode == MeasureSpec.AT_MOST) {\n            setMeasuredDimension(200, heightSpecSize);\n        } else if (heightSpecMode == MeasureSpec.AT_MOST) {\n            setMeasuredDimension(widthSpecSize, 200);\n        }\n    }\n\n    @Override\n    protected void onDraw(Canvas canvas) {\n        super.onDraw(canvas);\n        final int paddingLeft = getPaddingLeft();\n        final int paddingRight = getPaddingRight();\n        final int paddingTop = getPaddingTop();\n        final int paddingBottom = getPaddingBottom();\n        int width = getWidth() - paddingLeft - paddingRight;\n        int height = getHeight() - paddingTop - paddingBottom;\n        int radius = Math.min(width, height) / 2;\n        canvas.drawCircle(paddingLeft + width / 2, paddingTop + height / 2,\n                radius, mPaint);\n    }\n}\n```\n\n# 添加自定义属性\n1. 在values文件夹下添加attrs.xml \n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <declare-styleable name=\"CircleView\">\n        <attr name=\"circle_color\" format=\"color\" />\n    </declare-styleable>\n</resources>\n```\n自定义的属性集合CircleView，在这个属性集合里只定义了一个格式为color的属性circle_color。\n2. 在View的构造函数中解析自定义的属性\n```java\n public CircleView(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.CircleView);\n        mColor = a.getColor(R.styleable.CircleView_circle_color, Color.RED);\n        a.recycle();\n        init();\n    }\n```\n3. 在布局文件中使用自定义属性\n```xml\n   <com.ryg.chapter_4.ui.CircleView\n        android:id=\"@+id/circleView1\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"100dp\"\n        android:layout_margin=\"20dp\"\n        android:background=\"#000000\"\n        android:padding=\"20dp\"\n        app:circle_color=\"@color/light_green\" />\n```\n在使用自定义的属性时，要在schemas声明：xmlns:app=\"http://schemas.android.com/apk/res-auto\"，使用时与普通属性类似，app:circle_color=\"@color/light_green\" 。\n\n# 自定义View须知\n- 自定义的View中margin属性可以使用，因为它是由父容器控制的\n- 直接继承View或ViewGroup的需要自己处理wrap_content\n- View要在onDraw方法中要处理padding，而ViewGroup要在onMeasure和onLayout中处理padding和margin\n- View中的post方法可以取代handler\n- 在View的onDetachedFromWindow中停止动画，防止内存泄露\n- 有滑动嵌套情形时，注意滑动冲突处理\n- 关于上面涉及到的一些类和方法的详细解释请参考[http://blog.csdn.net/l664675249/article/details/50774617](http://blog.csdn.net/l664675249/article/details/50774617)\n\n想要自定义出漂亮的View并不容易，只有多读，多写，多测，才能更好的掌握。自己造一个轮子，然后再对比成熟的轮子去找差距和不足。\n\n","source":"_posts/一个规范的自定义View.md","raw":"title: 一个规范的自定义View\ndate: 2016/3/11 20:46:25\ncategories:\n- Android\n- Android开发艺术探索笔记\ntags:\n- Android\n- View\n- 自定义View\n---\n一个规范的自定义View\n<!-- more -->\n\n# 一个不规范的自定义View\n\n这个自定义的View很简单，就是画一个圆，实现一个圆形效果的自定义View。\n\n先看一个不规范的自定义View是怎么做的\n\n```java\npublic class CircleView extends View {\n\n    private int mColor = Color.RED;\n    private Paint mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n\n    public CircleView(Context context) {\n        super(context);\n        init();\n    }\n\n    public CircleView(Context context, AttributeSet attrs) {\n        this(context, attrs, 0);\n    }\n\n    public CircleView(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        init();\n    }\n\n    private void init() {\n        mPaint.setColor(mColor);\n    }\n    \n    @Override\n    protected void onDraw(Canvas canvas) {\n        int width = getWidth();\n        int height = getHeight();\n        int radius = Math.min(width, height) / 2;\n        canvas.drawCircle(width / 2, height / 2, radius, mPaint);\n    }\n}\n\n```\n\n对应的xml\n\n```xml\n<com.ryg.chapter_4.ui.CircleView\n    android:id=\"@+id/circleView1\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"100dp\"\n    android:layout_margin=\"20dp\"\n    android:background=\"#000000\"\n    />\n```\n\n这样虽然也能画出一个圆来，但是这并不是一个规范的自定义View，主要存在以下问题：\n\n- android:padding属性是不能使用的\n- 使用wrap_content就相当于使用match_partent\n\n# 一个规范的自定义View\n为了解决以上问题需要重写View的onMeasure和onDraw方法。\n\n完整代码如下：\n\n```java\npublic class CircleView extends View {\n\n    private int mColor = Color.RED;\n    private Paint mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n\n    public CircleView(Context context) {\n        super(context);\n        init();\n    }\n\n    public CircleView(Context context, AttributeSet attrs) {\n        this(context, attrs, 0);\n    }\n\n    public CircleView(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.CircleView);\n        mColor = a.getColor(R.styleable.CircleView_circle_color, Color.RED);\n        a.recycle();\n        init();\n    }\n\n    private void init() {\n        mPaint.setColor(mColor);\n    }\n\n    @Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n        int widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);\n        int widthSpecSize = MeasureSpec.getSize(widthMeasureSpec);\n        int heightSpecMode = MeasureSpec.getMode(heightMeasureSpec);\n        int heightSpecSize = MeasureSpec.getSize(heightMeasureSpec);\n        if (widthSpecMode == MeasureSpec.AT_MOST\n                && heightSpecMode == MeasureSpec.AT_MOST) {\n            setMeasuredDimension(200, 200);\n        } else if (widthSpecMode == MeasureSpec.AT_MOST) {\n            setMeasuredDimension(200, heightSpecSize);\n        } else if (heightSpecMode == MeasureSpec.AT_MOST) {\n            setMeasuredDimension(widthSpecSize, 200);\n        }\n    }\n\n    @Override\n    protected void onDraw(Canvas canvas) {\n        super.onDraw(canvas);\n        final int paddingLeft = getPaddingLeft();\n        final int paddingRight = getPaddingRight();\n        final int paddingTop = getPaddingTop();\n        final int paddingBottom = getPaddingBottom();\n        int width = getWidth() - paddingLeft - paddingRight;\n        int height = getHeight() - paddingTop - paddingBottom;\n        int radius = Math.min(width, height) / 2;\n        canvas.drawCircle(paddingLeft + width / 2, paddingTop + height / 2,\n                radius, mPaint);\n    }\n}\n```\n\n# 添加自定义属性\n1. 在values文件夹下添加attrs.xml \n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <declare-styleable name=\"CircleView\">\n        <attr name=\"circle_color\" format=\"color\" />\n    </declare-styleable>\n</resources>\n```\n自定义的属性集合CircleView，在这个属性集合里只定义了一个格式为color的属性circle_color。\n2. 在View的构造函数中解析自定义的属性\n```java\n public CircleView(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.CircleView);\n        mColor = a.getColor(R.styleable.CircleView_circle_color, Color.RED);\n        a.recycle();\n        init();\n    }\n```\n3. 在布局文件中使用自定义属性\n```xml\n   <com.ryg.chapter_4.ui.CircleView\n        android:id=\"@+id/circleView1\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"100dp\"\n        android:layout_margin=\"20dp\"\n        android:background=\"#000000\"\n        android:padding=\"20dp\"\n        app:circle_color=\"@color/light_green\" />\n```\n在使用自定义的属性时，要在schemas声明：xmlns:app=\"http://schemas.android.com/apk/res-auto\"，使用时与普通属性类似，app:circle_color=\"@color/light_green\" 。\n\n# 自定义View须知\n- 自定义的View中margin属性可以使用，因为它是由父容器控制的\n- 直接继承View或ViewGroup的需要自己处理wrap_content\n- View要在onDraw方法中要处理padding，而ViewGroup要在onMeasure和onLayout中处理padding和margin\n- View中的post方法可以取代handler\n- 在View的onDetachedFromWindow中停止动画，防止内存泄露\n- 有滑动嵌套情形时，注意滑动冲突处理\n- 关于上面涉及到的一些类和方法的详细解释请参考[http://blog.csdn.net/l664675249/article/details/50774617](http://blog.csdn.net/l664675249/article/details/50774617)\n\n想要自定义出漂亮的View并不容易，只有多读，多写，多测，才能更好的掌握。自己造一个轮子，然后再对比成熟的轮子去找差距和不足。\n\n","slug":"一个规范的自定义View","published":1,"updated":"2016-12-28T12:14:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix8xu7180017wwv64jzsj08t","content":"<p>一个规范的自定义View<br><a id=\"more\"></a></p>\n<h1 id=\"一个不规范的自定义View\"><a href=\"#一个不规范的自定义View\" class=\"headerlink\" title=\"一个不规范的自定义View\"></a>一个不规范的自定义View</h1><p>这个自定义的View很简单，就是画一个圆，实现一个圆形效果的自定义View。</p>\n<p>先看一个不规范的自定义View是怎么做的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CircleView</span> <span class=\"keyword\">extends</span> <span class=\"title\">View</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mColor = Color.RED;</div><div class=\"line\">    <span class=\"keyword\">private</span> Paint mPaint = <span class=\"keyword\">new</span> Paint(Paint.ANTI_ALIAS_FLAG);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleView</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context);</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleView</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>(context, attrs, <span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleView</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mPaint.setColor(mColor);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> width = getWidth();</div><div class=\"line\">        <span class=\"keyword\">int</span> height = getHeight();</div><div class=\"line\">        <span class=\"keyword\">int</span> radius = Math.min(width, height) / <span class=\"number\">2</span>;</div><div class=\"line\">        canvas.drawCircle(width / <span class=\"number\">2</span>, height / <span class=\"number\">2</span>, radius, mPaint);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对应的xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">com.ryg.chapter_4.ui.CircleView</span></span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/circleView1\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"100dp\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"20dp\"</span></div><div class=\"line\">    <span class=\"attr\">android:background</span>=<span class=\"string\">\"#000000\"</span></div><div class=\"line\">    /&gt;</div></pre></td></tr></table></figure>\n<p>这样虽然也能画出一个圆来，但是这并不是一个规范的自定义View，主要存在以下问题：</p>\n<ul>\n<li>android:padding属性是不能使用的</li>\n<li>使用wrap_content就相当于使用match_partent</li>\n</ul>\n<h1 id=\"一个规范的自定义View\"><a href=\"#一个规范的自定义View\" class=\"headerlink\" title=\"一个规范的自定义View\"></a>一个规范的自定义View</h1><p>为了解决以上问题需要重写View的onMeasure和onDraw方法。</p>\n<p>完整代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CircleView</span> <span class=\"keyword\">extends</span> <span class=\"title\">View</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mColor = Color.RED;</div><div class=\"line\">    <span class=\"keyword\">private</span> Paint mPaint = <span class=\"keyword\">new</span> Paint(Paint.ANTI_ALIAS_FLAG);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleView</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context);</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleView</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>(context, attrs, <span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleView</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</div><div class=\"line\">        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.CircleView);</div><div class=\"line\">        mColor = a.getColor(R.styleable.CircleView_circle_color, Color.RED);</div><div class=\"line\">        a.recycle();</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mPaint.setColor(mColor);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class=\"line\">        <span class=\"keyword\">int</span> widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class=\"line\">        <span class=\"keyword\">int</span> widthSpecSize = MeasureSpec.getSize(widthMeasureSpec);</div><div class=\"line\">        <span class=\"keyword\">int</span> heightSpecMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class=\"line\">        <span class=\"keyword\">int</span> heightSpecSize = MeasureSpec.getSize(heightMeasureSpec);</div><div class=\"line\">        <span class=\"keyword\">if</span> (widthSpecMode == MeasureSpec.AT_MOST</div><div class=\"line\">                &amp;&amp; heightSpecMode == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">            setMeasuredDimension(<span class=\"number\">200</span>, <span class=\"number\">200</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (widthSpecMode == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">            setMeasuredDimension(<span class=\"number\">200</span>, heightSpecSize);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (heightSpecMode == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">            setMeasuredDimension(widthSpecSize, <span class=\"number\">200</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDraw(canvas);</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> paddingLeft = getPaddingLeft();</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> paddingRight = getPaddingRight();</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> paddingTop = getPaddingTop();</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> paddingBottom = getPaddingBottom();</div><div class=\"line\">        <span class=\"keyword\">int</span> width = getWidth() - paddingLeft - paddingRight;</div><div class=\"line\">        <span class=\"keyword\">int</span> height = getHeight() - paddingTop - paddingBottom;</div><div class=\"line\">        <span class=\"keyword\">int</span> radius = Math.min(width, height) / <span class=\"number\">2</span>;</div><div class=\"line\">        canvas.drawCircle(paddingLeft + width / <span class=\"number\">2</span>, paddingTop + height / <span class=\"number\">2</span>,</div><div class=\"line\">                radius, mPaint);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"添加自定义属性\"><a href=\"#添加自定义属性\" class=\"headerlink\" title=\"添加自定义属性\"></a>添加自定义属性</h1><ol>\n<li>在values文件夹下添加attrs.xml <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">declare-styleable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"CircleView\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"color\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">declare-styleable</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>自定义的属性集合CircleView，在这个属性集合里只定义了一个格式为color的属性circle_color。</p>\n<ol>\n<li><p>在View的构造函数中解析自定义的属性</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleView</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</div><div class=\"line\">       TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.CircleView);</div><div class=\"line\">       mColor = a.getColor(R.styleable.CircleView_circle_color, Color.RED);</div><div class=\"line\">       a.recycle();</div><div class=\"line\">       init();</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>在布局文件中使用自定义属性</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">com.ryg.chapter_4.ui.CircleView</span></span></div><div class=\"line\">     <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/circleView1\"</span></div><div class=\"line\">     <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">     <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"100dp\"</span></div><div class=\"line\">     <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"20dp\"</span></div><div class=\"line\">     <span class=\"attr\">android:background</span>=<span class=\"string\">\"#000000\"</span></div><div class=\"line\">     <span class=\"attr\">android:padding</span>=<span class=\"string\">\"20dp\"</span></div><div class=\"line\">     <span class=\"attr\">app:circle_color</span>=<span class=\"string\">\"@color/light_green\"</span> /&gt;</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在使用自定义的属性时，要在schemas声明：xmlns:app=”<a href=\"http://schemas.android.com/apk/res-auto&quot;，使用时与普通属性类似，app:circle_color=&quot;@color/light_green\" target=\"_blank\" rel=\"external\">http://schemas.android.com/apk/res-auto&quot;，使用时与普通属性类似，app:circle_color=&quot;@color/light_green</a>“ 。</p>\n<h1 id=\"自定义View须知\"><a href=\"#自定义View须知\" class=\"headerlink\" title=\"自定义View须知\"></a>自定义View须知</h1><ul>\n<li>自定义的View中margin属性可以使用，因为它是由父容器控制的</li>\n<li>直接继承View或ViewGroup的需要自己处理wrap_content</li>\n<li>View要在onDraw方法中要处理padding，而ViewGroup要在onMeasure和onLayout中处理padding和margin</li>\n<li>View中的post方法可以取代handler</li>\n<li>在View的onDetachedFromWindow中停止动画，防止内存泄露</li>\n<li>有滑动嵌套情形时，注意滑动冲突处理</li>\n<li>关于上面涉及到的一些类和方法的详细解释请参考<a href=\"http://blog.csdn.net/l664675249/article/details/50774617\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/l664675249/article/details/50774617</a></li>\n</ul>\n<p>想要自定义出漂亮的View并不容易，只有多读，多写，多测，才能更好的掌握。自己造一个轮子，然后再对比成熟的轮子去找差距和不足。</p>\n","excerpt":"<p>一个规范的自定义View<br>","more":"</p>\n<h1 id=\"一个不规范的自定义View\"><a href=\"#一个不规范的自定义View\" class=\"headerlink\" title=\"一个不规范的自定义View\"></a>一个不规范的自定义View</h1><p>这个自定义的View很简单，就是画一个圆，实现一个圆形效果的自定义View。</p>\n<p>先看一个不规范的自定义View是怎么做的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CircleView</span> <span class=\"keyword\">extends</span> <span class=\"title\">View</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mColor = Color.RED;</div><div class=\"line\">    <span class=\"keyword\">private</span> Paint mPaint = <span class=\"keyword\">new</span> Paint(Paint.ANTI_ALIAS_FLAG);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleView</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context);</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleView</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>(context, attrs, <span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleView</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mPaint.setColor(mColor);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">int</span> width = getWidth();</div><div class=\"line\">        <span class=\"keyword\">int</span> height = getHeight();</div><div class=\"line\">        <span class=\"keyword\">int</span> radius = Math.min(width, height) / <span class=\"number\">2</span>;</div><div class=\"line\">        canvas.drawCircle(width / <span class=\"number\">2</span>, height / <span class=\"number\">2</span>, radius, mPaint);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>对应的xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">com.ryg.chapter_4.ui.CircleView</span></div><div class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/circleView1\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"100dp\"</span></div><div class=\"line\">    <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"20dp\"</span></div><div class=\"line\">    <span class=\"attr\">android:background</span>=<span class=\"string\">\"#000000\"</span></div><div class=\"line\">    /&gt;</span></div></pre></td></tr></table></figure>\n<p>这样虽然也能画出一个圆来，但是这并不是一个规范的自定义View，主要存在以下问题：</p>\n<ul>\n<li>android:padding属性是不能使用的</li>\n<li>使用wrap_content就相当于使用match_partent</li>\n</ul>\n<h1 id=\"一个规范的自定义View\"><a href=\"#一个规范的自定义View\" class=\"headerlink\" title=\"一个规范的自定义View\"></a>一个规范的自定义View</h1><p>为了解决以上问题需要重写View的onMeasure和onDraw方法。</p>\n<p>完整代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CircleView</span> <span class=\"keyword\">extends</span> <span class=\"title\">View</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mColor = Color.RED;</div><div class=\"line\">    <span class=\"keyword\">private</span> Paint mPaint = <span class=\"keyword\">new</span> Paint(Paint.ANTI_ALIAS_FLAG);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleView</span><span class=\"params\">(Context context)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context);</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleView</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>(context, attrs, <span class=\"number\">0</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleView</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</div><div class=\"line\">        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.CircleView);</div><div class=\"line\">        mColor = a.getColor(R.styleable.CircleView_circle_color, Color.RED);</div><div class=\"line\">        a.recycle();</div><div class=\"line\">        init();</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        mPaint.setColor(mColor);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class=\"line\">        <span class=\"keyword\">int</span> widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class=\"line\">        <span class=\"keyword\">int</span> widthSpecSize = MeasureSpec.getSize(widthMeasureSpec);</div><div class=\"line\">        <span class=\"keyword\">int</span> heightSpecMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class=\"line\">        <span class=\"keyword\">int</span> heightSpecSize = MeasureSpec.getSize(heightMeasureSpec);</div><div class=\"line\">        <span class=\"keyword\">if</span> (widthSpecMode == MeasureSpec.AT_MOST</div><div class=\"line\">                &amp;&amp; heightSpecMode == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">            setMeasuredDimension(<span class=\"number\">200</span>, <span class=\"number\">200</span>);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (widthSpecMode == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">            setMeasuredDimension(<span class=\"number\">200</span>, heightSpecSize);</div><div class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (heightSpecMode == MeasureSpec.AT_MOST) &#123;</div><div class=\"line\">            setMeasuredDimension(widthSpecSize, <span class=\"number\">200</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@Override</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>.onDraw(canvas);</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> paddingLeft = getPaddingLeft();</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> paddingRight = getPaddingRight();</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> paddingTop = getPaddingTop();</div><div class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> paddingBottom = getPaddingBottom();</div><div class=\"line\">        <span class=\"keyword\">int</span> width = getWidth() - paddingLeft - paddingRight;</div><div class=\"line\">        <span class=\"keyword\">int</span> height = getHeight() - paddingTop - paddingBottom;</div><div class=\"line\">        <span class=\"keyword\">int</span> radius = Math.min(width, height) / <span class=\"number\">2</span>;</div><div class=\"line\">        canvas.drawCircle(paddingLeft + width / <span class=\"number\">2</span>, paddingTop + height / <span class=\"number\">2</span>,</div><div class=\"line\">                radius, mPaint);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h1 id=\"添加自定义属性\"><a href=\"#添加自定义属性\" class=\"headerlink\" title=\"添加自定义属性\"></a>添加自定义属性</h1><ol>\n<li>在values文件夹下添加attrs.xml <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">declare-styleable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"CircleView\"</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"color\"</span> /&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">declare-styleable</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>自定义的属性集合CircleView，在这个属性集合里只定义了一个格式为color的属性circle_color。</p>\n<ol>\n<li><p>在View的构造函数中解析自定义的属性</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleView</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</div><div class=\"line\">       <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</div><div class=\"line\">       TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.CircleView);</div><div class=\"line\">       mColor = a.getColor(R.styleable.CircleView_circle_color, Color.RED);</div><div class=\"line\">       a.recycle();</div><div class=\"line\">       init();</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>\n</li>\n<li><p>在布局文件中使用自定义属性</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">com.ryg.chapter_4.ui.CircleView</span></div><div class=\"line\">     <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/circleView1\"</span></div><div class=\"line\">     <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></div><div class=\"line\">     <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"100dp\"</span></div><div class=\"line\">     <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"20dp\"</span></div><div class=\"line\">     <span class=\"attr\">android:background</span>=<span class=\"string\">\"#000000\"</span></div><div class=\"line\">     <span class=\"attr\">android:padding</span>=<span class=\"string\">\"20dp\"</span></div><div class=\"line\">     <span class=\"attr\">app:circle_color</span>=<span class=\"string\">\"@color/light_green\"</span> /&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在使用自定义的属性时，要在schemas声明：xmlns:app=”<a href=\"http://schemas.android.com/apk/res-auto&quot;，使用时与普通属性类似，app:circle_color=&quot;@color/light_green\">http://schemas.android.com/apk/res-auto&quot;，使用时与普通属性类似，app:circle_color=&quot;@color/light_green</a>“ 。</p>\n<h1 id=\"自定义View须知\"><a href=\"#自定义View须知\" class=\"headerlink\" title=\"自定义View须知\"></a>自定义View须知</h1><ul>\n<li>自定义的View中margin属性可以使用，因为它是由父容器控制的</li>\n<li>直接继承View或ViewGroup的需要自己处理wrap_content</li>\n<li>View要在onDraw方法中要处理padding，而ViewGroup要在onMeasure和onLayout中处理padding和margin</li>\n<li>View中的post方法可以取代handler</li>\n<li>在View的onDetachedFromWindow中停止动画，防止内存泄露</li>\n<li>有滑动嵌套情形时，注意滑动冲突处理</li>\n<li>关于上面涉及到的一些类和方法的详细解释请参考<a href=\"http://blog.csdn.net/l664675249/article/details/50774617\">http://blog.csdn.net/l664675249/article/details/50774617</a></li>\n</ul>\n<p>想要自定义出漂亮的View并不容易，只有多读，多写，多测，才能更好的掌握。自己造一个轮子，然后再对比成熟的轮子去找差距和不足。</p>"},{"title":"属性动画","date":"2016-03-11T12:46:25.000Z","_content":"Animator最早出现在Android 3.0 中，和之前的Animation框架相比，Animator更加的灵活并且具有更多的功能，官方推荐使用Animator代替Animation。在3.0之前可以使用[nineoldandroids](http://nineoldandroids.com/)来实现相同的效果。\n<!-- more -->\n\n使用Animator前需要先了解几个概念：\n\n - Duration：动画播放时间\n - Time interpolation：属性值随着时间的改变情况，比如线性增长或者先快后慢\n - Repeat count：动画重复播放次数\n - Animator sets：动画集，可以使多个动画同时播放或者顺序播放\n - Frame refresh delay：动画每一帧的刷新时间，一般默认10ms刷新一次\n\n#Property Animation\nProperty Animation非常强大，他可以让你几乎在任何东西上播放动画。Property Animation的结构如下图：\n![](http://img.blog.csdn.net/20151207134608386)\n**ValueAnimator用来跟踪动画运行的时间和属性的值。其中TimeInterpolator指定了动画的 interpolation，如AccelerateDecelerateInterpolator。TypeEvaluator指定属性的值如何计算比如IntEvaluator.**\n\n#示例\n点击一个Button，Button的宽和高分别增加到500dp和400dp。\n![Click](http://img.blog.csdn.net/20160308214301229)\n\n#Property Animation与View Animation的区别\n\n - View Animation只能对View添加动画\n - View Animation只能改变如scale、rotation等值，不能改变background color等属性\n - View Animation改变的只是View画的位置，并不是真正的View，比如一个button从左到右移动，触发onClick方法的位置还是初试的位置。\n - View Animation实现起来比Property Animation简单\n\n# Evaluator\n以IntEvaluator为例，源码如下：\n```java\n   public Integer evaluate(float fraction, Integer startValue, Integer endValue) {\n        int startInt = startValue;\n        return (int)(startInt + fraction * (endValue - startInt));\n    }\n```\n很简单，就是根据初始值，结束值和当前时间与总时长的比例这三个值计算出当前某属性应该的值。\n\n#Animator\nAnimator提供了创建动画的基本结构，通常我们不直接使用它，而是使用它的子类。\n##ValueAnimator\n使用ofInt(), ofFloat(), 或者 ofObject()方法来获得ValueAnimator实例\n\n```java\nValueAnimator animation = ValueAnimator.ofFloat(0f, 1f);\nanimation.setDuration(1000);\nanimation.start();\n```\n当然也可以自定义类型\n\n```java\nValueAnimator animation = ValueAnimator.ofObject(new MyTypeEvaluator(), startPropertyValue, endPropertyValue);\nanimation.setDuration(1000);\nanimation.start();\n```\n###示例动画的源码\n```java\n  button.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                final IntEvaluator mEvaluator = new IntEvaluator();\n                ValueAnimator valueAnimator = ValueAnimator.ofInt(1, 100);\n                valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n                    @Override\n                    public void onAnimationUpdate(ValueAnimator valueAnimator) {\n                        float fraction = valueAnimator.getAnimatedFraction();\n                        button.getLayoutParams().width = mEvaluator.evaluate(fraction, button.getWidth(), 500);\n                        button.getLayoutParams().height = mEvaluator.evaluate(fraction, button.getHeight(), 400);\n                        button.requestLayout();\n                    }\n                });\n                valueAnimator.setDuration(1000).start();\n            }\n        });\n```\n\n**注：别忘了 button.requestLayout()和valueAnimator.setDuration(1000).start()。**\n\n##ObjectAnimator\nObjectAnimator是ValueAnimator 的子类。可以直接对目标属性计算。\n对foo这个对象的alpha属性做从0到1的变化，代码如下：\n\n```java\nObjectAnimator anim = ObjectAnimator.ofFloat(foo, \"alpha\", 0f, 1f);\nanim.setDuration(1000);\nanim.start();\n```\n为了使ObjectAnimator正常运行，还需要如下步骤：\n\n - 要修改的属性必须有set方法，如setFoo()\n - 如果你在values...参数中只指定了一个参数，默认为这是最后一个参数。参数必须有get方法，如getFoo()\n - 有些属性需要手动刷新，所以要在onAnimationUpdate() 中调用invalidate()。\n\n如果没有要修改的属性必须有set方法，有如下三个解决办法：\n\n - 如果有权限，添加set方法\n   但是很多情况下我们是没有的...\n - 使用这个类的wrapper class（包装类）\n   ObjectAnimator.ofFloat(wrapper, \"alpha\", 0f, 1f),在这个包装类的setAlph中对原来View的alpha属性值进行更改\n - 使用ValueAnimator\n\n#AnimatorSet\n\n一个Set中包含多个动画，使用起来也很方便，直接上代码。\n\n```java\nAnimatorSet bouncer = new AnimatorSet();\nbouncer.play(bounceAnim).before(squashAnim1);\nbouncer.play(squashAnim1).with(squashAnim2);\nbouncer.play(squashAnim1).with(stretchAnim1);\nbouncer.play(squashAnim1).with(stretchAnim2);\nbouncer.play(bounceBackAnim).after(stretchAnim2);\nValueAnimator fadeAnim = ObjectAnimator.ofFloat(newBall, \"alpha\", 1f, 0f);\nfadeAnim.setDuration(250);\nAnimatorSet animatorSet = new AnimatorSet();\nanimatorSet.play(bouncer).before(fadeAnim);\nanimatorSet.start();\n```\n#在XML中声明动画\n\n新建res/animator/目录\n每种Animator对应的标签\n\n - ValueAnimator - <animator>\n - ObjectAnimator - <objectAnimator>\n - AnimatorSet - <set>\n\n```html\n<set android:ordering=\"sequentially\">\n    <set>\n        <objectAnimator\n            android:propertyName=\"x\"\n            android:duration=\"500\"\n            android:valueTo=\"400\"\n            android:valueType=\"intType\"/>\n        <objectAnimator\n            android:propertyName=\"y\"\n            android:duration=\"500\"\n            android:valueTo=\"300\"\n            android:valueType=\"intType\"/>\n    </set>\n    <objectAnimator\n        android:propertyName=\"alpha\"\n        android:duration=\"500\"\n        android:valueTo=\"1f\"/>\n</set>\n```\n在Activity中调用\n\n```java\nAnimatorSet set = (AnimatorSet) AnimatorInflater.loadAnimator(myContext,\n    R.anim.property_animator);\nset.setTarget(myObject);\nset.start();\n```\n\n","source":"_posts/属性动画.md","raw":"title: 属性动画\ndate: 2016/3/11 20:46:25\ncategories:\n- Android\n- Android开发艺术探索笔记\ntags:\n- Android\n- View\n- 属性动画\n---\nAnimator最早出现在Android 3.0 中，和之前的Animation框架相比，Animator更加的灵活并且具有更多的功能，官方推荐使用Animator代替Animation。在3.0之前可以使用[nineoldandroids](http://nineoldandroids.com/)来实现相同的效果。\n<!-- more -->\n\n使用Animator前需要先了解几个概念：\n\n - Duration：动画播放时间\n - Time interpolation：属性值随着时间的改变情况，比如线性增长或者先快后慢\n - Repeat count：动画重复播放次数\n - Animator sets：动画集，可以使多个动画同时播放或者顺序播放\n - Frame refresh delay：动画每一帧的刷新时间，一般默认10ms刷新一次\n\n#Property Animation\nProperty Animation非常强大，他可以让你几乎在任何东西上播放动画。Property Animation的结构如下图：\n![](http://img.blog.csdn.net/20151207134608386)\n**ValueAnimator用来跟踪动画运行的时间和属性的值。其中TimeInterpolator指定了动画的 interpolation，如AccelerateDecelerateInterpolator。TypeEvaluator指定属性的值如何计算比如IntEvaluator.**\n\n#示例\n点击一个Button，Button的宽和高分别增加到500dp和400dp。\n![Click](http://img.blog.csdn.net/20160308214301229)\n\n#Property Animation与View Animation的区别\n\n - View Animation只能对View添加动画\n - View Animation只能改变如scale、rotation等值，不能改变background color等属性\n - View Animation改变的只是View画的位置，并不是真正的View，比如一个button从左到右移动，触发onClick方法的位置还是初试的位置。\n - View Animation实现起来比Property Animation简单\n\n# Evaluator\n以IntEvaluator为例，源码如下：\n```java\n   public Integer evaluate(float fraction, Integer startValue, Integer endValue) {\n        int startInt = startValue;\n        return (int)(startInt + fraction * (endValue - startInt));\n    }\n```\n很简单，就是根据初始值，结束值和当前时间与总时长的比例这三个值计算出当前某属性应该的值。\n\n#Animator\nAnimator提供了创建动画的基本结构，通常我们不直接使用它，而是使用它的子类。\n##ValueAnimator\n使用ofInt(), ofFloat(), 或者 ofObject()方法来获得ValueAnimator实例\n\n```java\nValueAnimator animation = ValueAnimator.ofFloat(0f, 1f);\nanimation.setDuration(1000);\nanimation.start();\n```\n当然也可以自定义类型\n\n```java\nValueAnimator animation = ValueAnimator.ofObject(new MyTypeEvaluator(), startPropertyValue, endPropertyValue);\nanimation.setDuration(1000);\nanimation.start();\n```\n###示例动画的源码\n```java\n  button.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                final IntEvaluator mEvaluator = new IntEvaluator();\n                ValueAnimator valueAnimator = ValueAnimator.ofInt(1, 100);\n                valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n                    @Override\n                    public void onAnimationUpdate(ValueAnimator valueAnimator) {\n                        float fraction = valueAnimator.getAnimatedFraction();\n                        button.getLayoutParams().width = mEvaluator.evaluate(fraction, button.getWidth(), 500);\n                        button.getLayoutParams().height = mEvaluator.evaluate(fraction, button.getHeight(), 400);\n                        button.requestLayout();\n                    }\n                });\n                valueAnimator.setDuration(1000).start();\n            }\n        });\n```\n\n**注：别忘了 button.requestLayout()和valueAnimator.setDuration(1000).start()。**\n\n##ObjectAnimator\nObjectAnimator是ValueAnimator 的子类。可以直接对目标属性计算。\n对foo这个对象的alpha属性做从0到1的变化，代码如下：\n\n```java\nObjectAnimator anim = ObjectAnimator.ofFloat(foo, \"alpha\", 0f, 1f);\nanim.setDuration(1000);\nanim.start();\n```\n为了使ObjectAnimator正常运行，还需要如下步骤：\n\n - 要修改的属性必须有set方法，如setFoo()\n - 如果你在values...参数中只指定了一个参数，默认为这是最后一个参数。参数必须有get方法，如getFoo()\n - 有些属性需要手动刷新，所以要在onAnimationUpdate() 中调用invalidate()。\n\n如果没有要修改的属性必须有set方法，有如下三个解决办法：\n\n - 如果有权限，添加set方法\n   但是很多情况下我们是没有的...\n - 使用这个类的wrapper class（包装类）\n   ObjectAnimator.ofFloat(wrapper, \"alpha\", 0f, 1f),在这个包装类的setAlph中对原来View的alpha属性值进行更改\n - 使用ValueAnimator\n\n#AnimatorSet\n\n一个Set中包含多个动画，使用起来也很方便，直接上代码。\n\n```java\nAnimatorSet bouncer = new AnimatorSet();\nbouncer.play(bounceAnim).before(squashAnim1);\nbouncer.play(squashAnim1).with(squashAnim2);\nbouncer.play(squashAnim1).with(stretchAnim1);\nbouncer.play(squashAnim1).with(stretchAnim2);\nbouncer.play(bounceBackAnim).after(stretchAnim2);\nValueAnimator fadeAnim = ObjectAnimator.ofFloat(newBall, \"alpha\", 1f, 0f);\nfadeAnim.setDuration(250);\nAnimatorSet animatorSet = new AnimatorSet();\nanimatorSet.play(bouncer).before(fadeAnim);\nanimatorSet.start();\n```\n#在XML中声明动画\n\n新建res/animator/目录\n每种Animator对应的标签\n\n - ValueAnimator - <animator>\n - ObjectAnimator - <objectAnimator>\n - AnimatorSet - <set>\n\n```html\n<set android:ordering=\"sequentially\">\n    <set>\n        <objectAnimator\n            android:propertyName=\"x\"\n            android:duration=\"500\"\n            android:valueTo=\"400\"\n            android:valueType=\"intType\"/>\n        <objectAnimator\n            android:propertyName=\"y\"\n            android:duration=\"500\"\n            android:valueTo=\"300\"\n            android:valueType=\"intType\"/>\n    </set>\n    <objectAnimator\n        android:propertyName=\"alpha\"\n        android:duration=\"500\"\n        android:valueTo=\"1f\"/>\n</set>\n```\n在Activity中调用\n\n```java\nAnimatorSet set = (AnimatorSet) AnimatorInflater.loadAnimator(myContext,\n    R.anim.property_animator);\nset.setTarget(myObject);\nset.start();\n```\n\n","slug":"属性动画","published":1,"updated":"2016-12-28T12:14:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix8xu71a001awwv6q24pqkd8","content":"<p>Animator最早出现在Android 3.0 中，和之前的Animation框架相比，Animator更加的灵活并且具有更多的功能，官方推荐使用Animator代替Animation。在3.0之前可以使用<a href=\"http://nineoldandroids.com/\" target=\"_blank\" rel=\"external\">nineoldandroids</a>来实现相同的效果。<br><a id=\"more\"></a></p>\n<p>使用Animator前需要先了解几个概念：</p>\n<ul>\n<li>Duration：动画播放时间</li>\n<li>Time interpolation：属性值随着时间的改变情况，比如线性增长或者先快后慢</li>\n<li>Repeat count：动画重复播放次数</li>\n<li>Animator sets：动画集，可以使多个动画同时播放或者顺序播放</li>\n<li>Frame refresh delay：动画每一帧的刷新时间，一般默认10ms刷新一次</li>\n</ul>\n<p>#Property Animation<br>Property Animation非常强大，他可以让你几乎在任何东西上播放动画。Property Animation的结构如下图：<br><img src=\"http://img.blog.csdn.net/20151207134608386\" alt=\"\"><br><strong>ValueAnimator用来跟踪动画运行的时间和属性的值。其中TimeInterpolator指定了动画的 interpolation，如AccelerateDecelerateInterpolator。TypeEvaluator指定属性的值如何计算比如IntEvaluator.</strong></p>\n<p>#示例<br>点击一个Button，Button的宽和高分别增加到500dp和400dp。<br><img src=\"http://img.blog.csdn.net/20160308214301229\" alt=\"Click\"></p>\n<p>#Property Animation与View Animation的区别</p>\n<ul>\n<li>View Animation只能对View添加动画</li>\n<li>View Animation只能改变如scale、rotation等值，不能改变background color等属性</li>\n<li>View Animation改变的只是View画的位置，并不是真正的View，比如一个button从左到右移动，触发onClick方法的位置还是初试的位置。</li>\n<li>View Animation实现起来比Property Animation简单</li>\n</ul>\n<h1 id=\"Evaluator\"><a href=\"#Evaluator\" class=\"headerlink\" title=\"Evaluator\"></a>Evaluator</h1><p>以IntEvaluator为例，源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">evaluate</span><span class=\"params\">(<span class=\"keyword\">float</span> fraction, Integer startValue, Integer endValue)</span> </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">int</span> startInt = startValue;</div><div class=\"line\">     <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>)(startInt + fraction * (endValue - startInt));</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p>很简单，就是根据初始值，结束值和当前时间与总时长的比例这三个值计算出当前某属性应该的值。</p>\n<p>#Animator<br>Animator提供了创建动画的基本结构，通常我们不直接使用它，而是使用它的子类。</p>\n<p>##ValueAnimator<br>使用ofInt(), ofFloat(), 或者 ofObject()方法来获得ValueAnimator实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ValueAnimator animation = ValueAnimator.ofFloat(<span class=\"number\">0f</span>, <span class=\"number\">1f</span>);</div><div class=\"line\">animation.setDuration(<span class=\"number\">1000</span>);</div><div class=\"line\">animation.start();</div></pre></td></tr></table></figure>\n<p>当然也可以自定义类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ValueAnimator animation = ValueAnimator.ofObject(<span class=\"keyword\">new</span> MyTypeEvaluator(), startPropertyValue, endPropertyValue);</div><div class=\"line\">animation.setDuration(<span class=\"number\">1000</span>);</div><div class=\"line\">animation.start();</div></pre></td></tr></table></figure>\n<p>###示例动画的源码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">button.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">          <span class=\"meta\">@Override</span></div><div class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">              <span class=\"keyword\">final</span> IntEvaluator mEvaluator = <span class=\"keyword\">new</span> IntEvaluator();</div><div class=\"line\">              ValueAnimator valueAnimator = ValueAnimator.ofInt(<span class=\"number\">1</span>, <span class=\"number\">100</span>);</div><div class=\"line\">              valueAnimator.addUpdateListener(<span class=\"keyword\">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class=\"line\">                  <span class=\"meta\">@Override</span></div><div class=\"line\">                  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationUpdate</span><span class=\"params\">(ValueAnimator valueAnimator)</span> </span>&#123;</div><div class=\"line\">                      <span class=\"keyword\">float</span> fraction = valueAnimator.getAnimatedFraction();</div><div class=\"line\">                      button.getLayoutParams().width = mEvaluator.evaluate(fraction, button.getWidth(), <span class=\"number\">500</span>);</div><div class=\"line\">                      button.getLayoutParams().height = mEvaluator.evaluate(fraction, button.getHeight(), <span class=\"number\">400</span>);</div><div class=\"line\">                      button.requestLayout();</div><div class=\"line\">                  &#125;</div><div class=\"line\">              &#125;);</div><div class=\"line\">              valueAnimator.setDuration(<span class=\"number\">1000</span>).start();</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;);</div></pre></td></tr></table></figure></p>\n<p><strong>注：别忘了 button.requestLayout()和valueAnimator.setDuration(1000).start()。</strong></p>\n<p>##ObjectAnimator<br>ObjectAnimator是ValueAnimator 的子类。可以直接对目标属性计算。<br>对foo这个对象的alpha属性做从0到1的变化，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ObjectAnimator anim = ObjectAnimator.ofFloat(foo, <span class=\"string\">\"alpha\"</span>, <span class=\"number\">0f</span>, <span class=\"number\">1f</span>);</div><div class=\"line\">anim.setDuration(<span class=\"number\">1000</span>);</div><div class=\"line\">anim.start();</div></pre></td></tr></table></figure>\n<p>为了使ObjectAnimator正常运行，还需要如下步骤：</p>\n<ul>\n<li>要修改的属性必须有set方法，如setFoo()</li>\n<li>如果你在values…参数中只指定了一个参数，默认为这是最后一个参数。参数必须有get方法，如getFoo()</li>\n<li>有些属性需要手动刷新，所以要在onAnimationUpdate() 中调用invalidate()。</li>\n</ul>\n<p>如果没有要修改的属性必须有set方法，有如下三个解决办法：</p>\n<ul>\n<li>如果有权限，添加set方法<br>但是很多情况下我们是没有的…</li>\n<li>使用这个类的wrapper class（包装类）<br>ObjectAnimator.ofFloat(wrapper, “alpha”, 0f, 1f),在这个包装类的setAlph中对原来View的alpha属性值进行更改</li>\n<li>使用ValueAnimator</li>\n</ul>\n<p>#AnimatorSet</p>\n<p>一个Set中包含多个动画，使用起来也很方便，直接上代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">AnimatorSet bouncer = <span class=\"keyword\">new</span> AnimatorSet();</div><div class=\"line\">bouncer.play(bounceAnim).before(squashAnim1);</div><div class=\"line\">bouncer.play(squashAnim1).with(squashAnim2);</div><div class=\"line\">bouncer.play(squashAnim1).with(stretchAnim1);</div><div class=\"line\">bouncer.play(squashAnim1).with(stretchAnim2);</div><div class=\"line\">bouncer.play(bounceBackAnim).after(stretchAnim2);</div><div class=\"line\">ValueAnimator fadeAnim = ObjectAnimator.ofFloat(newBall, <span class=\"string\">\"alpha\"</span>, <span class=\"number\">1f</span>, <span class=\"number\">0f</span>);</div><div class=\"line\">fadeAnim.setDuration(<span class=\"number\">250</span>);</div><div class=\"line\">AnimatorSet animatorSet = <span class=\"keyword\">new</span> AnimatorSet();</div><div class=\"line\">animatorSet.play(bouncer).before(fadeAnim);</div><div class=\"line\">animatorSet.start();</div></pre></td></tr></table></figure>\n<p>#在XML中声明动画</p>\n<p>新建res/animator/目录<br>每种Animator对应的标签</p>\n<ul>\n<li>ValueAnimator - <animator></animator></li>\n<li>ObjectAnimator - <objectanimator></objectanimator></li>\n<li>AnimatorSet - <set></set></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">set</span> <span class=\"attr\">android:ordering</span>=<span class=\"string\">\"sequentially\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">set</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span></div><div class=\"line\">            <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"x\"</span></div><div class=\"line\">            <span class=\"attr\">android:duration</span>=<span class=\"string\">\"500\"</span></div><div class=\"line\">            <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"400\"</span></div><div class=\"line\">            <span class=\"attr\">android:valueType</span>=<span class=\"string\">\"intType\"</span>/&gt;</div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span></div><div class=\"line\">            <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"y\"</span></div><div class=\"line\">            <span class=\"attr\">android:duration</span>=<span class=\"string\">\"500\"</span></div><div class=\"line\">            <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"300\"</span></div><div class=\"line\">            <span class=\"attr\">android:valueType</span>=<span class=\"string\">\"intType\"</span>/&gt;</div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span></div><div class=\"line\">        <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"alpha\"</span></div><div class=\"line\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"500\"</span></div><div class=\"line\">        <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"1f\"</span>/&gt;</div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>在Activity中调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">AnimatorSet set = (AnimatorSet) AnimatorInflater.loadAnimator(myContext,</div><div class=\"line\">    R.anim.property_animator);</div><div class=\"line\">set.setTarget(myObject);</div><div class=\"line\">set.start();</div></pre></td></tr></table></figure>\n","excerpt":"<p>Animator最早出现在Android 3.0 中，和之前的Animation框架相比，Animator更加的灵活并且具有更多的功能，官方推荐使用Animator代替Animation。在3.0之前可以使用<a href=\"http://nineoldandroids.com/\">nineoldandroids</a>来实现相同的效果。<br>","more":"</p>\n<p>使用Animator前需要先了解几个概念：</p>\n<ul>\n<li>Duration：动画播放时间</li>\n<li>Time interpolation：属性值随着时间的改变情况，比如线性增长或者先快后慢</li>\n<li>Repeat count：动画重复播放次数</li>\n<li>Animator sets：动画集，可以使多个动画同时播放或者顺序播放</li>\n<li>Frame refresh delay：动画每一帧的刷新时间，一般默认10ms刷新一次</li>\n</ul>\n<p>#Property Animation<br>Property Animation非常强大，他可以让你几乎在任何东西上播放动画。Property Animation的结构如下图：<br><img src=\"http://img.blog.csdn.net/20151207134608386\" alt=\"\"><br><strong>ValueAnimator用来跟踪动画运行的时间和属性的值。其中TimeInterpolator指定了动画的 interpolation，如AccelerateDecelerateInterpolator。TypeEvaluator指定属性的值如何计算比如IntEvaluator.</strong></p>\n<p>#示例<br>点击一个Button，Button的宽和高分别增加到500dp和400dp。<br><img src=\"http://img.blog.csdn.net/20160308214301229\" alt=\"Click\"></p>\n<p>#Property Animation与View Animation的区别</p>\n<ul>\n<li>View Animation只能对View添加动画</li>\n<li>View Animation只能改变如scale、rotation等值，不能改变background color等属性</li>\n<li>View Animation改变的只是View画的位置，并不是真正的View，比如一个button从左到右移动，触发onClick方法的位置还是初试的位置。</li>\n<li>View Animation实现起来比Property Animation简单</li>\n</ul>\n<h1 id=\"Evaluator\"><a href=\"#Evaluator\" class=\"headerlink\" title=\"Evaluator\"></a>Evaluator</h1><p>以IntEvaluator为例，源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">evaluate</span><span class=\"params\">(<span class=\"keyword\">float</span> fraction, Integer startValue, Integer endValue)</span> </span>&#123;</div><div class=\"line\">     <span class=\"keyword\">int</span> startInt = startValue;</div><div class=\"line\">     <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>)(startInt + fraction * (endValue - startInt));</div><div class=\"line\"> &#125;</div></pre></td></tr></table></figure></p>\n<p>很简单，就是根据初始值，结束值和当前时间与总时长的比例这三个值计算出当前某属性应该的值。</p>\n<p>#Animator<br>Animator提供了创建动画的基本结构，通常我们不直接使用它，而是使用它的子类。</p>\n<p>##ValueAnimator<br>使用ofInt(), ofFloat(), 或者 ofObject()方法来获得ValueAnimator实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ValueAnimator animation = ValueAnimator.ofFloat(<span class=\"number\">0f</span>, <span class=\"number\">1f</span>);</div><div class=\"line\">animation.setDuration(<span class=\"number\">1000</span>);</div><div class=\"line\">animation.start();</div></pre></td></tr></table></figure>\n<p>当然也可以自定义类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ValueAnimator animation = ValueAnimator.ofObject(<span class=\"keyword\">new</span> MyTypeEvaluator(), startPropertyValue, endPropertyValue);</div><div class=\"line\">animation.setDuration(<span class=\"number\">1000</span>);</div><div class=\"line\">animation.start();</div></pre></td></tr></table></figure>\n<p>###示例动画的源码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">button.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</div><div class=\"line\">          <span class=\"meta\">@Override</span></div><div class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</div><div class=\"line\">              <span class=\"keyword\">final</span> IntEvaluator mEvaluator = <span class=\"keyword\">new</span> IntEvaluator();</div><div class=\"line\">              ValueAnimator valueAnimator = ValueAnimator.ofInt(<span class=\"number\">1</span>, <span class=\"number\">100</span>);</div><div class=\"line\">              valueAnimator.addUpdateListener(<span class=\"keyword\">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class=\"line\">                  <span class=\"meta\">@Override</span></div><div class=\"line\">                  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationUpdate</span><span class=\"params\">(ValueAnimator valueAnimator)</span> </span>&#123;</div><div class=\"line\">                      <span class=\"keyword\">float</span> fraction = valueAnimator.getAnimatedFraction();</div><div class=\"line\">                      button.getLayoutParams().width = mEvaluator.evaluate(fraction, button.getWidth(), <span class=\"number\">500</span>);</div><div class=\"line\">                      button.getLayoutParams().height = mEvaluator.evaluate(fraction, button.getHeight(), <span class=\"number\">400</span>);</div><div class=\"line\">                      button.requestLayout();</div><div class=\"line\">                  &#125;</div><div class=\"line\">              &#125;);</div><div class=\"line\">              valueAnimator.setDuration(<span class=\"number\">1000</span>).start();</div><div class=\"line\">          &#125;</div><div class=\"line\">      &#125;);</div></pre></td></tr></table></figure></p>\n<p><strong>注：别忘了 button.requestLayout()和valueAnimator.setDuration(1000).start()。</strong></p>\n<p>##ObjectAnimator<br>ObjectAnimator是ValueAnimator 的子类。可以直接对目标属性计算。<br>对foo这个对象的alpha属性做从0到1的变化，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">ObjectAnimator anim = ObjectAnimator.ofFloat(foo, <span class=\"string\">\"alpha\"</span>, <span class=\"number\">0f</span>, <span class=\"number\">1f</span>);</div><div class=\"line\">anim.setDuration(<span class=\"number\">1000</span>);</div><div class=\"line\">anim.start();</div></pre></td></tr></table></figure>\n<p>为了使ObjectAnimator正常运行，还需要如下步骤：</p>\n<ul>\n<li>要修改的属性必须有set方法，如setFoo()</li>\n<li>如果你在values…参数中只指定了一个参数，默认为这是最后一个参数。参数必须有get方法，如getFoo()</li>\n<li>有些属性需要手动刷新，所以要在onAnimationUpdate() 中调用invalidate()。</li>\n</ul>\n<p>如果没有要修改的属性必须有set方法，有如下三个解决办法：</p>\n<ul>\n<li>如果有权限，添加set方法<br>但是很多情况下我们是没有的…</li>\n<li>使用这个类的wrapper class（包装类）<br>ObjectAnimator.ofFloat(wrapper, “alpha”, 0f, 1f),在这个包装类的setAlph中对原来View的alpha属性值进行更改</li>\n<li>使用ValueAnimator</li>\n</ul>\n<p>#AnimatorSet</p>\n<p>一个Set中包含多个动画，使用起来也很方便，直接上代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">AnimatorSet bouncer = <span class=\"keyword\">new</span> AnimatorSet();</div><div class=\"line\">bouncer.play(bounceAnim).before(squashAnim1);</div><div class=\"line\">bouncer.play(squashAnim1).with(squashAnim2);</div><div class=\"line\">bouncer.play(squashAnim1).with(stretchAnim1);</div><div class=\"line\">bouncer.play(squashAnim1).with(stretchAnim2);</div><div class=\"line\">bouncer.play(bounceBackAnim).after(stretchAnim2);</div><div class=\"line\">ValueAnimator fadeAnim = ObjectAnimator.ofFloat(newBall, <span class=\"string\">\"alpha\"</span>, <span class=\"number\">1f</span>, <span class=\"number\">0f</span>);</div><div class=\"line\">fadeAnim.setDuration(<span class=\"number\">250</span>);</div><div class=\"line\">AnimatorSet animatorSet = <span class=\"keyword\">new</span> AnimatorSet();</div><div class=\"line\">animatorSet.play(bouncer).before(fadeAnim);</div><div class=\"line\">animatorSet.start();</div></pre></td></tr></table></figure>\n<p>#在XML中声明动画</p>\n<p>新建res/animator/目录<br>每种Animator对应的标签</p>\n<ul>\n<li>ValueAnimator - <animator></li>\n<li>ObjectAnimator - <objectAnimator></li>\n<li>AnimatorSet - <set></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">set</span> <span class=\"attr\">android:ordering</span>=<span class=\"string\">\"sequentially\"</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">set</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></div><div class=\"line\">            <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"x\"</span></div><div class=\"line\">            <span class=\"attr\">android:duration</span>=<span class=\"string\">\"500\"</span></div><div class=\"line\">            <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"400\"</span></div><div class=\"line\">            <span class=\"attr\">android:valueType</span>=<span class=\"string\">\"intType\"</span>/&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></div><div class=\"line\">            <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"y\"</span></div><div class=\"line\">            <span class=\"attr\">android:duration</span>=<span class=\"string\">\"500\"</span></div><div class=\"line\">            <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"300\"</span></div><div class=\"line\">            <span class=\"attr\">android:valueType</span>=<span class=\"string\">\"intType\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></div><div class=\"line\">        <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"alpha\"</span></div><div class=\"line\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"500\"</span></div><div class=\"line\">        <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"1f\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></div></pre></td></tr></table></figure>\n<p>在Activity中调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">AnimatorSet set = (AnimatorSet) AnimatorInflater.loadAnimator(myContext,</div><div class=\"line\">    R.anim.property_animator);</div><div class=\"line\">set.setTarget(myObject);</div><div class=\"line\">set.start();</div></pre></td></tr></table></figure>"},{"title":"一个自定义注解的例子","date":"2016-06-10T07:53:16.000Z","_content":"一个自定义注解的例子\n<!-- more -->\n# 什么是注解\n注解是 Java 5 的一个新特性。注解是插入你代码中的一种注释或者说是一种元数据（meta data）。这些注解信息可以在编译期使用预编译工具进行处理（pre-compiler tools），也可以在运行期使用 Java 反射机制进行处理。下面是一个类注解的例子：\n\n```java\n@MyAnnotation(name=\"someName\",  value = \"Hello World\")\npublic class TheClass {\n}\n```\n在 TheClass 类定义的上面有一个@MyAnnotation 的注解。注解的定义与接口的定义相似，下面是MyAnnotation注解的定义：\n```java\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.TYPE)\n\npublic @interface MyAnnotation {\n  public String name();\n  public String value();\n}\n```\n在 interface 前面的@符号表名这是一个注解，一旦你定义了一个注解之后你就可以将其应用到你的代码中，就像之前我们的那个例子那样。 在注解定义中的两个指示@Retention(RetentionPolicy.RUNTIME)和@Target(ElementType.TYPE)，说明了这个注解该如何使用。 @Retention(RetentionPolicy.RUNTIME)表示这个注解可以在运行期通过反射访问。如果你没有在注解定义的时候使用这个指示那么这个注解的信息不会保留到运行期，这样反射就无法获取它的信息。 @Target(ElementType.TYPE) 表示这个注解只能用在类型上面（比如类跟接口）。你同样可以把Type改为Field或者Method，或者你可以不用这个指示，这样的话你的注解在类，方法和变量上就都可以使用了。 关于 Java 注解更详细的讲解可以访问 Java Annotations tutorial。\n# 详细讲解\n[极客学院的讲解](http://wiki.jikexueyuan.com/project/java-reflection/java-at.html)\n# 补充的示例\n使用反射读取RUNTIME保留策略的Annotation信息的例子：\n## 自定义注解\n```java\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface MyAnnotation {\n\n    String[] value1() default \"abc\";\n}\n```\n## 使用自定义注解\n```java\npublic class AnnotationTest2 {\n\n    @MyAnnotation(value1={\"a\",\"b\"})\n    @Deprecated\n    public void execute(){\n        System.out.println(\"method\");\n    }\n}\n```\n## 读取注解中的信息\n``` java\npublic static void main(String[] args) throws SecurityException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {\n    AnnotationTest2 annotationTest2 = new AnnotationTest2();\n    //获取AnnotationTest2的Class实例\n    Class<AnnotationTest2> c = AnnotationTest2.class;\n    //获取需要处理的方法Method实例\n    Method method = c.getMethod(\"execute\", new Class[]{});\n    //判断该方法是否包含MyAnnotation注解\n    if(method.isAnnotationPresent(MyAnnotation.class)){\n        //获取该方法的MyAnnotation注解实例\n        MyAnnotation myAnnotation = method.getAnnotation(MyAnnotation.class);\n        //执行该方法\n        method.invoke(annotationTest2, new Object[]{});\n        //获取myAnnotation\n        String[] value1 = myAnnotation.value1();\n        System.out.println(value1[0]);\n    }\n    //获取方法上的所有注解\n    Annotation[] annotations = method.getAnnotations();\n    for(Annotation annotation : annotations){\n        System.out.println(annotation);\n    }\n}\n```\n","source":"_posts/自定义注解的例子.md","raw":"title: 一个自定义注解的例子\ndate: 2016/6/10 15:53:16\ncategories:\n- Java\ntags:\n- Annotation\n\n---\n一个自定义注解的例子\n<!-- more -->\n# 什么是注解\n注解是 Java 5 的一个新特性。注解是插入你代码中的一种注释或者说是一种元数据（meta data）。这些注解信息可以在编译期使用预编译工具进行处理（pre-compiler tools），也可以在运行期使用 Java 反射机制进行处理。下面是一个类注解的例子：\n\n```java\n@MyAnnotation(name=\"someName\",  value = \"Hello World\")\npublic class TheClass {\n}\n```\n在 TheClass 类定义的上面有一个@MyAnnotation 的注解。注解的定义与接口的定义相似，下面是MyAnnotation注解的定义：\n```java\n@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.TYPE)\n\npublic @interface MyAnnotation {\n  public String name();\n  public String value();\n}\n```\n在 interface 前面的@符号表名这是一个注解，一旦你定义了一个注解之后你就可以将其应用到你的代码中，就像之前我们的那个例子那样。 在注解定义中的两个指示@Retention(RetentionPolicy.RUNTIME)和@Target(ElementType.TYPE)，说明了这个注解该如何使用。 @Retention(RetentionPolicy.RUNTIME)表示这个注解可以在运行期通过反射访问。如果你没有在注解定义的时候使用这个指示那么这个注解的信息不会保留到运行期，这样反射就无法获取它的信息。 @Target(ElementType.TYPE) 表示这个注解只能用在类型上面（比如类跟接口）。你同样可以把Type改为Field或者Method，或者你可以不用这个指示，这样的话你的注解在类，方法和变量上就都可以使用了。 关于 Java 注解更详细的讲解可以访问 Java Annotations tutorial。\n# 详细讲解\n[极客学院的讲解](http://wiki.jikexueyuan.com/project/java-reflection/java-at.html)\n# 补充的示例\n使用反射读取RUNTIME保留策略的Annotation信息的例子：\n## 自定义注解\n```java\n@Retention(RetentionPolicy.RUNTIME)\npublic @interface MyAnnotation {\n\n    String[] value1() default \"abc\";\n}\n```\n## 使用自定义注解\n```java\npublic class AnnotationTest2 {\n\n    @MyAnnotation(value1={\"a\",\"b\"})\n    @Deprecated\n    public void execute(){\n        System.out.println(\"method\");\n    }\n}\n```\n## 读取注解中的信息\n``` java\npublic static void main(String[] args) throws SecurityException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException {\n    AnnotationTest2 annotationTest2 = new AnnotationTest2();\n    //获取AnnotationTest2的Class实例\n    Class<AnnotationTest2> c = AnnotationTest2.class;\n    //获取需要处理的方法Method实例\n    Method method = c.getMethod(\"execute\", new Class[]{});\n    //判断该方法是否包含MyAnnotation注解\n    if(method.isAnnotationPresent(MyAnnotation.class)){\n        //获取该方法的MyAnnotation注解实例\n        MyAnnotation myAnnotation = method.getAnnotation(MyAnnotation.class);\n        //执行该方法\n        method.invoke(annotationTest2, new Object[]{});\n        //获取myAnnotation\n        String[] value1 = myAnnotation.value1();\n        System.out.println(value1[0]);\n    }\n    //获取方法上的所有注解\n    Annotation[] annotations = method.getAnnotations();\n    for(Annotation annotation : annotations){\n        System.out.println(annotation);\n    }\n}\n```\n","slug":"自定义注解的例子","published":1,"updated":"2016-12-28T12:14:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix8xu71b001dwwv6anwi8ulz","content":"<p>一个自定义注解的例子<br><a id=\"more\"></a></p>\n<h1 id=\"什么是注解\"><a href=\"#什么是注解\" class=\"headerlink\" title=\"什么是注解\"></a>什么是注解</h1><p>注解是 Java 5 的一个新特性。注解是插入你代码中的一种注释或者说是一种元数据（meta data）。这些注解信息可以在编译期使用预编译工具进行处理（pre-compiler tools），也可以在运行期使用 Java 反射机制进行处理。下面是一个类注解的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@MyAnnotation</span>(name=<span class=\"string\">\"someName\"</span>,  value = <span class=\"string\">\"Hello World\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TheClass</span> </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在 TheClass 类定义的上面有一个@MyAnnotation 的注解。注解的定义与接口的定义相似，下面是MyAnnotation注解的定义：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> MyAnnotation &#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">name</span><span class=\"params\">()</span></span>;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">value</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在 interface 前面的@符号表名这是一个注解，一旦你定义了一个注解之后你就可以将其应用到你的代码中，就像之前我们的那个例子那样。 在注解定义中的两个指示@Retention(RetentionPolicy.RUNTIME)和@Target(ElementType.TYPE)，说明了这个注解该如何使用。 @Retention(RetentionPolicy.RUNTIME)表示这个注解可以在运行期通过反射访问。如果你没有在注解定义的时候使用这个指示那么这个注解的信息不会保留到运行期，这样反射就无法获取它的信息。 @Target(ElementType.TYPE) 表示这个注解只能用在类型上面（比如类跟接口）。你同样可以把Type改为Field或者Method，或者你可以不用这个指示，这样的话你的注解在类，方法和变量上就都可以使用了。 关于 Java 注解更详细的讲解可以访问 Java Annotations tutorial。</p>\n<h1 id=\"详细讲解\"><a href=\"#详细讲解\" class=\"headerlink\" title=\"详细讲解\"></a>详细讲解</h1><p><a href=\"http://wiki.jikexueyuan.com/project/java-reflection/java-at.html\" target=\"_blank\" rel=\"external\">极客学院的讲解</a></p>\n<h1 id=\"补充的示例\"><a href=\"#补充的示例\" class=\"headerlink\" title=\"补充的示例\"></a>补充的示例</h1><p>使用反射读取RUNTIME保留策略的Annotation信息的例子：</p>\n<h2 id=\"自定义注解\"><a href=\"#自定义注解\" class=\"headerlink\" title=\"自定义注解\"></a>自定义注解</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> MyAnnotation &#123;</div><div class=\"line\"></div><div class=\"line\">    String[] value1() <span class=\"keyword\">default</span> <span class=\"string\">\"abc\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"使用自定义注解\"><a href=\"#使用自定义注解\" class=\"headerlink\" title=\"使用自定义注解\"></a>使用自定义注解</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnnotationTest2</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@MyAnnotation</span>(value1=&#123;<span class=\"string\">\"a\"</span>,<span class=\"string\">\"b\"</span>&#125;)</div><div class=\"line\">    <span class=\"meta\">@Deprecated</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"method\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"读取注解中的信息\"><a href=\"#读取注解中的信息\" class=\"headerlink\" title=\"读取注解中的信息\"></a>读取注解中的信息</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> SecurityException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException </span>&#123;</div><div class=\"line\">    AnnotationTest2 annotationTest2 = <span class=\"keyword\">new</span> AnnotationTest2();</div><div class=\"line\">    <span class=\"comment\">//获取AnnotationTest2的Class实例</span></div><div class=\"line\">    Class&lt;AnnotationTest2&gt; c = AnnotationTest2.class;</div><div class=\"line\">    <span class=\"comment\">//获取需要处理的方法Method实例</span></div><div class=\"line\">    Method method = c.getMethod(<span class=\"string\">\"execute\"</span>, <span class=\"keyword\">new</span> Class[]&#123;&#125;);</div><div class=\"line\">    <span class=\"comment\">//判断该方法是否包含MyAnnotation注解</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(method.isAnnotationPresent(MyAnnotation.class))&#123;</div><div class=\"line\">        <span class=\"comment\">//获取该方法的MyAnnotation注解实例</span></div><div class=\"line\">        MyAnnotation myAnnotation = method.getAnnotation(MyAnnotation.class);</div><div class=\"line\">        <span class=\"comment\">//执行该方法</span></div><div class=\"line\">        method.invoke(annotationTest2, <span class=\"keyword\">new</span> Object[]&#123;&#125;);</div><div class=\"line\">        <span class=\"comment\">//获取myAnnotation</span></div><div class=\"line\">        String[] value1 = myAnnotation.value1();</div><div class=\"line\">        System.out.println(value1[<span class=\"number\">0</span>]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//获取方法上的所有注解</span></div><div class=\"line\">    Annotation[] annotations = method.getAnnotations();</div><div class=\"line\">    <span class=\"keyword\">for</span>(Annotation annotation : annotations)&#123;</div><div class=\"line\">        System.out.println(annotation);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n","excerpt":"<p>一个自定义注解的例子<br>","more":"</p>\n<h1 id=\"什么是注解\"><a href=\"#什么是注解\" class=\"headerlink\" title=\"什么是注解\"></a>什么是注解</h1><p>注解是 Java 5 的一个新特性。注解是插入你代码中的一种注释或者说是一种元数据（meta data）。这些注解信息可以在编译期使用预编译工具进行处理（pre-compiler tools），也可以在运行期使用 Java 反射机制进行处理。下面是一个类注解的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@MyAnnotation</span>(name=<span class=\"string\">\"someName\"</span>,  value = <span class=\"string\">\"Hello World\"</span>)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TheClass</span> </span>&#123;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在 TheClass 类定义的上面有一个@MyAnnotation 的注解。注解的定义与接口的定义相似，下面是MyAnnotation注解的定义：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE)</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> MyAnnotation &#123;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">name</span><span class=\"params\">()</span></span>;</div><div class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">value</span><span class=\"params\">()</span></span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>在 interface 前面的@符号表名这是一个注解，一旦你定义了一个注解之后你就可以将其应用到你的代码中，就像之前我们的那个例子那样。 在注解定义中的两个指示@Retention(RetentionPolicy.RUNTIME)和@Target(ElementType.TYPE)，说明了这个注解该如何使用。 @Retention(RetentionPolicy.RUNTIME)表示这个注解可以在运行期通过反射访问。如果你没有在注解定义的时候使用这个指示那么这个注解的信息不会保留到运行期，这样反射就无法获取它的信息。 @Target(ElementType.TYPE) 表示这个注解只能用在类型上面（比如类跟接口）。你同样可以把Type改为Field或者Method，或者你可以不用这个指示，这样的话你的注解在类，方法和变量上就都可以使用了。 关于 Java 注解更详细的讲解可以访问 Java Annotations tutorial。</p>\n<h1 id=\"详细讲解\"><a href=\"#详细讲解\" class=\"headerlink\" title=\"详细讲解\"></a>详细讲解</h1><p><a href=\"http://wiki.jikexueyuan.com/project/java-reflection/java-at.html\">极客学院的讲解</a></p>\n<h1 id=\"补充的示例\"><a href=\"#补充的示例\" class=\"headerlink\" title=\"补充的示例\"></a>补充的示例</h1><p>使用反射读取RUNTIME保留策略的Annotation信息的例子：</p>\n<h2 id=\"自定义注解\"><a href=\"#自定义注解\" class=\"headerlink\" title=\"自定义注解\"></a>自定义注解</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> MyAnnotation &#123;</div><div class=\"line\"></div><div class=\"line\">    String[] value1() <span class=\"keyword\">default</span> <span class=\"string\">\"abc\"</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"使用自定义注解\"><a href=\"#使用自定义注解\" class=\"headerlink\" title=\"使用自定义注解\"></a>使用自定义注解</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AnnotationTest2</span> </span>&#123;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"meta\">@MyAnnotation</span>(value1=&#123;<span class=\"string\">\"a\"</span>,<span class=\"string\">\"b\"</span>&#125;)</div><div class=\"line\">    <span class=\"meta\">@Deprecated</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">execute</span><span class=\"params\">()</span></span>&#123;</div><div class=\"line\">        System.out.println(<span class=\"string\">\"method\"</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"读取注解中的信息\"><a href=\"#读取注解中的信息\" class=\"headerlink\" title=\"读取注解中的信息\"></a>读取注解中的信息</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> SecurityException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException, InvocationTargetException </span>&#123;</div><div class=\"line\">    AnnotationTest2 annotationTest2 = <span class=\"keyword\">new</span> AnnotationTest2();</div><div class=\"line\">    <span class=\"comment\">//获取AnnotationTest2的Class实例</span></div><div class=\"line\">    Class&lt;AnnotationTest2&gt; c = AnnotationTest2.class;</div><div class=\"line\">    <span class=\"comment\">//获取需要处理的方法Method实例</span></div><div class=\"line\">    Method method = c.getMethod(<span class=\"string\">\"execute\"</span>, <span class=\"keyword\">new</span> Class[]&#123;&#125;);</div><div class=\"line\">    <span class=\"comment\">//判断该方法是否包含MyAnnotation注解</span></div><div class=\"line\">    <span class=\"keyword\">if</span>(method.isAnnotationPresent(MyAnnotation.class))&#123;</div><div class=\"line\">        <span class=\"comment\">//获取该方法的MyAnnotation注解实例</span></div><div class=\"line\">        MyAnnotation myAnnotation = method.getAnnotation(MyAnnotation.class);</div><div class=\"line\">        <span class=\"comment\">//执行该方法</span></div><div class=\"line\">        method.invoke(annotationTest2, <span class=\"keyword\">new</span> Object[]&#123;&#125;);</div><div class=\"line\">        <span class=\"comment\">//获取myAnnotation</span></div><div class=\"line\">        String[] value1 = myAnnotation.value1();</div><div class=\"line\">        System.out.println(value1[<span class=\"number\">0</span>]);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"comment\">//获取方法上的所有注解</span></div><div class=\"line\">    Annotation[] annotations = method.getAnnotations();</div><div class=\"line\">    <span class=\"keyword\">for</span>(Annotation annotation : annotations)&#123;</div><div class=\"line\">        System.out.println(annotation);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>"},{"title":"我的Android Studio配置","date":"2015-10-04T08:15:25.000Z","_content":"Android Studio固然好用，但是刚从Eclipse转移到Android Studio上难免有很多不便，现在集中整理一下AS与Eclipse的区别，使得AS更好用。\n<!-- more -->\n\nAndroid Studio固然好用，但是刚从Eclipse转移到Android Studio上难免有很多不便，现在集中整理一下AS与Eclipse的区别，使得AS更好用。\n# 快捷键Keymap到Eclipse。\n![http://img.blog.csdn.net/20151004161913276](http://img.blog.csdn.net/20151004161913276)\n\n# 代码自动补全功能快捷键换成熟悉的Alt + /\n![http://img.blog.csdn.net/20151004162153475](http://img.blog.csdn.net/20151004162153475)\n\n# 代码自动补全的相关设置。下图是根据个人喜好选择的，仅供参考。\n![http://img.blog.csdn.net/20151004162825716](http://img.blog.csdn.net/20151004162825716)\n\n# 鼠标放在函数上自动显示函数的Doc\n![http://img.blog.csdn.net/20151004163510698](http://img.blog.csdn.net/20151004163510698)\n\n# 自动import需要使用的包\n![http://img.blog.csdn.net/20151004163827324](http://img.blog.csdn.net/20151004163827324)\n\n","source":"_posts/我的Android Studio的配置.md","raw":"title: 我的Android Studio配置\ndate: 2015/10/04 16:15:25\ncategories:\n- Android\n- Android Studio\n---\nAndroid Studio固然好用，但是刚从Eclipse转移到Android Studio上难免有很多不便，现在集中整理一下AS与Eclipse的区别，使得AS更好用。\n<!-- more -->\n\nAndroid Studio固然好用，但是刚从Eclipse转移到Android Studio上难免有很多不便，现在集中整理一下AS与Eclipse的区别，使得AS更好用。\n# 快捷键Keymap到Eclipse。\n![http://img.blog.csdn.net/20151004161913276](http://img.blog.csdn.net/20151004161913276)\n\n# 代码自动补全功能快捷键换成熟悉的Alt + /\n![http://img.blog.csdn.net/20151004162153475](http://img.blog.csdn.net/20151004162153475)\n\n# 代码自动补全的相关设置。下图是根据个人喜好选择的，仅供参考。\n![http://img.blog.csdn.net/20151004162825716](http://img.blog.csdn.net/20151004162825716)\n\n# 鼠标放在函数上自动显示函数的Doc\n![http://img.blog.csdn.net/20151004163510698](http://img.blog.csdn.net/20151004163510698)\n\n# 自动import需要使用的包\n![http://img.blog.csdn.net/20151004163827324](http://img.blog.csdn.net/20151004163827324)\n\n","slug":"我的Android Studio的配置","published":1,"updated":"2016-12-28T12:14:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cix8xu71e001gwwv6cjnetefg","content":"<p>Android Studio固然好用，但是刚从Eclipse转移到Android Studio上难免有很多不便，现在集中整理一下AS与Eclipse的区别，使得AS更好用。<br><a id=\"more\"></a></p>\n<p>Android Studio固然好用，但是刚从Eclipse转移到Android Studio上难免有很多不便，现在集中整理一下AS与Eclipse的区别，使得AS更好用。</p>\n<h1 id=\"快捷键Keymap到Eclipse。\"><a href=\"#快捷键Keymap到Eclipse。\" class=\"headerlink\" title=\"快捷键Keymap到Eclipse。\"></a>快捷键Keymap到Eclipse。</h1><p><img src=\"http://img.blog.csdn.net/20151004161913276\" alt=\"http://img.blog.csdn.net/20151004161913276\"></p>\n<h1 id=\"代码自动补全功能快捷键换成熟悉的Alt\"><a href=\"#代码自动补全功能快捷键换成熟悉的Alt\" class=\"headerlink\" title=\"代码自动补全功能快捷键换成熟悉的Alt + /\"></a>代码自动补全功能快捷键换成熟悉的Alt + /</h1><p><img src=\"http://img.blog.csdn.net/20151004162153475\" alt=\"http://img.blog.csdn.net/20151004162153475\"></p>\n<h1 id=\"代码自动补全的相关设置。下图是根据个人喜好选择的，仅供参考。\"><a href=\"#代码自动补全的相关设置。下图是根据个人喜好选择的，仅供参考。\" class=\"headerlink\" title=\"代码自动补全的相关设置。下图是根据个人喜好选择的，仅供参考。\"></a>代码自动补全的相关设置。下图是根据个人喜好选择的，仅供参考。</h1><p><img src=\"http://img.blog.csdn.net/20151004162825716\" alt=\"http://img.blog.csdn.net/20151004162825716\"></p>\n<h1 id=\"鼠标放在函数上自动显示函数的Doc\"><a href=\"#鼠标放在函数上自动显示函数的Doc\" class=\"headerlink\" title=\"鼠标放在函数上自动显示函数的Doc\"></a>鼠标放在函数上自动显示函数的Doc</h1><p><img src=\"http://img.blog.csdn.net/20151004163510698\" alt=\"http://img.blog.csdn.net/20151004163510698\"></p>\n<h1 id=\"自动import需要使用的包\"><a href=\"#自动import需要使用的包\" class=\"headerlink\" title=\"自动import需要使用的包\"></a>自动import需要使用的包</h1><p><img src=\"http://img.blog.csdn.net/20151004163827324\" alt=\"http://img.blog.csdn.net/20151004163827324\"></p>\n","excerpt":"<p>Android Studio固然好用，但是刚从Eclipse转移到Android Studio上难免有很多不便，现在集中整理一下AS与Eclipse的区别，使得AS更好用。<br>","more":"</p>\n<p>Android Studio固然好用，但是刚从Eclipse转移到Android Studio上难免有很多不便，现在集中整理一下AS与Eclipse的区别，使得AS更好用。</p>\n<h1 id=\"快捷键Keymap到Eclipse。\"><a href=\"#快捷键Keymap到Eclipse。\" class=\"headerlink\" title=\"快捷键Keymap到Eclipse。\"></a>快捷键Keymap到Eclipse。</h1><p><img src=\"http://img.blog.csdn.net/20151004161913276\" alt=\"http://img.blog.csdn.net/20151004161913276\"></p>\n<h1 id=\"代码自动补全功能快捷键换成熟悉的Alt\"><a href=\"#代码自动补全功能快捷键换成熟悉的Alt\" class=\"headerlink\" title=\"代码自动补全功能快捷键换成熟悉的Alt + /\"></a>代码自动补全功能快捷键换成熟悉的Alt + /</h1><p><img src=\"http://img.blog.csdn.net/20151004162153475\" alt=\"http://img.blog.csdn.net/20151004162153475\"></p>\n<h1 id=\"代码自动补全的相关设置。下图是根据个人喜好选择的，仅供参考。\"><a href=\"#代码自动补全的相关设置。下图是根据个人喜好选择的，仅供参考。\" class=\"headerlink\" title=\"代码自动补全的相关设置。下图是根据个人喜好选择的，仅供参考。\"></a>代码自动补全的相关设置。下图是根据个人喜好选择的，仅供参考。</h1><p><img src=\"http://img.blog.csdn.net/20151004162825716\" alt=\"http://img.blog.csdn.net/20151004162825716\"></p>\n<h1 id=\"鼠标放在函数上自动显示函数的Doc\"><a href=\"#鼠标放在函数上自动显示函数的Doc\" class=\"headerlink\" title=\"鼠标放在函数上自动显示函数的Doc\"></a>鼠标放在函数上自动显示函数的Doc</h1><p><img src=\"http://img.blog.csdn.net/20151004163510698\" alt=\"http://img.blog.csdn.net/20151004163510698\"></p>\n<h1 id=\"自动import需要使用的包\"><a href=\"#自动import需要使用的包\" class=\"headerlink\" title=\"自动import需要使用的包\"></a>自动import需要使用的包</h1><p><img src=\"http://img.blog.csdn.net/20151004163827324\" alt=\"http://img.blog.csdn.net/20151004163827324\"></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cix8xu70c0006wwv6jsn88agj","category_id":"cix8xu7070003wwv6raso05xp","_id":"cix8xu70l000bwwv61fvqphjt"},{"post_id":"cix8xu70p000fwwv6syzcpdpj","category_id":"cix8xu7070003wwv6raso05xp","_id":"cix8xu70v000nwwv6241lfi73"},{"post_id":"cix8xu7090005wwv6ehdtwgqe","category_id":"cix8xu7070003wwv6raso05xp","_id":"cix8xu70y000qwwv6cf60zwlk"},{"post_id":"cix8xu70r000hwwv6gwd433jh","category_id":"cix8xu7070003wwv6raso05xp","_id":"cix8xu70z000uwwv6tvhz87a7"},{"post_id":"cix8xu70u000lwwv6c7ik9ly9","category_id":"cix8xu7070003wwv6raso05xp","_id":"cix8xu712000xwwv6460e5tyf"},{"post_id":"cix8xu70u000lwwv6c7ik9ly9","category_id":"cix8xu70s000iwwv6e3qwm8mx","_id":"cix8xu7130010wwv6ulcx0l39"},{"post_id":"cix8xu7010001wwv65n4dtr8e","category_id":"cix8xu7070003wwv6raso05xp","_id":"cix8xu7150013wwv64d5ttjgj"},{"post_id":"cix8xu7010001wwv65n4dtr8e","category_id":"cix8xu70s000iwwv6e3qwm8mx","_id":"cix8xu7160016wwv6i12sx7v3"},{"post_id":"cix8xu70w000owwv6389h7a5t","category_id":"cix8xu7070003wwv6raso05xp","_id":"cix8xu71a0019wwv6yjhlepch"},{"post_id":"cix8xu70w000owwv6389h7a5t","category_id":"cix8xu70s000iwwv6e3qwm8mx","_id":"cix8xu71b001cwwv6puwt6dv3"},{"post_id":"cix8xu70z000swwv69nc8x46m","category_id":"cix8xu7070003wwv6raso05xp","_id":"cix8xu71d001fwwv6ye98gf9g"},{"post_id":"cix8xu70d0007wwv6vg866p0b","category_id":"cix8xu7070003wwv6raso05xp","_id":"cix8xu71h001jwwv6ba3sfhcz"},{"post_id":"cix8xu70d0007wwv6vg866p0b","category_id":"cix8xu70s000iwwv6e3qwm8mx","_id":"cix8xu71j001mwwv6wpygxk9o"},{"post_id":"cix8xu710000vwwv6l1hcn19i","category_id":"cix8xu7070003wwv6raso05xp","_id":"cix8xu71j001nwwv6fgr3j3qz"},{"post_id":"cix8xu710000vwwv6l1hcn19i","category_id":"cix8xu70s000iwwv6e3qwm8mx","_id":"cix8xu71j001qwwv6mzjaq8fm"},{"post_id":"cix8xu712000ywwv6a4sva0it","category_id":"cix8xu7070003wwv6raso05xp","_id":"cix8xu71j001swwv6yuoxmfo7"},{"post_id":"cix8xu712000ywwv6a4sva0it","category_id":"cix8xu70s000iwwv6e3qwm8mx","_id":"cix8xu71k001vwwv6k72hoa95"},{"post_id":"cix8xu70f000awwv6jb5w10sv","category_id":"cix8xu711000wwwv642w1n8b9","_id":"cix8xu71k001xwwv6sfk4d4n1"},{"post_id":"cix8xu7130011wwv65cbewse7","category_id":"cix8xu7070003wwv6raso05xp","_id":"cix8xu71l001zwwv62cn6wo9l"},{"post_id":"cix8xu7130011wwv65cbewse7","category_id":"cix8xu70s000iwwv6e3qwm8mx","_id":"cix8xu71l0020wwv6vg2ozewb"},{"post_id":"cix8xu7150014wwv6ovh3qwm3","category_id":"cix8xu7070003wwv6raso05xp","_id":"cix8xu71l0022wwv6fcz0gbrr"},{"post_id":"cix8xu7150014wwv6ovh3qwm3","category_id":"cix8xu70s000iwwv6e3qwm8mx","_id":"cix8xu71l0023wwv648s97h2m"},{"post_id":"cix8xu7040002wwv6b7xkkfkt","category_id":"cix8xu7070003wwv6raso05xp","_id":"cix8xu71l0024wwv6qgrmchqo"},{"post_id":"cix8xu7040002wwv6b7xkkfkt","category_id":"cix8xu70s000iwwv6e3qwm8mx","_id":"cix8xu71m0026wwv6wf5si9uh"},{"post_id":"cix8xu7180017wwv64jzsj08t","category_id":"cix8xu7070003wwv6raso05xp","_id":"cix8xu71m0027wwv62145x0o0"},{"post_id":"cix8xu7180017wwv64jzsj08t","category_id":"cix8xu70s000iwwv6e3qwm8mx","_id":"cix8xu71m0029wwv68vusslv2"},{"post_id":"cix8xu71a001awwv6q24pqkd8","category_id":"cix8xu7070003wwv6raso05xp","_id":"cix8xu71n002bwwv6n38xyj9m"},{"post_id":"cix8xu71a001awwv6q24pqkd8","category_id":"cix8xu70s000iwwv6e3qwm8mx","_id":"cix8xu71n002ewwv6iawquhpv"},{"post_id":"cix8xu70l000cwwv6vy3y4cut","category_id":"cix8xu7070003wwv6raso05xp","_id":"cix8xu71n002gwwv6y0d1ihev"},{"post_id":"cix8xu70l000cwwv6vy3y4cut","category_id":"cix8xu70s000iwwv6e3qwm8mx","_id":"cix8xu71o002jwwv6h8yihgmj"},{"post_id":"cix8xu71b001dwwv6anwi8ulz","category_id":"cix8xu71h001iwwv6z2mfhdsw","_id":"cix8xu71o002lwwv60s7g9n6i"},{"post_id":"cix8xu71e001gwwv6cjnetefg","category_id":"cix8xu7070003wwv6raso05xp","_id":"cix8xu71q002owwv6gdr2eueo"},{"post_id":"cix8xu71e001gwwv6cjnetefg","category_id":"cix8xu71j001owwv6y7x8dox4","_id":"cix8xu71q002pwwv6jrosnufv"}],"PostTag":[{"post_id":"cix8xu7010001wwv65n4dtr8e","tag_id":"cix8xu7090004wwv6gw57lnkm","_id":"cix8xu70q000gwwv6yqdm9wxs"},{"post_id":"cix8xu7010001wwv65n4dtr8e","tag_id":"cix8xu70e0009wwv62bgl3k1l","_id":"cix8xu70u000jwwv62su2lo7g"},{"post_id":"cix8xu7040002wwv6b7xkkfkt","tag_id":"cix8xu70n000ewwv6a46hnz16","_id":"cix8xu70v000mwwv6a5zcd5sn"},{"post_id":"cix8xu7090005wwv6ehdtwgqe","tag_id":"cix8xu70u000kwwv6c7sw21lk","_id":"cix8xu70z000twwv6bzsndjr8"},{"post_id":"cix8xu70c0006wwv6jsn88agj","tag_id":"cix8xu70y000rwwv62llpkagr","_id":"cix8xu71d001ewwv63dpl6vx1"},{"post_id":"cix8xu70c0006wwv6jsn88agj","tag_id":"cix8xu713000zwwv6yk4i41k7","_id":"cix8xu71g001hwwv62rlmv3x3"},{"post_id":"cix8xu70c0006wwv6jsn88agj","tag_id":"cix8xu7160015wwv60ikazsfr","_id":"cix8xu71i001lwwv6mbqffvr3"},{"post_id":"cix8xu70d0007wwv6vg866p0b","tag_id":"cix8xu71b001bwwv6lfsarddu","_id":"cix8xu71j001rwwv62z5646or"},{"post_id":"cix8xu70d0007wwv6vg866p0b","tag_id":"cix8xu71i001kwwv68x1f0g94","_id":"cix8xu71j001twwv6yqn53hqo"},{"post_id":"cix8xu70f000awwv6jb5w10sv","tag_id":"cix8xu71j001pwwv64qtxlmh8","_id":"cix8xu71k001wwwv6sng9fpwk"},{"post_id":"cix8xu70l000cwwv6vy3y4cut","tag_id":"cix8xu713000zwwv6yk4i41k7","_id":"cix8xu71m002awwv6mwx4iqx8"},{"post_id":"cix8xu70l000cwwv6vy3y4cut","tag_id":"cix8xu71k001ywwv6un1sxu2s","_id":"cix8xu71n002cwwv6o17wskqc"},{"post_id":"cix8xu70l000cwwv6vy3y4cut","tag_id":"cix8xu71l0021wwv6jar7ffjc","_id":"cix8xu71n002fwwv640m3vg48"},{"post_id":"cix8xu70l000cwwv6vy3y4cut","tag_id":"cix8xu71l0025wwv6fbv2b0lg","_id":"cix8xu71o002hwwv6ehjdltgy"},{"post_id":"cix8xu70p000fwwv6syzcpdpj","tag_id":"cix8xu70y000rwwv62llpkagr","_id":"cix8xu71o002kwwv66msc7ehe"},{"post_id":"cix8xu70r000hwwv6gwd433jh","tag_id":"cix8xu70y000rwwv62llpkagr","_id":"cix8xu71p002mwwv66jipxqr0"},{"post_id":"cix8xu70u000lwwv6c7ik9ly9","tag_id":"cix8xu70y000rwwv62llpkagr","_id":"cix8xu71q002swwv6syti6y8o"},{"post_id":"cix8xu70u000lwwv6c7ik9ly9","tag_id":"cix8xu71p002nwwv6w4rpw3jj","_id":"cix8xu71q002twwv6kv6svnne"},{"post_id":"cix8xu70u000lwwv6c7ik9ly9","tag_id":"cix8xu71q002qwwv6qitpu9mo","_id":"cix8xu71r002vwwv66wkgae8a"},{"post_id":"cix8xu70w000owwv6389h7a5t","tag_id":"cix8xu70y000rwwv62llpkagr","_id":"cix8xu71r002ywwv6u5of2kyj"},{"post_id":"cix8xu70w000owwv6389h7a5t","tag_id":"cix8xu71p002nwwv6w4rpw3jj","_id":"cix8xu71r002zwwv6081ttns1"},{"post_id":"cix8xu70w000owwv6389h7a5t","tag_id":"cix8xu71r002wwwv68qfxtew3","_id":"cix8xu71s0031wwv6i4du0jdl"},{"post_id":"cix8xu70z000swwv69nc8x46m","tag_id":"cix8xu71r002xwwv6qy96xvya","_id":"cix8xu71s0032wwv6d34ypmkl"},{"post_id":"cix8xu710000vwwv6l1hcn19i","tag_id":"cix8xu70y000rwwv62llpkagr","_id":"cix8xu71t0034wwv6lru3qqex"},{"post_id":"cix8xu710000vwwv6l1hcn19i","tag_id":"cix8xu71p002nwwv6w4rpw3jj","_id":"cix8xu71t0035wwv68hu6k45o"},{"post_id":"cix8xu712000ywwv6a4sva0it","tag_id":"cix8xu70y000rwwv62llpkagr","_id":"cix8xu71t0038wwv6he8q1vqh"},{"post_id":"cix8xu712000ywwv6a4sva0it","tag_id":"cix8xu71s0033wwv6b67edzrw","_id":"cix8xu71t0039wwv6ymxu8ihe"},{"post_id":"cix8xu712000ywwv6a4sva0it","tag_id":"cix8xu71t0036wwv6qrjah97j","_id":"cix8xu71t003bwwv6s7o28tig"},{"post_id":"cix8xu7130011wwv65cbewse7","tag_id":"cix8xu70n000ewwv6a46hnz16","_id":"cix8xu71u003ewwv6j0fbdw92"},{"post_id":"cix8xu7130011wwv65cbewse7","tag_id":"cix8xu71t0037wwv6oswh8sv8","_id":"cix8xu71u003fwwv6kkdv4gre"},{"post_id":"cix8xu7130011wwv65cbewse7","tag_id":"cix8xu71t003awwv6rcv7m70y","_id":"cix8xu71v003hwwv601hkh4dm"},{"post_id":"cix8xu7130011wwv65cbewse7","tag_id":"cix8xu71u003cwwv6neztkzty","_id":"cix8xu71v003iwwv6upaat9xq"},{"post_id":"cix8xu7150014wwv6ovh3qwm3","tag_id":"cix8xu71u003dwwv6o7rqqsdn","_id":"cix8xu71w003kwwv66aj5ytw3"},{"post_id":"cix8xu7180017wwv64jzsj08t","tag_id":"cix8xu70y000rwwv62llpkagr","_id":"cix8xu71w003mwwv66oxxc45i"},{"post_id":"cix8xu7180017wwv64jzsj08t","tag_id":"cix8xu71p002nwwv6w4rpw3jj","_id":"cix8xu71x003nwwv65qzjtamb"},{"post_id":"cix8xu7180017wwv64jzsj08t","tag_id":"cix8xu71v003jwwv6w2ioarso","_id":"cix8xu71x003pwwv6ke8dzopo"},{"post_id":"cix8xu71a001awwv6q24pqkd8","tag_id":"cix8xu70y000rwwv62llpkagr","_id":"cix8xu71x003rwwv6ctnaoauy"},{"post_id":"cix8xu71a001awwv6q24pqkd8","tag_id":"cix8xu71p002nwwv6w4rpw3jj","_id":"cix8xu71x003swwv67hlusev9"},{"post_id":"cix8xu71a001awwv6q24pqkd8","tag_id":"cix8xu71x003owwv61pbztv56","_id":"cix8xu71x003twwv6hboggtqj"},{"post_id":"cix8xu71b001dwwv6anwi8ulz","tag_id":"cix8xu71x003qwwv612pt4b96","_id":"cix8xu71y003uwwv6qr7pfw9f"}],"Tag":[{"name":"AIDL","_id":"cix8xu7090004wwv6gw57lnkm"},{"name":"IPC","_id":"cix8xu70e0009wwv62bgl3k1l"},{"name":"Activity","_id":"cix8xu70n000ewwv6a46hnz16"},{"name":"安全机制","_id":"cix8xu70u000kwwv6c7sw21lk"},{"name":"Android","_id":"cix8xu70y000rwwv62llpkagr"},{"name":"AsyncTask","_id":"cix8xu713000zwwv6yk4i41k7"},{"name":"源码剖析","_id":"cix8xu7160015wwv60ikazsfr"},{"name":"IntentFilter","_id":"cix8xu71b001bwwv6lfsarddu"},{"name":"匹配规则","_id":"cix8xu71i001kwwv68x1f0g94"},{"name":"深入理解JVM虚拟机","_id":"cix8xu71j001pwwv64qtxlmh8"},{"name":"HandlerThread","_id":"cix8xu71k001ywwv6un1sxu2s"},{"name":"IntentService","_id":"cix8xu71l0021wwv6jar7ffjc"},{"name":"Thread","_id":"cix8xu71l0025wwv6fbv2b0lg"},{"name":"View","_id":"cix8xu71p002nwwv6w4rpw3jj"},{"name":"弹性滑动","_id":"cix8xu71q002qwwv6qitpu9mo"},{"name":"事件分发机制","_id":"cix8xu71r002wwwv68qfxtew3"},{"name":"apk","_id":"cix8xu71r002xwwv6qy96xvya"},{"name":"Window","_id":"cix8xu71s0033wwv6b67edzrw"},{"name":"WindowManager","_id":"cix8xu71t0036wwv6qrjah97j"},{"name":"Service","_id":"cix8xu71t0037wwv6oswh8sv8"},{"name":"BroadcastReceiver","_id":"cix8xu71t003awwv6rcv7m70y"},{"name":"ContentProvider","_id":"cix8xu71u003cwwv6neztkzty"},{"name":"crash","_id":"cix8xu71u003dwwv6o7rqqsdn"},{"name":"自定义View","_id":"cix8xu71v003jwwv6w2ioarso"},{"name":"属性动画","_id":"cix8xu71x003owwv61pbztv56"},{"name":"Annotation","_id":"cix8xu71x003qwwv612pt4b96"}]}}