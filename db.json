{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/yelee/source/apple-touch-icon.png","path":"apple-touch-icon.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-1.jpg","path":"background/bg-1.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-2.jpg","path":"background/bg-2.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-3.jpg","path":"background/bg-3.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-4.jpg","path":"background/bg-4.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-5.jpg","path":"background/bg-5.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-6.jpg","path":"background/bg-6.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-7.jpg","path":"background/bg-7.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-8.jpg","path":"background/bg-8.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/yelee/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/yelee/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/yelee/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/GitHub.png","path":"img/GitHub.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/TiddlyWiki.png","path":"img/TiddlyWiki.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/SegmentFault.png","path":"img/SegmentFault.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/V2EX.png","path":"img/V2EX.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/新浪微博.png","path":"img/新浪微博.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/知乎.png","path":"img/知乎.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/网易云音乐.png","path":"img/网易云音乐.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/简书.png","path":"img/简书.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/虾米音乐.png","path":"img/虾米音乐.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/豆瓣.png","path":"img/豆瓣.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","path":"js/GithubRepoWidget.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/clipboard.min.js","path":"js/clipboard.min.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/instagram.js","path":"js/instagram.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/mobile.js","path":"js/mobile.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/js/pc.js","path":"js/pc.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-10.jpg","path":"background/bg-10.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/background/bg-9.jpg","path":"background/bg-9.jpg","modified":0,"renderable":1},{"_id":"themes/yelee/source/img/spark.png","path":"img/spark.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/yelee/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/yelee/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/yelee/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/yelee/source/font-awesome/css/font-awesome.css","path":"font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/yelee/source/font-awesome/css/font-awesome.min.css","path":"font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/yelee/source/font-awesome/fonts/FontAwesome.otf","path":"font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/yelee/source/font-awesome/fonts/fontawesome-webfont.eot","path":"font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/yelee/source/font-awesome/fonts/fontawesome-webfont.woff","path":"font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/yelee/source/font-awesome/fonts/fontawesome-webfont.woff2","path":"font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/yelee/source/font-awesome/fonts/fontawesome-webfont.ttf","path":"font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/yelee/source/font-awesome/fonts/fontawesome-webfont.svg","path":"font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"2cbb9049f9dc66b40e468f84842019af40c07036","modified":1457760512363},{"_id":"source/_posts/AIDL.md","hash":"5ea9866635f01a4e96f29431df0e08d358401bd4","modified":1457760512363},{"_id":"source/_posts/Meizi.md","hash":"ea62f158796b6b3552f2efd7a23a92b2621a2600","modified":1457760512363},{"_id":"source/_posts/View事件分发机制.md","hash":"c0a0299536c261ef8d7d39184630e0919e5cb4af","modified":1457760512363},{"_id":"source/_posts/ViewRoot，DecorView，MeasureSpec和View的工作原理.md","hash":"7cab8c21987cbbd180cf33f68fc12c814d47d518","modified":1457760512363},{"_id":"source/_posts/View的工作原理.md","hash":"0f02ba2258edbb2f0bc5cc717ce92829bb286dc0","modified":1457760512363},{"_id":"source/_posts/View的弹性滑动.md","hash":"3577f051e3bd3fdd038e1b0705415790e104df81","modified":1457760512363},{"_id":"source/_posts/View的滑动冲突.md","hash":"0194427e7ad7670383b93140f10c86995467d43b","modified":1457760512363},{"_id":"source/_posts/属性动画.md","hash":"a0c497fdc4cd42b1d5f7e28f30b859deb84b8b0c","modified":1457760512363},{"_id":"source/_posts/一个规范的自定义View.md","hash":"53d0ab7db1e62ef8d2114882294afb0870e7ca63","modified":1457760512363},{"_id":"source/_posts/Windows和WindowManager.md","hash":"330b6c009918b2b4681209495806ab0ebcb14e0d","modified":1457760512363},{"_id":"source/tags/index.md","hash":"693ebaa0b5f6086fddc216f3a33b4af86e873b95","modified":1457760512363},{"_id":"public/tags/index.html","hash":"a5547a4a519e47d495d63cd7b7586f04eb98acf6","modified":1457760792903},{"_id":"public/archives/index.html","hash":"a2e80076a32e8d28c900f6f9119ebf88533d3049","modified":1457760792903},{"_id":"public/archives/2016/index.html","hash":"2adbb030e9ea54223087d86b42fe98f4ddd1a043","modified":1457760792903},{"_id":"public/archives/2016/03/index.html","hash":"fbcf8609dca0215900f9e9a780060d3b7c562ddf","modified":1457760792903},{"_id":"public/categories/Android/index.html","hash":"678bbe243bee12831ebbf4978df3fd8595ee13f6","modified":1457760792903},{"_id":"public/categories/Android/Android开发艺术探索笔记/index.html","hash":"7aa27396ad9f80eb4fdc0ad972fa9d5bf467d139","modified":1457760792903},{"_id":"public/index.html","hash":"8bda12d80d84ed3c203cb77af748791a177fce0b","modified":1457760792919},{"_id":"public/tags/Android/index.html","hash":"c5333c252cb29506159aa398e26b4c16e2b1a2ae","modified":1457760792919},{"_id":"public/tags/AIDL/index.html","hash":"9b6f11bde77813be4c1e051faa91f632a87a8bec","modified":1457760792903},{"_id":"public/tags/View/index.html","hash":"75409e48c9f7b562ba4083c74d6820c4ac980aaa","modified":1457760792919},{"_id":"public/tags/IPC/index.html","hash":"a68339d1ec433e1a19932572462265ff6c374b8d","modified":1457760792903},{"_id":"public/tags/事件分发机制/index.html","hash":"a3c07f0abce7ad8b447d89556a9c718c8846b4cb","modified":1457760792903},{"_id":"public/tags/ViewRoot/index.html","hash":"02a39fd0608984044d91300a52f7d297bbd74f97","modified":1457760792903},{"_id":"public/tags/DecorView/index.html","hash":"ec6d004ba4c92f178699a626ad0a987e3ca9cd19","modified":1457760792903},{"_id":"public/tags/弹性滑动/index.html","hash":"cb6ca87758b06087fe8ca35c54c24cfdca555f17","modified":1457760792903},{"_id":"public/tags/MeasureSpec和View的工作原理/index.html","hash":"5ae38d1a3f1ed7dfeb78b27493f2e91ea73afb19","modified":1457760792903},{"_id":"public/tags/滑动冲突/index.html","hash":"761f246cfb661bae1897486f61df2825cab23447","modified":1457760792903},{"_id":"public/tags/属性动画/index.html","hash":"a37d7c7a899d59f59003dc9d4dfba5a7b24212fd","modified":1457760792903},{"_id":"public/tags/自定义View/index.html","hash":"69d464a02179600d4fb14462040b6c99a1498597","modified":1457760792903},{"_id":"public/tags/Window/index.html","hash":"45097d7ef125fdf2df21f5075be5477fb70a40e4","modified":1457760792903},{"_id":"public/tags/WindowManager/index.html","hash":"81042403ef198fa137933aba6e064e7f73385a7b","modified":1457760792903},{"_id":"public/2016/03/12/Meizi/index.html","hash":"f362e3c8ae8d22b0b6633b5016dfcdbfe0b7ba4b","modified":1457760792903},{"_id":"public/2016/03/12/AIDL/index.html","hash":"3c67a245c022a1a873cab21da3949f46cd9d0b3f","modified":1457760792903},{"_id":"public/2016/03/12/View的工作原理/index.html","hash":"dd049c9a5e88e8a20881baf897839870e0e2a05c","modified":1457760792903},{"_id":"public/2016/03/12/View事件分发机制/index.html","hash":"ac84362e401d42e687a6a1f58c71eac9566ac837","modified":1457760792903},{"_id":"public/2016/03/12/ViewRoot，DecorView，MeasureSpec和View的工作原理/index.html","hash":"da37b7c1cafce950f9fc8170553ab1b799ed8283","modified":1457760792903},{"_id":"public/2016/03/12/View的弹性滑动/index.html","hash":"c013c44d9426021709257af39a87825ce0a13cfd","modified":1457760792903},{"_id":"public/2016/03/12/View的滑动冲突/index.html","hash":"12df7931541015b367914eaa612521f9d4a736ed","modified":1457760792903},{"_id":"public/2016/03/12/属性动画/index.html","hash":"4333aef53ea699410af70739295aa0308da4c5e5","modified":1457760792903},{"_id":"public/2016/03/12/一个规范的自定义View/index.html","hash":"3bd770742fd0b4b866de47c03310c3db36bedec9","modified":1457760792903},{"_id":"public/2016/03/12/Windows和WindowManager/index.html","hash":"977337b4a79dfc00494e63a98ec82e63c4a9aae4","modified":1457760792903},{"_id":"public/CNAME","hash":"2cbb9049f9dc66b40e468f84842019af40c07036","modified":1457760641964},{"_id":"themes/yelee/.gitignore","hash":"79b4a9ac435bc5833a0bc461ebacb10908b34ed3","modified":1457693253035},{"_id":"themes/yelee/README.md","hash":"61aeb226084bec8e110d86f282c94a7646926b1c","modified":1457693253035},{"_id":"themes/yelee/_config.yml","hash":"eb8bfabf3f0d3b73350677971f68e97d72b6ee34","modified":1457698536752},{"_id":"themes/yelee/package.json","hash":"0199dfb3d44cf520b67464817d13c44a7766b8d6","modified":1457693253051},{"_id":"themes/yelee/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1457693253035},{"_id":"themes/yelee/.git/config","hash":"6825ab1d11bf7426de601ee5eea3ad2962e28396","modified":1457693253035},{"_id":"themes/yelee/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1457693236968},{"_id":"themes/yelee/.git/index","hash":"d38566f832c21c0fd944f9e37b0d7449e177e637","modified":1457748969371},{"_id":"themes/yelee/.git/packed-refs","hash":"05df77991ed6123b55b13951c259e43cc88c3fe1","modified":1457693253019},{"_id":"themes/yelee/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1457693253035},{"_id":"themes/yelee/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1457693253035},{"_id":"themes/yelee/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1457693253035},{"_id":"themes/yelee/layout/layout.ejs","hash":"3a4350f23a1286345f76c949466c97a7200dae8e","modified":1457693253035},{"_id":"themes/yelee/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1457693253035},{"_id":"themes/yelee/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1457693253051},{"_id":"themes/yelee/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1457693253051},{"_id":"themes/yelee/source/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1457693253051},{"_id":"themes/yelee/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1457693236968},{"_id":"themes/yelee/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1457693236968},{"_id":"themes/yelee/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1457693236968},{"_id":"themes/yelee/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1457693236968},{"_id":"themes/yelee/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1457693236968},{"_id":"themes/yelee/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1457693236968},{"_id":"themes/yelee/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1457693236968},{"_id":"themes/yelee/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1457693236968},{"_id":"themes/yelee/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1457693236968},{"_id":"themes/yelee/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1457693236968},{"_id":"themes/yelee/.git/logs/HEAD","hash":"e4f4007595d0144bc61ebc7028682f2963552b17","modified":1457693253035},{"_id":"themes/yelee/layout/_partial/after-footer.ejs","hash":"a0fde08cbf8d1ce0f6289fd19c6e1bd50d27c67d","modified":1457693253035},{"_id":"themes/yelee/layout/_partial/archive-post.ejs","hash":"0ecc2ad07b4abad80f564ac1858c50bcbdff34f8","modified":1457693253035},{"_id":"themes/yelee/layout/_partial/archive.ejs","hash":"a4eacc2bc1278095a0ef99f904b0634c78f980eb","modified":1457693253035},{"_id":"themes/yelee/layout/_partial/article.ejs","hash":"f74f702b5c52abb75b443d39a8584a276335f79f","modified":1457697978375},{"_id":"themes/yelee/layout/_partial/background.ejs","hash":"aeef39abef66ee0bd6c9efe856eaeb1b81416d41","modified":1457693253035},{"_id":"themes/yelee/layout/_partial/footer.ejs","hash":"629a2ca943cf6ba49736e86d5d40a90722d7859d","modified":1457693253035},{"_id":"themes/yelee/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1457693253035},{"_id":"themes/yelee/layout/_partial/head.ejs","hash":"81be535100ea4025983f26c1b034bd97eac0d45e","modified":1457693253035},{"_id":"themes/yelee/layout/_partial/header.ejs","hash":"b69855e07b65117769adc515cb64b803932068c9","modified":1457693253035},{"_id":"themes/yelee/layout/_partial/left-col.ejs","hash":"3bd3b365e68fa074c6b3ae1684ce772d09eb84cd","modified":1457693253035},{"_id":"themes/yelee/layout/_partial/hide-labels.ejs","hash":"0972f43594b6975108b6cb21cd84d4da8c2e87c3","modified":1457693253035},{"_id":"themes/yelee/layout/_partial/mathjax.ejs","hash":"e045f237b2434592be4d9a64ffab298bcf023be7","modified":1457693253035},{"_id":"themes/yelee/layout/_partial/page.ejs","hash":"e9bb15f7b3e3d7fbbbcac8df462584141f97bcd7","modified":1457693253035},{"_id":"themes/yelee/layout/_partial/mobile-nav.ejs","hash":"8e14f5a3fb03d93ee2e5dcb0c26903f365518be1","modified":1457693253035},{"_id":"themes/yelee/layout/_partial/post-nav-button.ejs","hash":"ad288c162e7a700b213709a5dd7a96abd0cb8879","modified":1457693253035},{"_id":"themes/yelee/layout/_partial/scrolling-button.ejs","hash":"aad58483a5d6d4627fce9bbc367784d57e93c544","modified":1457693253035},{"_id":"themes/yelee/layout/_partial/toc.ejs","hash":"effd5975e5d20cdcc5759b3522a4f6e7216e8304","modified":1457693253035},{"_id":"themes/yelee/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1457693253051},{"_id":"themes/yelee/source/css/_variables.styl","hash":"0eb5069d44c1709600606d830f5060ca6cf4ddb3","modified":1457693253051},{"_id":"themes/yelee/source/css/style.styl","hash":"c7e0461510b872b124fee10020ac7ee8da3c5a67","modified":1457693253051},{"_id":"themes/yelee/source/background/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1457693253051},{"_id":"themes/yelee/source/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1457693253051},{"_id":"themes/yelee/source/background/bg-3.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1457693253051},{"_id":"themes/yelee/source/background/bg-4.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1457693253051},{"_id":"themes/yelee/source/background/bg-5.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1457693253051},{"_id":"themes/yelee/source/background/bg-6.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1457693253051},{"_id":"themes/yelee/source/background/bg-7.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1457693253051},{"_id":"themes/yelee/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1457693253051},{"_id":"themes/yelee/source/background/bg-8.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1457693253051},{"_id":"themes/yelee/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1457693253051},{"_id":"themes/yelee/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1457693253051},{"_id":"themes/yelee/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1457693253051},{"_id":"themes/yelee/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1457693253051},{"_id":"themes/yelee/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1457693253051},{"_id":"themes/yelee/source/fancybox/jquery.fancybox.css","hash":"96138eaddfbd305160ddcb98a5f08555ca6cb4ee","modified":1457693253051},{"_id":"themes/yelee/source/fancybox/jquery.fancybox.js","hash":"004bb0812414554ab48067792f09e978603253b6","modified":1457693253051},{"_id":"themes/yelee/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1457693253051},{"_id":"themes/yelee/source/img/GitHub.png","hash":"08c955a91b6733bd51913b54c69fe742d546d0ec","modified":1457693253066},{"_id":"themes/yelee/source/img/TiddlyWiki.png","hash":"58be3c981c6d25b47ddaab2f254838f9baa01d59","modified":1457693253066},{"_id":"themes/yelee/source/img/SegmentFault.png","hash":"52bd4ddf6df129b6958398b21fa370f17cadb428","modified":1457693253066},{"_id":"themes/yelee/source/img/V2EX.png","hash":"9adab6af95db9318e980c01cadbc5de800b4c816","modified":1457693253066},{"_id":"themes/yelee/source/img/avatar.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1457693253066},{"_id":"themes/yelee/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1457693253066},{"_id":"themes/yelee/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1457693253066},{"_id":"themes/yelee/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1457693253066},{"_id":"themes/yelee/source/img/新浪微博.png","hash":"c9fb558158f491104fd8dbafc92c30591ad0299e","modified":1457693253066},{"_id":"themes/yelee/source/img/知乎.png","hash":"50e43bad8fefb3950b13dc86aaa86de8a79432ae","modified":1457693253066},{"_id":"themes/yelee/source/img/网易云音乐.png","hash":"8bc2a2e2c4312ee9d4879b24f9e2bd51e6436840","modified":1457693253066},{"_id":"themes/yelee/source/img/简书.png","hash":"bfe5e7b6146de19d180f36fa5a2b074c2bc23406","modified":1457693253066},{"_id":"themes/yelee/source/img/虾米音乐.png","hash":"d3ff836d5d58e10fb30fac1bae0aae34cfe2038f","modified":1457693253066},{"_id":"themes/yelee/source/img/豆瓣.png","hash":"9f4798298548727052fa6ae809933c9e8ac42571","modified":1457693253066},{"_id":"themes/yelee/source/js/GithubRepoWidget.js","hash":"5fb1bf6cf973062771ddf275ceeca5bc69c81c77","modified":1457693253066},{"_id":"themes/yelee/source/js/clipboard.min.js","hash":"fe53ec94d317bae8f12d1a5eee23040bf02680bb","modified":1457693253066},{"_id":"themes/yelee/source/js/instagram.js","hash":"81e13cacf4947118ed1920e59b04ccf6beef6b86","modified":1457693253066},{"_id":"themes/yelee/source/js/jquery.lazyload.js","hash":"91d5acc31d0bcbdf4782166a66344e58fff28d89","modified":1457693253066},{"_id":"themes/yelee/source/js/main.js","hash":"201a3765df32ae2f1e9dfec03129d554dd0b9ee3","modified":1457693253066},{"_id":"themes/yelee/source/js/mobile.js","hash":"230339073c37202d953b2895856551d8ccb1b19a","modified":1457693253066},{"_id":"themes/yelee/source/js/pc.js","hash":"60a76453464e823fd05e3a6c7301d921bebd6419","modified":1457693253066},{"_id":"themes/yelee/source/background/bg-10.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1457693253051},{"_id":"themes/yelee/source/background/bg-9.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1457693253051},{"_id":"themes/yelee/source/img/spark.png","hash":"f1a8ed0ac077dd6001965f2e8529bafe2a3feeb3","modified":1457685000997},{"_id":"themes/yelee/.git/objects/pack/pack-051b4c6bd98f2003eff7e537352d5ae5809d1a84.idx","hash":"a5f0e96785d739252fc8a6a42ea1bc4d399c2f5e","modified":1457693252910},{"_id":"themes/yelee/.git/refs/heads/master","hash":"4a817206546b37fa7355a353b1f3f359d007ee1f","modified":1457693253035},{"_id":"themes/yelee/layout/_partial/comments/disqus.ejs","hash":"2e5cad68bc59190b4158f4ab1879a222ca49a0d2","modified":1457693253035},{"_id":"themes/yelee/layout/_partial/comments/youyan.ejs","hash":"142e1bb357d738663655ddab25f75e85e20345e4","modified":1457693253035},{"_id":"themes/yelee/layout/_partial/comments/duoshuo.ejs","hash":"1f9ac8182fe0b867a8f1988888336c40c25894cd","modified":1457693253035},{"_id":"themes/yelee/layout/_partial/post/category.ejs","hash":"08c8d98bc6a73d3f72a3b0b30521ff28e1b657a7","modified":1457693253035},{"_id":"themes/yelee/layout/_partial/post/date.ejs","hash":"a9fc6bac9e1b90c1c17c0d0ffd97f9b108072fbe","modified":1457693253035},{"_id":"themes/yelee/layout/_partial/post/nav.ejs","hash":"e1b8d9bf1951aa621d6dffc1a4944da42571d064","modified":1457693253035},{"_id":"themes/yelee/layout/_partial/post/share.ejs","hash":"bfac451ed8d632dbba84673691cc5ea3315c1469","modified":1457693253035},{"_id":"themes/yelee/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1457693253035},{"_id":"themes/yelee/layout/_partial/post/tag.ejs","hash":"7d2693a1162bf26e4b1ae9b789e0b2a2637ddbd5","modified":1457693253035},{"_id":"themes/yelee/source/css/_partial/archive.styl","hash":"053c1684b6edaca7fa0c94a7f9fca637ccece2c2","modified":1457693253051},{"_id":"themes/yelee/source/css/_partial/article.styl","hash":"3c1557b8f258c0c45e7e4802264f8f5e85a966b5","modified":1457693253051},{"_id":"themes/yelee/source/css/_partial/footer.styl","hash":"2277125ef35f96a1ba76a1b84fc570526826453d","modified":1457693253051},{"_id":"themes/yelee/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1457693253051},{"_id":"themes/yelee/source/css/_partial/instagram.styl","hash":"a093443add2f529396d6b6bdef1675bc3acf3958","modified":1457693253051},{"_id":"themes/yelee/source/css/_partial/highlight.styl","hash":"48f409828549190efedb9067dae0c6828a4d22b0","modified":1457693253051},{"_id":"themes/yelee/source/css/_partial/main.styl","hash":"9f6fb1cefb51fa706cc271b1a1bfbbb2a2297b5e","modified":1457693253051},{"_id":"themes/yelee/source/css/_partial/mobile-slider.styl","hash":"211a4286f60751c372090fa96f384521e2ce352c","modified":1457693253051},{"_id":"themes/yelee/source/css/_partial/mobile.styl","hash":"6f2f78d5d5ba7e4e035f7ea3948b9e196b0b7136","modified":1457693253051},{"_id":"themes/yelee/source/css/_partial/page.styl","hash":"ca3f871adf8fdb296e4394070605dded53d93cb2","modified":1457693253051},{"_id":"themes/yelee/source/css/_partial/scroll.styl","hash":"f32deb9192568a2ea789d77a23a08d07f4e57d59","modified":1457693253051},{"_id":"themes/yelee/source/css/_partial/share.styl","hash":"3cfc59278c21b504f8f633e08767a449e03af8d0","modified":1457693253051},{"_id":"themes/yelee/source/css/_partial/tagcloud.styl","hash":"85540c10503e0fb250b307ca3966583ee70e63f3","modified":1457693253051},{"_id":"themes/yelee/source/css/_partial/wheelmenu.styl","hash":"9e57421eab562ea13d0ed2b2e1415eee79fa23d0","modified":1457693253051},{"_id":"themes/yelee/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1457693253051},{"_id":"themes/yelee/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1457693253051},{"_id":"themes/yelee/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1457693253051},{"_id":"themes/yelee/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1457693253051},{"_id":"themes/yelee/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1457693253051},{"_id":"themes/yelee/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1457693253051},{"_id":"themes/yelee/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1457693253051},{"_id":"themes/yelee/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1457693253051},{"_id":"themes/yelee/source/font-awesome/css/font-awesome.css","hash":"6d39a08bc85169eca450978f895f85d5d3451c0a","modified":1457693253066},{"_id":"themes/yelee/source/font-awesome/css/font-awesome.min.css","hash":"624e4a106f0cf385ff4bd6a65c52cecd84f42ef9","modified":1457693253066},{"_id":"themes/yelee/source/font-awesome/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1457693253066},{"_id":"themes/yelee/source/font-awesome/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1457693253066},{"_id":"themes/yelee/source/font-awesome/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1457693253066},{"_id":"themes/yelee/source/font-awesome/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1457693253066},{"_id":"themes/yelee/.git/logs/refs/heads/master","hash":"e4f4007595d0144bc61ebc7028682f2963552b17","modified":1457693253035},{"_id":"themes/yelee/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1457693253035},{"_id":"themes/yelee/source/css/_partial/customise/code-block.styl","hash":"4db1a992a06fd92b779f0afc9bb8bb3667bdb101","modified":1457693253051},{"_id":"themes/yelee/source/css/_partial/customise/blockquote.styl","hash":"5d14ba8efac7a0f1ffd5bc8924fcfdb7294bc918","modified":1457693253051},{"_id":"themes/yelee/source/css/_partial/customise/color-scheme.styl","hash":"69a77b9f7b8e84df7ae1c78e76659a92739b79a9","modified":1457693253051},{"_id":"themes/yelee/source/css/_partial/customise/social-icon.styl","hash":"2f3e9c3a08c7693ba1787db0c4af8a3fd98d696a","modified":1457693253051},{"_id":"themes/yelee/source/css/_partial/customise/inline-code.styl","hash":"aedbcd697c9fbaeeb93c068be3db771c41feba0d","modified":1457693253051},{"_id":"themes/yelee/source/css/_partial/post/youyan.styl","hash":"9076b0d3c231e16b8a1d7f834e62a98d843edd32","modified":1457693253051},{"_id":"themes/yelee/source/font-awesome/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1457693253066},{"_id":"themes/yelee/.git/logs/refs/remotes/origin/HEAD","hash":"e4f4007595d0144bc61ebc7028682f2963552b17","modified":1457693253035},{"_id":"themes/yelee/source/font-awesome/fonts/fontawesome-webfont.svg","hash":"550ef5c1253c8376f2ead32b654eb58d3c106ca3","modified":1457693253066},{"_id":"themes/yelee/.git/objects/pack/pack-051b4c6bd98f2003eff7e537352d5ae5809d1a84.pack","hash":"512022c44cceff983de6e77d93f191b92d19993f","modified":1457693252941},{"_id":"public/apple-touch-icon.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1457760792934},{"_id":"public/background/bg-1.jpg","hash":"31d7bb15211000c05656899302f8ec9ee3de0e9f","modified":1457760792934},{"_id":"public/background/bg-2.jpg","hash":"d1e0b92e8fa822e44d185b5e1bf94ab47bc98a0a","modified":1457760792934},{"_id":"public/background/bg-3.jpg","hash":"7ae358f3ab8b41558444053400e796c41b3ba0e2","modified":1457760792934},{"_id":"public/background/bg-4.jpg","hash":"9a5241de4c880f13a278f6980bf11d4dfb214d82","modified":1457760792934},{"_id":"public/background/bg-5.jpg","hash":"d476909f06fe8267c676952e3582bf9e9ff73585","modified":1457760792934},{"_id":"public/background/bg-6.jpg","hash":"6df1383d0f6134016d844df9abb740a6e0c0b2c5","modified":1457760792934},{"_id":"public/background/bg-7.jpg","hash":"1a06d3a660bfb99b62d760e4e1e09de168a4c74c","modified":1457760792934},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1457760792934},{"_id":"public/background/bg-8.jpg","hash":"8e80d0b7786c3bf7b9648c0190719e78001e9eeb","modified":1457760792934},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1457760792934},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1457760792934},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1457760792934},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1457760792934},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1457760792934},{"_id":"public/img/GitHub.png","hash":"08c955a91b6733bd51913b54c69fe742d546d0ec","modified":1457760792934},{"_id":"public/img/TiddlyWiki.png","hash":"58be3c981c6d25b47ddaab2f254838f9baa01d59","modified":1457760792934},{"_id":"public/img/SegmentFault.png","hash":"52bd4ddf6df129b6958398b21fa370f17cadb428","modified":1457760792934},{"_id":"public/img/V2EX.png","hash":"9adab6af95db9318e980c01cadbc5de800b4c816","modified":1457760792934},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1457760792934},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1457760792934},{"_id":"public/img/avatar.png","hash":"c0fda117fa166d63b9eb690cc5e4fb2caaf493b3","modified":1457760792934},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1457760792934},{"_id":"public/img/新浪微博.png","hash":"c9fb558158f491104fd8dbafc92c30591ad0299e","modified":1457760792934},{"_id":"public/img/知乎.png","hash":"50e43bad8fefb3950b13dc86aaa86de8a79432ae","modified":1457760792934},{"_id":"public/img/网易云音乐.png","hash":"8bc2a2e2c4312ee9d4879b24f9e2bd51e6436840","modified":1457760792934},{"_id":"public/img/虾米音乐.png","hash":"d3ff836d5d58e10fb30fac1bae0aae34cfe2038f","modified":1457760792934},{"_id":"public/img/简书.png","hash":"bfe5e7b6146de19d180f36fa5a2b074c2bc23406","modified":1457760792934},{"_id":"public/img/豆瓣.png","hash":"9f4798298548727052fa6ae809933c9e8ac42571","modified":1457760792934},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1457760792934},{"_id":"public/background/bg-10.jpg","hash":"51b427f07ffc6f2ad97651f23cc16e8f19ed02f9","modified":1457760793888},{"_id":"public/background/bg-9.jpg","hash":"e4a3631b6b0f94ebce30a6f01ecb2b6ed7cfdb0b","modified":1457760793888},{"_id":"public/img/spark.png","hash":"f1a8ed0ac077dd6001965f2e8529bafe2a3feeb3","modified":1457760793888},{"_id":"public/font-awesome/fonts/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1457760793888},{"_id":"public/font-awesome/fonts/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1457760793888},{"_id":"public/font-awesome/fonts/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1457760793888},{"_id":"public/font-awesome/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1457760793888},{"_id":"public/fancybox/jquery.fancybox.css","hash":"b6aa6692c2e5f8bd74d96827b78570f0c5683c20","modified":1457760793888},{"_id":"public/js/GithubRepoWidget.js","hash":"624e81a3b0e57495b0c0e0b3e056296c6e8ae5df","modified":1457760793888},{"_id":"public/js/main.js","hash":"31d5b5fbdac59086d2b449685129460019847170","modified":1457760793888},{"_id":"public/js/mobile.js","hash":"f04858f253770a65172423cda0e583782bbb1feb","modified":1457760793888},{"_id":"public/js/clipboard.min.js","hash":"c13b4bb8fee46447284590d2afc0efca0ea3cb7b","modified":1457760793888},{"_id":"public/js/instagram.js","hash":"f19adbcc0dac33536bc6660598059048ec901882","modified":1457760793888},{"_id":"public/js/jquery.lazyload.js","hash":"8e4ad3e17f8e82be311b6b6e87811762e2b2d764","modified":1457760793888},{"_id":"public/js/pc.js","hash":"ef472f8a53aba93fe09704c454b18a961acdf9e3","modified":1457760793888},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1457760793888},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1457760793888},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1457760793888},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1457760793888},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1457760793888},{"_id":"public/css/style.css","hash":"df0af24d857627554c0b8578591a0f824bb878b3","modified":1457760793888},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1457760793888},{"_id":"public/fancybox/jquery.fancybox.js","hash":"a82597493d75ea989ca586e09173cff332efe41e","modified":1457760793888},{"_id":"public/font-awesome/css/font-awesome.min.css","hash":"12d6861075de8e293265ff6ff03b1f3adcb44c76","modified":1457760793888},{"_id":"public/font-awesome/css/font-awesome.css","hash":"b488600451227b445414796e9b8550e7c1bd6d29","modified":1457760793888},{"_id":"public/font-awesome/fonts/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1457760793888},{"_id":"public/font-awesome/fonts/fontawesome-webfont.svg","hash":"550ef5c1253c8376f2ead32b654eb58d3c106ca3","modified":1457760793903}],"Category":[{"name":"Android","_id":"cilop1pue0002qcmy8ed9ltin"},{"name":"Android开发艺术探索笔记","parent":"cilop1pue0002qcmy8ed9ltin","_id":"cilop1put0009qcmypkz7gfsz"}],"Data":[],"Page":[{"title":"tags","date":"2016-03-11T11:51:26.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-03-11 19:51:26\n---\n","updated":"2016-03-12T05:28:32.363Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cilop1pvp001yqcmyzryh19ve","content":"","excerpt":"","more":""}],"Post":[{"title":"每日一妹子","top":10,"_content":"刚开始学习Android的时候，主要就是学习了一些Activity的生命周期，各种View和Layout的使用，SQLite等零散的知识点，这些东西市面上任何一本Android的入门书籍都会覆盖，但是学习完这些之后就有些迷茫了，不知道下一步该学一些什么？如果你也正好处于这个状态不妨看看这个开源项目。\n自己走过一些弯路，所以写了一个这样的App，希望可以对学习Android的新手有些帮助。\n<!-- more -->\n\n# Meizi\n当前版本V 1.2\n\n刚开始学习Android的时候，主要就是学习了一些Activity的生命周期，各种View和Layout的使用，SQLite等零散的知识点，这些东西市面上任何一本Android的入门书籍都会覆盖，但是学习完这些之后就有些迷茫了，不知道下一步该学一些什么？如果你也正好处于这个状态不妨看看这个开源项目。\n\n自己走过一些弯路，所以写了一个这样的App，希望可以对学习Android的新手有些帮助。\n\n一个特别适合新手练习的Android小项目——每日一妹纸\n\n每天更新一张[@代码家](https://github.com/daimajia)精选妹纸图片，所以叫每日一妹纸，咳咳，不要污，这是一个很绅士的项目（一脸绅士(๑•̀ㅂ•́) ✧）\n\n第一版目前已完成，本项目会持续更新，遇到任何问题欢迎与我联系^_^\n## 部分示例\n\n![示例](https://github.com/SparkYuan/Meizi/raw/master/pic/meizi.gif)\n\n![首页](https://raw.githubusercontent.com/SparkYuan/Meizi/master/pic/Screenshot_2016-03-08-10-37-45.png)\n\n![1](https://raw.githubusercontent.com/SparkYuan/Meizi/master/pic/Screenshot_2016-03-08-10-37-48.png)\n\n![2](https://raw.githubusercontent.com/SparkYuan/Meizi/master/pic/Screenshot_2016-03-08-10-41-20.png)\n\n![3](https://raw.githubusercontent.com/SparkYuan/Meizi/master/pic/Screenshot_2016-03-08-10-36-44.png)\n\n\n\n## 为什么说这是一个特别适合新手练习的小项目？\n\n- 服务器API接口功能丰富且无访问次数限制\n- 包含了常见的网络通信，数据缓存等功能\n- 包含了常见的Gradle用法\n- 多语言适配\n- 自定义了一个ImageView\n- 使用了流行的Realm，Retrofit，Glide，Butterknife等开源项目，方便新手学习他们的使用\n- 遵循Material Design规则\n- ......\n \n\n## 用到的开源技术\n- Butterknife\n- Realm\n- Retrofit\n- Glide\n- ......\n\n## 数据来源\n[http://gank.io](http://gank.io) \n\n## 联系方式\n 博客：\n - Hexo：[http://sparkyuan.me/](http://sparkyuan.me/)\n - CSDN：[http://blog.csdn.net/l664675249](http://blog.csdn.net/l664675249)\n\n\n邮箱：[daniellee0929@gmail.com](daniellee0929@gmail.com)\n\n## License\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n\tUnless required by applicable law or agreed to in writing, software\n\tdistributed under the License is distributed on an \"AS IS\" BASIS,\n\tWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\tSee the License for the specific language governing permissions and\n\tlimitations under the License.\n\n","source":"_posts/Meizi.md","raw":"title: 每日一妹子\ncategories:\n- Android\ntags:\n- Android\ntop: 10\n---\n刚开始学习Android的时候，主要就是学习了一些Activity的生命周期，各种View和Layout的使用，SQLite等零散的知识点，这些东西市面上任何一本Android的入门书籍都会覆盖，但是学习完这些之后就有些迷茫了，不知道下一步该学一些什么？如果你也正好处于这个状态不妨看看这个开源项目。\n自己走过一些弯路，所以写了一个这样的App，希望可以对学习Android的新手有些帮助。\n<!-- more -->\n\n# Meizi\n当前版本V 1.2\n\n刚开始学习Android的时候，主要就是学习了一些Activity的生命周期，各种View和Layout的使用，SQLite等零散的知识点，这些东西市面上任何一本Android的入门书籍都会覆盖，但是学习完这些之后就有些迷茫了，不知道下一步该学一些什么？如果你也正好处于这个状态不妨看看这个开源项目。\n\n自己走过一些弯路，所以写了一个这样的App，希望可以对学习Android的新手有些帮助。\n\n一个特别适合新手练习的Android小项目——每日一妹纸\n\n每天更新一张[@代码家](https://github.com/daimajia)精选妹纸图片，所以叫每日一妹纸，咳咳，不要污，这是一个很绅士的项目（一脸绅士(๑•̀ㅂ•́) ✧）\n\n第一版目前已完成，本项目会持续更新，遇到任何问题欢迎与我联系^_^\n## 部分示例\n\n![示例](https://github.com/SparkYuan/Meizi/raw/master/pic/meizi.gif)\n\n![首页](https://raw.githubusercontent.com/SparkYuan/Meizi/master/pic/Screenshot_2016-03-08-10-37-45.png)\n\n![1](https://raw.githubusercontent.com/SparkYuan/Meizi/master/pic/Screenshot_2016-03-08-10-37-48.png)\n\n![2](https://raw.githubusercontent.com/SparkYuan/Meizi/master/pic/Screenshot_2016-03-08-10-41-20.png)\n\n![3](https://raw.githubusercontent.com/SparkYuan/Meizi/master/pic/Screenshot_2016-03-08-10-36-44.png)\n\n\n\n## 为什么说这是一个特别适合新手练习的小项目？\n\n- 服务器API接口功能丰富且无访问次数限制\n- 包含了常见的网络通信，数据缓存等功能\n- 包含了常见的Gradle用法\n- 多语言适配\n- 自定义了一个ImageView\n- 使用了流行的Realm，Retrofit，Glide，Butterknife等开源项目，方便新手学习他们的使用\n- 遵循Material Design规则\n- ......\n \n\n## 用到的开源技术\n- Butterknife\n- Realm\n- Retrofit\n- Glide\n- ......\n\n## 数据来源\n[http://gank.io](http://gank.io) \n\n## 联系方式\n 博客：\n - Hexo：[http://sparkyuan.me/](http://sparkyuan.me/)\n - CSDN：[http://blog.csdn.net/l664675249](http://blog.csdn.net/l664675249)\n\n\n邮箱：[daniellee0929@gmail.com](daniellee0929@gmail.com)\n\n## License\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n\tUnless required by applicable law or agreed to in writing, software\n\tdistributed under the License is distributed on an \"AS IS\" BASIS,\n\tWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\tSee the License for the specific language governing permissions and\n\tlimitations under the License.\n\n","slug":"Meizi","published":1,"date":"2016-03-12T05:28:32.363Z","updated":"2016-03-12T05:28:32.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilop1pty0000qcmythoned69","content":"<p>刚开始学习Android的时候，主要就是学习了一些Activity的生命周期，各种View和Layout的使用，SQLite等零散的知识点，这些东西市面上任何一本Android的入门书籍都会覆盖，但是学习完这些之后就有些迷茫了，不知道下一步该学一些什么？如果你也正好处于这个状态不妨看看这个开源项目。<br>自己走过一些弯路，所以写了一个这样的App，希望可以对学习Android的新手有些帮助。<br><a id=\"more\"></a></p>\n<h1 id=\"Meizi\"><a href=\"#Meizi\" class=\"headerlink\" title=\"Meizi\"></a>Meizi</h1><p>当前版本V 1.2</p>\n<p>刚开始学习Android的时候，主要就是学习了一些Activity的生命周期，各种View和Layout的使用，SQLite等零散的知识点，这些东西市面上任何一本Android的入门书籍都会覆盖，但是学习完这些之后就有些迷茫了，不知道下一步该学一些什么？如果你也正好处于这个状态不妨看看这个开源项目。</p>\n<p>自己走过一些弯路，所以写了一个这样的App，希望可以对学习Android的新手有些帮助。</p>\n<p>一个特别适合新手练习的Android小项目——每日一妹纸</p>\n<p>每天更新一张<a href=\"https://github.com/daimajia\" target=\"_blank\" rel=\"external\">@代码家</a>精选妹纸图片，所以叫每日一妹纸，咳咳，不要污，这是一个很绅士的项目（一脸绅士(๑•̀ㅂ•́) ✧）</p>\n<p>第一版目前已完成，本项目会持续更新，遇到任何问题欢迎与我联系^_^</p>\n<h2 id=\"部分示例\"><a href=\"#部分示例\" class=\"headerlink\" title=\"部分示例\"></a>部分示例</h2><p><img src=\"https://github.com/SparkYuan/Meizi/raw/master/pic/meizi.gif\" alt=\"示例\"></p>\n<p><img src=\"https://raw.githubusercontent.com/SparkYuan/Meizi/master/pic/Screenshot_2016-03-08-10-37-45.png\" alt=\"首页\"></p>\n<p><img src=\"https://raw.githubusercontent.com/SparkYuan/Meizi/master/pic/Screenshot_2016-03-08-10-37-48.png\" alt=\"1\"></p>\n<p><img src=\"https://raw.githubusercontent.com/SparkYuan/Meizi/master/pic/Screenshot_2016-03-08-10-41-20.png\" alt=\"2\"></p>\n<p><img src=\"https://raw.githubusercontent.com/SparkYuan/Meizi/master/pic/Screenshot_2016-03-08-10-36-44.png\" alt=\"3\"></p>\n<h2 id=\"为什么说这是一个特别适合新手练习的小项目？\"><a href=\"#为什么说这是一个特别适合新手练习的小项目？\" class=\"headerlink\" title=\"为什么说这是一个特别适合新手练习的小项目？\"></a>为什么说这是一个特别适合新手练习的小项目？</h2><ul>\n<li>服务器API接口功能丰富且无访问次数限制</li>\n<li>包含了常见的网络通信，数据缓存等功能</li>\n<li>包含了常见的Gradle用法</li>\n<li>多语言适配</li>\n<li>自定义了一个ImageView</li>\n<li>使用了流行的Realm，Retrofit，Glide，Butterknife等开源项目，方便新手学习他们的使用</li>\n<li>遵循Material Design规则</li>\n<li>……</li>\n</ul>\n<h2 id=\"用到的开源技术\"><a href=\"#用到的开源技术\" class=\"headerlink\" title=\"用到的开源技术\"></a>用到的开源技术</h2><ul>\n<li>Butterknife</li>\n<li>Realm</li>\n<li>Retrofit</li>\n<li>Glide</li>\n<li>……</li>\n</ul>\n<h2 id=\"数据来源\"><a href=\"#数据来源\" class=\"headerlink\" title=\"数据来源\"></a>数据来源</h2><p><a href=\"http://gank.io\" target=\"_blank\" rel=\"external\">http://gank.io</a> </p>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><p> 博客：</p>\n<ul>\n<li>Hexo：<a href=\"http://sparkyuan.me/\" target=\"_blank\" rel=\"external\">http://sparkyuan.me/</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/l664675249\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/l664675249</a></li>\n</ul>\n<p>邮箱：<a href=\"daniellee0929@gmail.com\">daniellee0929@gmail.com</a></p>\n<h2 id=\"License\"><a href=\"#License\" class=\"headerlink\" title=\"License\"></a>License</h2><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an &quot;AS IS&quot; BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>","excerpt":"<p>刚开始学习Android的时候，主要就是学习了一些Activity的生命周期，各种View和Layout的使用，SQLite等零散的知识点，这些东西市面上任何一本Android的入门书籍都会覆盖，但是学习完这些之后就有些迷茫了，不知道下一步该学一些什么？如果你也正好处于这个状态不妨看看这个开源项目。<br>自己走过一些弯路，所以写了一个这样的App，希望可以对学习Android的新手有些帮助。<br>","more":"</p>\n<h1 id=\"Meizi\"><a href=\"#Meizi\" class=\"headerlink\" title=\"Meizi\"></a>Meizi</h1><p>当前版本V 1.2</p>\n<p>刚开始学习Android的时候，主要就是学习了一些Activity的生命周期，各种View和Layout的使用，SQLite等零散的知识点，这些东西市面上任何一本Android的入门书籍都会覆盖，但是学习完这些之后就有些迷茫了，不知道下一步该学一些什么？如果你也正好处于这个状态不妨看看这个开源项目。</p>\n<p>自己走过一些弯路，所以写了一个这样的App，希望可以对学习Android的新手有些帮助。</p>\n<p>一个特别适合新手练习的Android小项目——每日一妹纸</p>\n<p>每天更新一张<a href=\"https://github.com/daimajia\">@代码家</a>精选妹纸图片，所以叫每日一妹纸，咳咳，不要污，这是一个很绅士的项目（一脸绅士(๑•̀ㅂ•́) ✧）</p>\n<p>第一版目前已完成，本项目会持续更新，遇到任何问题欢迎与我联系^_^</p>\n<h2 id=\"部分示例\"><a href=\"#部分示例\" class=\"headerlink\" title=\"部分示例\"></a>部分示例</h2><p><img src=\"https://github.com/SparkYuan/Meizi/raw/master/pic/meizi.gif\" alt=\"示例\"></p>\n<p><img src=\"https://raw.githubusercontent.com/SparkYuan/Meizi/master/pic/Screenshot_2016-03-08-10-37-45.png\" alt=\"首页\"></p>\n<p><img src=\"https://raw.githubusercontent.com/SparkYuan/Meizi/master/pic/Screenshot_2016-03-08-10-37-48.png\" alt=\"1\"></p>\n<p><img src=\"https://raw.githubusercontent.com/SparkYuan/Meizi/master/pic/Screenshot_2016-03-08-10-41-20.png\" alt=\"2\"></p>\n<p><img src=\"https://raw.githubusercontent.com/SparkYuan/Meizi/master/pic/Screenshot_2016-03-08-10-36-44.png\" alt=\"3\"></p>\n<h2 id=\"为什么说这是一个特别适合新手练习的小项目？\"><a href=\"#为什么说这是一个特别适合新手练习的小项目？\" class=\"headerlink\" title=\"为什么说这是一个特别适合新手练习的小项目？\"></a>为什么说这是一个特别适合新手练习的小项目？</h2><ul>\n<li>服务器API接口功能丰富且无访问次数限制</li>\n<li>包含了常见的网络通信，数据缓存等功能</li>\n<li>包含了常见的Gradle用法</li>\n<li>多语言适配</li>\n<li>自定义了一个ImageView</li>\n<li>使用了流行的Realm，Retrofit，Glide，Butterknife等开源项目，方便新手学习他们的使用</li>\n<li>遵循Material Design规则</li>\n<li>……</li>\n</ul>\n<h2 id=\"用到的开源技术\"><a href=\"#用到的开源技术\" class=\"headerlink\" title=\"用到的开源技术\"></a>用到的开源技术</h2><ul>\n<li>Butterknife</li>\n<li>Realm</li>\n<li>Retrofit</li>\n<li>Glide</li>\n<li>……</li>\n</ul>\n<h2 id=\"数据来源\"><a href=\"#数据来源\" class=\"headerlink\" title=\"数据来源\"></a>数据来源</h2><p><a href=\"http://gank.io\">http://gank.io</a> </p>\n<h2 id=\"联系方式\"><a href=\"#联系方式\" class=\"headerlink\" title=\"联系方式\"></a>联系方式</h2><p> 博客：</p>\n<ul>\n<li>Hexo：<a href=\"http://sparkyuan.me/\">http://sparkyuan.me/</a></li>\n<li>CSDN：<a href=\"http://blog.csdn.net/l664675249\">http://blog.csdn.net/l664675249</a></li>\n</ul>\n<p>邮箱：<a href=\"daniellee0929@gmail.com\">daniellee0929@gmail.com</a></p>\n<h2 id=\"License\"><a href=\"#License\" class=\"headerlink\" title=\"License\"></a>License</h2><pre><code> http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an &quot;AS IS&quot; BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"title":"属性动画","_content":"Android Interface Definition Language (AIDL)， Android接口定义语言。系统中的进程之间不能共享内存，因此，需要提供一些机制在不同进程之间进行数据通信Interprocess communication (IPC)。AIDL就是解决这个问题的。\n<!-- more -->\n\n#介绍\nAndroid Interface Definition Language (AIDL)， Android接口定义语言。系统中的进程之间不能共享内存，因此，需要提供一些机制在不同进程之间进行数据通信Interprocess communication (IPC)。AIDL就是解决这个问题的。\n阅读本文需要了解Service的相关知识，关于Service的讲解请参考[http://blog.csdn.net/l664675249/article/details/48899323](http://blog.csdn.net/l664675249/article/details/48899323)\n\n#创建.aidl文件\naidl是用Java语法编写的，后缀为.aidl的文件。\n\n- 每一个aidl文件必须定义一个接口，在这个接口里声明方法\n- 在aidl里不能有static属性（field）\n- aidl支持基本的数据类型，当你需要使用额外的数据类型时需要把它们import进来，即使它们跟这个文件在同一个包中。\n\n\n##示例\n\n```java\n// IRemoteService.aidl\npackage com.example.android;\n\n// Declare any non-default types here with import statements\n\n/** Example service interface */\ninterface IRemoteService {\n    /** Request the process ID of this service, to do evil things with it. */\n    int getPid();\n\n    /** Demonstrates some basic types that you can use as parameters\n     * and return values in AIDL.\n     */\n    void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat,\n            double aDouble, String aString);\n}\n```\n\n把aidl文件存在src/目录下，当你build项目的时候，SDK工具会在gen/目录下生成一个与.aidl文件名字相同的.java文件。\n#实现接口\n生成的IRemoteService.java如下\n\n```java\npublic interface IRemoteService extends android.os.IInterface\n{\n/** Local-side IPC implementation stub class. */\npublic static abstract class Stub extends android.os.Binder implements com.spark.meizi.IRemoteService\n{\nprivate static final java.lang.String DESCRIPTOR = \"com.spark.meizi.IRemoteService\";\n/** Construct the stub at attach it to the interface. */\npublic Stub()\n{\nthis.attachInterface(this, DESCRIPTOR);\n}\n/**\n * Cast an IBinder object into an com.spark.meizi.IRemoteService interface,\n * generating a proxy if needed.\n */\npublic static com.spark.meizi.IRemoteService asInterface(android.os.IBinder obj)\n{\nif ((obj==null)) {\nreturn null;\n}\nandroid.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);\nif (((iin!=null)&&(iin instanceof com.spark.meizi.IRemoteService))) {\nreturn ((com.spark.meizi.IRemoteService)iin);\n}\nreturn new com.spark.meizi.IRemoteService.Stub.Proxy(obj);\n}\n@Override public android.os.IBinder asBinder()\n{\nreturn this;\n}\n@Override public boolean onTransact(int code, android.os.Parcel data, android.os.Parcel reply, int flags) throws android.os.RemoteException\n{\nswitch (code)\n{\ncase INTERFACE_TRANSACTION:\n{\nreply.writeString(DESCRIPTOR);\nreturn true;\n}\ncase TRANSACTION_basicTypes:\n{\ndata.enforceInterface(DESCRIPTOR);\nint _arg0;\n_arg0 = data.readInt();\nlong _arg1;\n_arg1 = data.readLong();\nboolean _arg2;\n_arg2 = (0!=data.readInt());\nfloat _arg3;\n_arg3 = data.readFloat();\ndouble _arg4;\n_arg4 = data.readDouble();\njava.lang.String _arg5;\n_arg5 = data.readString();\nthis.basicTypes(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5);\nreply.writeNoException();\nreturn true;\n}\n}\nreturn super.onTransact(code, data, reply, flags);\n}\nprivate static class Proxy implements com.spark.meizi.IRemoteService\n{\nprivate android.os.IBinder mRemote;\nProxy(android.os.IBinder remote)\n{\nmRemote = remote;\n}\n@Override public android.os.IBinder asBinder()\n{\nreturn mRemote;\n}\npublic java.lang.String getInterfaceDescriptor()\n{\nreturn DESCRIPTOR;\n}\n/**\n     * Demonstrates some basic types that you can use as parameters\n     * and return values in AIDL.\n     */\n@Override public void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat, double aDouble, java.lang.String aString) throws android.os.RemoteException\n{\nandroid.os.Parcel _data = android.os.Parcel.obtain();\nandroid.os.Parcel _reply = android.os.Parcel.obtain();\ntry {\n_data.writeInterfaceToken(DESCRIPTOR);\n_data.writeInt(anInt);\n_data.writeLong(aLong);\n_data.writeInt(((aBoolean)?(1):(0)));\n_data.writeFloat(aFloat);\n_data.writeDouble(aDouble);\n_data.writeString(aString);\nmRemote.transact(Stub.TRANSACTION_basicTypes, _data, _reply, 0);\n_reply.readException();\n}\nfinally {\n_reply.recycle();\n_data.recycle();\n}\n}\n}\nstatic final int TRANSACTION_basicTypes = (android.os.IBinder.FIRST_CALL_TRANSACTION + 0);\n}\n/**\n     * Demonstrates some basic types that you can use as parameters\n     * and return values in AIDL.\n     */\npublic void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat, double aDouble, java.lang.String aString) throws android.os.RemoteException;\n}\n```\n在这个文件中有一个**内部类Stub**，这是父接口的一个抽象实现，并声明了aidl中的所有方法。为了实现由aidl生成的接口，我们需要继承Stub并实现从aidl继承过来的方法。下面是一个使用匿名类的例子\n\n```java\nprivate final IRemoteService.Stub mBinder = new IRemoteService.Stub() {\n    public int getPid(){\n        return Process.myPid();\n    }\n    public void basicTypes(int anInt, long aLong, boolean aBoolean,\n        float aFloat, double aDouble, String aString) {\n        // Does nothing\n    }\n};\n```\n这样mBinder就是一个Stub的实例了，下一步就是如何在client端使用，与service端产生交互了。\n注：\n\n- 不能保证请求是在主线程被执行的，所以从构建到使用要考虑Service线程的安全性\n- 默认情况下，请求是同步的，所以尽量不要在主线程中发出请求\n- 所有的异常都不会返回给请求者（Caller）\n\n#在Client中使用接口\n当你已经实现你的Service之后，你需把它暴露在Client中使Client可以绑定它。继承Service并实现onBind()方法，来返回一个实现了Stub的实例。下面就是一个把IRemoteService暴露给Client的例子：\n\n```java\npublic class RemoteService extends Service {\n    @Override\n    public void onCreate() {\n        super.onCreate();\n    }\n\n    @Override\n    public IBinder onBind(Intent intent) {\n        // Return the interface\n        return mBinder;\n    }\n\n    private final IRemoteService.Stub mBinder = new IRemoteService.Stub() {\n        public int getPid(){\n            return Process.myPid();\n        }\n        public void basicTypes(int anInt, long aLong, boolean aBoolean,\n            float aFloat, double aDouble, String aString) {\n            // Does nothing\n        }\n    };\n}\n\n```\n现在client（比如是一个Activity）可以调用bindService()来连接这个Service，通过onServiceConnected()来接收Service中 onBind() 返回的mBinder，最后使用YourServiceInterface.Stub.asInterface(service)来把返回的mBinder转换成YourServiceInterface类型。例子如下：\n\n```java\nIRemoteService mIRemoteService;\nprivate ServiceConnection mConnection = new ServiceConnection() {\n    // Called when the connection with the service is established\n    public void onServiceConnected(ComponentName className, IBinder service) {\n        // Following the example above for an AIDL interface,\n        // this gets an instance of the IRemoteInterface, which we can use to call on the service\n        mIRemoteService = IRemoteService.Stub.asInterface(service);\n    }\n\n    // Called when the connection with the service disconnects unexpectedly\n    public void onServiceDisconnected(ComponentName className) {\n        Log.e(TAG, \"Service has unexpectedly disconnected\");\n        mIRemoteService = null;\n    }\n};\n```\n注：\n如果Service和Client在两个不同的Application中，Client的Application的src/目录下必须也有对应的.aidl文件。\n#一个Client的例子\n```java\npublic static class Binding extends Activity {\n    /** The primary interface we will be calling on the service. */\n    IRemoteService mService = null;\n    /** Another interface we use on the service. */\n    ISecondary mSecondaryService = null;\n\n    Button mKillButton;\n    TextView mCallbackText;\n\n    private boolean mIsBound;\n\n    /**\n     * Standard initialization of this activity.  Set up the UI, then wait\n     * for the user to poke it before doing anything.\n     */\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.remote_service_binding);\n\n        // Watch for button clicks.\n        Button button = (Button)findViewById(R.id.bind);\n        button.setOnClickListener(mBindListener);\n        button = (Button)findViewById(R.id.unbind);\n        button.setOnClickListener(mUnbindListener);\n        mKillButton = (Button)findViewById(R.id.kill);\n        mKillButton.setOnClickListener(mKillListener);\n        mKillButton.setEnabled(false);\n\n        mCallbackText = (TextView)findViewById(R.id.callback);\n        mCallbackText.setText(\"Not attached.\");\n    }\n\n    /**\n     * Class for interacting with the main interface of the service.\n     */\n    private ServiceConnection mConnection = new ServiceConnection() {\n        public void onServiceConnected(ComponentName className,\n                IBinder service) {\n            // This is called when the connection with the service has been\n            // established, giving us the service object we can use to\n            // interact with the service.  We are communicating with our\n            // service through an IDL interface, so get a client-side\n            // representation of that from the raw service object.\n            mService = IRemoteService.Stub.asInterface(service);\n            mKillButton.setEnabled(true);\n            mCallbackText.setText(\"Attached.\");\n\n            // We want to monitor the service for as long as we are\n            // connected to it.\n            try {\n                mService.registerCallback(mCallback);\n            } catch (RemoteException e) {\n                // In this case the service has crashed before we could even\n                // do anything with it; we can count on soon being\n                // disconnected (and then reconnected if it can be restarted)\n                // so there is no need to do anything here.\n            }\n\n            // As part of the sample, tell the user what happened.\n            Toast.makeText(Binding.this, R.string.remote_service_connected,\n                    Toast.LENGTH_SHORT).show();\n        }\n\n        public void onServiceDisconnected(ComponentName className) {\n            // This is called when the connection with the service has been\n            // unexpectedly disconnected -- that is, its process crashed.\n            mService = null;\n            mKillButton.setEnabled(false);\n            mCallbackText.setText(\"Disconnected.\");\n\n            // As part of the sample, tell the user what happened.\n            Toast.makeText(Binding.this, R.string.remote_service_disconnected,\n                    Toast.LENGTH_SHORT).show();\n        }\n    };\n\n    /**\n     * Class for interacting with the secondary interface of the service.\n     */\n    private ServiceConnection mSecondaryConnection = new ServiceConnection() {\n        public void onServiceConnected(ComponentName className,\n                IBinder service) {\n            // Connecting to a secondary interface is the same as any\n            // other interface.\n            mSecondaryService = ISecondary.Stub.asInterface(service);\n            mKillButton.setEnabled(true);\n        }\n\n        public void onServiceDisconnected(ComponentName className) {\n            mSecondaryService = null;\n            mKillButton.setEnabled(false);\n        }\n    };\n\n    private OnClickListener mBindListener = new OnClickListener() {\n        public void onClick(View v) {\n            // Establish a couple connections with the service, binding\n            // by interface names.  This allows other applications to be\n            // installed that replace the remote service by implementing\n            // the same interface.\n            Intent intent = new Intent(Binding.this, RemoteService.class);\n            intent.setAction(IRemoteService.class.getName());\n            bindService(intent, mConnection, Context.BIND_AUTO_CREATE);\n            intent.setAction(ISecondary.class.getName());\n            bindService(intent, mSecondaryConnection, Context.BIND_AUTO_CREATE);\n            mIsBound = true;\n            mCallbackText.setText(\"Binding.\");\n        }\n    };\n\n    private OnClickListener mUnbindListener = new OnClickListener() {\n        public void onClick(View v) {\n            if (mIsBound) {\n                // If we have received the service, and hence registered with\n                // it, then now is the time to unregister.\n                if (mService != null) {\n                    try {\n                        mService.unregisterCallback(mCallback);\n                    } catch (RemoteException e) {\n                        // There is nothing special we need to do if the service\n                        // has crashed.\n                    }\n                }\n\n                // Detach our existing connection.\n                unbindService(mConnection);\n                unbindService(mSecondaryConnection);\n                mKillButton.setEnabled(false);\n                mIsBound = false;\n                mCallbackText.setText(\"Unbinding.\");\n            }\n        }\n    };\n\n    private OnClickListener mKillListener = new OnClickListener() {\n        public void onClick(View v) {\n            // To kill the process hosting our service, we need to know its\n            // PID.  Conveniently our service has a call that will return\n            // to us that information.\n            if (mSecondaryService != null) {\n                try {\n                    int pid = mSecondaryService.getPid();\n                    // Note that, though this API allows us to request to\n                    // kill any process based on its PID, the kernel will\n                    // still impose standard restrictions on which PIDs you\n                    // are actually able to kill.  Typically this means only\n                    // the process running your application and any additional\n                    // processes created by that app as shown here; packages\n                    // sharing a common UID will also be able to kill each\n                    // other's processes.\n                    Process.killProcess(pid);\n                    mCallbackText.setText(\"Killed service process.\");\n                } catch (RemoteException ex) {\n                    // Recover gracefully from the process hosting the\n                    // server dying.\n                    // Just for purposes of the sample, put up a notification.\n                    Toast.makeText(Binding.this,\n                            R.string.remote_call_failed,\n                            Toast.LENGTH_SHORT).show();\n                }\n            }\n        }\n    };\n\n    // ----------------------------------------------------------------------\n    // Code showing how to deal with callbacks.\n    // ----------------------------------------------------------------------\n\n    /**\n     * This implementation is used to receive callbacks from the remote\n     * service.\n     */\n    private IRemoteServiceCallback mCallback = new IRemoteServiceCallback.Stub() {\n        /**\n         * This is called by the remote service regularly to tell us about\n         * new values.  Note that IPC calls are dispatched through a thread\n         * pool running in each process, so the code executing here will\n         * NOT be running in our main thread like most other things -- so,\n         * to update the UI, we need to use a Handler to hop over there.\n         */\n        public void valueChanged(int value) {\n            mHandler.sendMessage(mHandler.obtainMessage(BUMP_MSG, value, 0));\n        }\n    };\n\n    private static final int BUMP_MSG = 1;\n\n    private Handler mHandler = new Handler() {\n        @Override public void handleMessage(Message msg) {\n            switch (msg.what) {\n                case BUMP_MSG:\n                    mCallbackText.setText(\"Received from service: \" + msg.arg1);\n                    break;\n                default:\n                    super.handleMessage(msg);\n            }\n        }\n\n    };\n}\n```","source":"_posts/AIDL.md","raw":"title: 属性动画\ncategories:\n- Android\n- Android开发艺术探索笔记\ntags:\n- AIDL\n- IPC\n---\nAndroid Interface Definition Language (AIDL)， Android接口定义语言。系统中的进程之间不能共享内存，因此，需要提供一些机制在不同进程之间进行数据通信Interprocess communication (IPC)。AIDL就是解决这个问题的。\n<!-- more -->\n\n#介绍\nAndroid Interface Definition Language (AIDL)， Android接口定义语言。系统中的进程之间不能共享内存，因此，需要提供一些机制在不同进程之间进行数据通信Interprocess communication (IPC)。AIDL就是解决这个问题的。\n阅读本文需要了解Service的相关知识，关于Service的讲解请参考[http://blog.csdn.net/l664675249/article/details/48899323](http://blog.csdn.net/l664675249/article/details/48899323)\n\n#创建.aidl文件\naidl是用Java语法编写的，后缀为.aidl的文件。\n\n- 每一个aidl文件必须定义一个接口，在这个接口里声明方法\n- 在aidl里不能有static属性（field）\n- aidl支持基本的数据类型，当你需要使用额外的数据类型时需要把它们import进来，即使它们跟这个文件在同一个包中。\n\n\n##示例\n\n```java\n// IRemoteService.aidl\npackage com.example.android;\n\n// Declare any non-default types here with import statements\n\n/** Example service interface */\ninterface IRemoteService {\n    /** Request the process ID of this service, to do evil things with it. */\n    int getPid();\n\n    /** Demonstrates some basic types that you can use as parameters\n     * and return values in AIDL.\n     */\n    void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat,\n            double aDouble, String aString);\n}\n```\n\n把aidl文件存在src/目录下，当你build项目的时候，SDK工具会在gen/目录下生成一个与.aidl文件名字相同的.java文件。\n#实现接口\n生成的IRemoteService.java如下\n\n```java\npublic interface IRemoteService extends android.os.IInterface\n{\n/** Local-side IPC implementation stub class. */\npublic static abstract class Stub extends android.os.Binder implements com.spark.meizi.IRemoteService\n{\nprivate static final java.lang.String DESCRIPTOR = \"com.spark.meizi.IRemoteService\";\n/** Construct the stub at attach it to the interface. */\npublic Stub()\n{\nthis.attachInterface(this, DESCRIPTOR);\n}\n/**\n * Cast an IBinder object into an com.spark.meizi.IRemoteService interface,\n * generating a proxy if needed.\n */\npublic static com.spark.meizi.IRemoteService asInterface(android.os.IBinder obj)\n{\nif ((obj==null)) {\nreturn null;\n}\nandroid.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);\nif (((iin!=null)&&(iin instanceof com.spark.meizi.IRemoteService))) {\nreturn ((com.spark.meizi.IRemoteService)iin);\n}\nreturn new com.spark.meizi.IRemoteService.Stub.Proxy(obj);\n}\n@Override public android.os.IBinder asBinder()\n{\nreturn this;\n}\n@Override public boolean onTransact(int code, android.os.Parcel data, android.os.Parcel reply, int flags) throws android.os.RemoteException\n{\nswitch (code)\n{\ncase INTERFACE_TRANSACTION:\n{\nreply.writeString(DESCRIPTOR);\nreturn true;\n}\ncase TRANSACTION_basicTypes:\n{\ndata.enforceInterface(DESCRIPTOR);\nint _arg0;\n_arg0 = data.readInt();\nlong _arg1;\n_arg1 = data.readLong();\nboolean _arg2;\n_arg2 = (0!=data.readInt());\nfloat _arg3;\n_arg3 = data.readFloat();\ndouble _arg4;\n_arg4 = data.readDouble();\njava.lang.String _arg5;\n_arg5 = data.readString();\nthis.basicTypes(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5);\nreply.writeNoException();\nreturn true;\n}\n}\nreturn super.onTransact(code, data, reply, flags);\n}\nprivate static class Proxy implements com.spark.meizi.IRemoteService\n{\nprivate android.os.IBinder mRemote;\nProxy(android.os.IBinder remote)\n{\nmRemote = remote;\n}\n@Override public android.os.IBinder asBinder()\n{\nreturn mRemote;\n}\npublic java.lang.String getInterfaceDescriptor()\n{\nreturn DESCRIPTOR;\n}\n/**\n     * Demonstrates some basic types that you can use as parameters\n     * and return values in AIDL.\n     */\n@Override public void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat, double aDouble, java.lang.String aString) throws android.os.RemoteException\n{\nandroid.os.Parcel _data = android.os.Parcel.obtain();\nandroid.os.Parcel _reply = android.os.Parcel.obtain();\ntry {\n_data.writeInterfaceToken(DESCRIPTOR);\n_data.writeInt(anInt);\n_data.writeLong(aLong);\n_data.writeInt(((aBoolean)?(1):(0)));\n_data.writeFloat(aFloat);\n_data.writeDouble(aDouble);\n_data.writeString(aString);\nmRemote.transact(Stub.TRANSACTION_basicTypes, _data, _reply, 0);\n_reply.readException();\n}\nfinally {\n_reply.recycle();\n_data.recycle();\n}\n}\n}\nstatic final int TRANSACTION_basicTypes = (android.os.IBinder.FIRST_CALL_TRANSACTION + 0);\n}\n/**\n     * Demonstrates some basic types that you can use as parameters\n     * and return values in AIDL.\n     */\npublic void basicTypes(int anInt, long aLong, boolean aBoolean, float aFloat, double aDouble, java.lang.String aString) throws android.os.RemoteException;\n}\n```\n在这个文件中有一个**内部类Stub**，这是父接口的一个抽象实现，并声明了aidl中的所有方法。为了实现由aidl生成的接口，我们需要继承Stub并实现从aidl继承过来的方法。下面是一个使用匿名类的例子\n\n```java\nprivate final IRemoteService.Stub mBinder = new IRemoteService.Stub() {\n    public int getPid(){\n        return Process.myPid();\n    }\n    public void basicTypes(int anInt, long aLong, boolean aBoolean,\n        float aFloat, double aDouble, String aString) {\n        // Does nothing\n    }\n};\n```\n这样mBinder就是一个Stub的实例了，下一步就是如何在client端使用，与service端产生交互了。\n注：\n\n- 不能保证请求是在主线程被执行的，所以从构建到使用要考虑Service线程的安全性\n- 默认情况下，请求是同步的，所以尽量不要在主线程中发出请求\n- 所有的异常都不会返回给请求者（Caller）\n\n#在Client中使用接口\n当你已经实现你的Service之后，你需把它暴露在Client中使Client可以绑定它。继承Service并实现onBind()方法，来返回一个实现了Stub的实例。下面就是一个把IRemoteService暴露给Client的例子：\n\n```java\npublic class RemoteService extends Service {\n    @Override\n    public void onCreate() {\n        super.onCreate();\n    }\n\n    @Override\n    public IBinder onBind(Intent intent) {\n        // Return the interface\n        return mBinder;\n    }\n\n    private final IRemoteService.Stub mBinder = new IRemoteService.Stub() {\n        public int getPid(){\n            return Process.myPid();\n        }\n        public void basicTypes(int anInt, long aLong, boolean aBoolean,\n            float aFloat, double aDouble, String aString) {\n            // Does nothing\n        }\n    };\n}\n\n```\n现在client（比如是一个Activity）可以调用bindService()来连接这个Service，通过onServiceConnected()来接收Service中 onBind() 返回的mBinder，最后使用YourServiceInterface.Stub.asInterface(service)来把返回的mBinder转换成YourServiceInterface类型。例子如下：\n\n```java\nIRemoteService mIRemoteService;\nprivate ServiceConnection mConnection = new ServiceConnection() {\n    // Called when the connection with the service is established\n    public void onServiceConnected(ComponentName className, IBinder service) {\n        // Following the example above for an AIDL interface,\n        // this gets an instance of the IRemoteInterface, which we can use to call on the service\n        mIRemoteService = IRemoteService.Stub.asInterface(service);\n    }\n\n    // Called when the connection with the service disconnects unexpectedly\n    public void onServiceDisconnected(ComponentName className) {\n        Log.e(TAG, \"Service has unexpectedly disconnected\");\n        mIRemoteService = null;\n    }\n};\n```\n注：\n如果Service和Client在两个不同的Application中，Client的Application的src/目录下必须也有对应的.aidl文件。\n#一个Client的例子\n```java\npublic static class Binding extends Activity {\n    /** The primary interface we will be calling on the service. */\n    IRemoteService mService = null;\n    /** Another interface we use on the service. */\n    ISecondary mSecondaryService = null;\n\n    Button mKillButton;\n    TextView mCallbackText;\n\n    private boolean mIsBound;\n\n    /**\n     * Standard initialization of this activity.  Set up the UI, then wait\n     * for the user to poke it before doing anything.\n     */\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        setContentView(R.layout.remote_service_binding);\n\n        // Watch for button clicks.\n        Button button = (Button)findViewById(R.id.bind);\n        button.setOnClickListener(mBindListener);\n        button = (Button)findViewById(R.id.unbind);\n        button.setOnClickListener(mUnbindListener);\n        mKillButton = (Button)findViewById(R.id.kill);\n        mKillButton.setOnClickListener(mKillListener);\n        mKillButton.setEnabled(false);\n\n        mCallbackText = (TextView)findViewById(R.id.callback);\n        mCallbackText.setText(\"Not attached.\");\n    }\n\n    /**\n     * Class for interacting with the main interface of the service.\n     */\n    private ServiceConnection mConnection = new ServiceConnection() {\n        public void onServiceConnected(ComponentName className,\n                IBinder service) {\n            // This is called when the connection with the service has been\n            // established, giving us the service object we can use to\n            // interact with the service.  We are communicating with our\n            // service through an IDL interface, so get a client-side\n            // representation of that from the raw service object.\n            mService = IRemoteService.Stub.asInterface(service);\n            mKillButton.setEnabled(true);\n            mCallbackText.setText(\"Attached.\");\n\n            // We want to monitor the service for as long as we are\n            // connected to it.\n            try {\n                mService.registerCallback(mCallback);\n            } catch (RemoteException e) {\n                // In this case the service has crashed before we could even\n                // do anything with it; we can count on soon being\n                // disconnected (and then reconnected if it can be restarted)\n                // so there is no need to do anything here.\n            }\n\n            // As part of the sample, tell the user what happened.\n            Toast.makeText(Binding.this, R.string.remote_service_connected,\n                    Toast.LENGTH_SHORT).show();\n        }\n\n        public void onServiceDisconnected(ComponentName className) {\n            // This is called when the connection with the service has been\n            // unexpectedly disconnected -- that is, its process crashed.\n            mService = null;\n            mKillButton.setEnabled(false);\n            mCallbackText.setText(\"Disconnected.\");\n\n            // As part of the sample, tell the user what happened.\n            Toast.makeText(Binding.this, R.string.remote_service_disconnected,\n                    Toast.LENGTH_SHORT).show();\n        }\n    };\n\n    /**\n     * Class for interacting with the secondary interface of the service.\n     */\n    private ServiceConnection mSecondaryConnection = new ServiceConnection() {\n        public void onServiceConnected(ComponentName className,\n                IBinder service) {\n            // Connecting to a secondary interface is the same as any\n            // other interface.\n            mSecondaryService = ISecondary.Stub.asInterface(service);\n            mKillButton.setEnabled(true);\n        }\n\n        public void onServiceDisconnected(ComponentName className) {\n            mSecondaryService = null;\n            mKillButton.setEnabled(false);\n        }\n    };\n\n    private OnClickListener mBindListener = new OnClickListener() {\n        public void onClick(View v) {\n            // Establish a couple connections with the service, binding\n            // by interface names.  This allows other applications to be\n            // installed that replace the remote service by implementing\n            // the same interface.\n            Intent intent = new Intent(Binding.this, RemoteService.class);\n            intent.setAction(IRemoteService.class.getName());\n            bindService(intent, mConnection, Context.BIND_AUTO_CREATE);\n            intent.setAction(ISecondary.class.getName());\n            bindService(intent, mSecondaryConnection, Context.BIND_AUTO_CREATE);\n            mIsBound = true;\n            mCallbackText.setText(\"Binding.\");\n        }\n    };\n\n    private OnClickListener mUnbindListener = new OnClickListener() {\n        public void onClick(View v) {\n            if (mIsBound) {\n                // If we have received the service, and hence registered with\n                // it, then now is the time to unregister.\n                if (mService != null) {\n                    try {\n                        mService.unregisterCallback(mCallback);\n                    } catch (RemoteException e) {\n                        // There is nothing special we need to do if the service\n                        // has crashed.\n                    }\n                }\n\n                // Detach our existing connection.\n                unbindService(mConnection);\n                unbindService(mSecondaryConnection);\n                mKillButton.setEnabled(false);\n                mIsBound = false;\n                mCallbackText.setText(\"Unbinding.\");\n            }\n        }\n    };\n\n    private OnClickListener mKillListener = new OnClickListener() {\n        public void onClick(View v) {\n            // To kill the process hosting our service, we need to know its\n            // PID.  Conveniently our service has a call that will return\n            // to us that information.\n            if (mSecondaryService != null) {\n                try {\n                    int pid = mSecondaryService.getPid();\n                    // Note that, though this API allows us to request to\n                    // kill any process based on its PID, the kernel will\n                    // still impose standard restrictions on which PIDs you\n                    // are actually able to kill.  Typically this means only\n                    // the process running your application and any additional\n                    // processes created by that app as shown here; packages\n                    // sharing a common UID will also be able to kill each\n                    // other's processes.\n                    Process.killProcess(pid);\n                    mCallbackText.setText(\"Killed service process.\");\n                } catch (RemoteException ex) {\n                    // Recover gracefully from the process hosting the\n                    // server dying.\n                    // Just for purposes of the sample, put up a notification.\n                    Toast.makeText(Binding.this,\n                            R.string.remote_call_failed,\n                            Toast.LENGTH_SHORT).show();\n                }\n            }\n        }\n    };\n\n    // ----------------------------------------------------------------------\n    // Code showing how to deal with callbacks.\n    // ----------------------------------------------------------------------\n\n    /**\n     * This implementation is used to receive callbacks from the remote\n     * service.\n     */\n    private IRemoteServiceCallback mCallback = new IRemoteServiceCallback.Stub() {\n        /**\n         * This is called by the remote service regularly to tell us about\n         * new values.  Note that IPC calls are dispatched through a thread\n         * pool running in each process, so the code executing here will\n         * NOT be running in our main thread like most other things -- so,\n         * to update the UI, we need to use a Handler to hop over there.\n         */\n        public void valueChanged(int value) {\n            mHandler.sendMessage(mHandler.obtainMessage(BUMP_MSG, value, 0));\n        }\n    };\n\n    private static final int BUMP_MSG = 1;\n\n    private Handler mHandler = new Handler() {\n        @Override public void handleMessage(Message msg) {\n            switch (msg.what) {\n                case BUMP_MSG:\n                    mCallbackText.setText(\"Received from service: \" + msg.arg1);\n                    break;\n                default:\n                    super.handleMessage(msg);\n            }\n        }\n\n    };\n}\n```","slug":"AIDL","published":1,"date":"2016-03-12T05:28:32.363Z","updated":"2016-03-12T05:28:32.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilop1pue0005qcmy5u88picm","content":"<p>Android Interface Definition Language (AIDL)， Android接口定义语言。系统中的进程之间不能共享内存，因此，需要提供一些机制在不同进程之间进行数据通信Interprocess communication (IPC)。AIDL就是解决这个问题的。<br><a id=\"more\"></a></p>\n<p>#介绍<br>Android Interface Definition Language (AIDL)， Android接口定义语言。系统中的进程之间不能共享内存，因此，需要提供一些机制在不同进程之间进行数据通信Interprocess communication (IPC)。AIDL就是解决这个问题的。<br>阅读本文需要了解Service的相关知识，关于Service的讲解请参考<a href=\"http://blog.csdn.net/l664675249/article/details/48899323\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/l664675249/article/details/48899323</a></p>\n<p>#创建.aidl文件<br>aidl是用Java语法编写的，后缀为.aidl的文件。</p>\n<ul>\n<li>每一个aidl文件必须定义一个接口，在这个接口里声明方法</li>\n<li>在aidl里不能有static属性（field）</li>\n<li>aidl支持基本的数据类型，当你需要使用额外的数据类型时需要把它们import进来，即使它们跟这个文件在同一个包中。</li>\n</ul>\n<p>##示例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// IRemoteService.aidl</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.example.android;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Declare any non-default types here with import statements</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** Example service interface */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IRemoteService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** Request the process ID of this service, to do evil things with it. */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getPid</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Demonstrates some basic types that you can use as parameters</span><br><span class=\"line\">     * and return values in AIDL.</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">basicTypes</span><span class=\"params\">(<span class=\"keyword\">int</span> anInt, <span class=\"keyword\">long</span> aLong, <span class=\"keyword\">boolean</span> aBoolean, <span class=\"keyword\">float</span> aFloat,</span><br><span class=\"line\">            <span class=\"keyword\">double</span> aDouble, String aString)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>把aidl文件存在src/目录下，当你build项目的时候，SDK工具会在gen/目录下生成一个与.aidl文件名字相同的.java文件。</p>\n<p>#实现接口<br>生成的IRemoteService.java如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IRemoteService</span> <span class=\"keyword\">extends</span> <span class=\"title\">android</span>.<span class=\"title\">os</span>.<span class=\"title\">IInterface</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\"><span class=\"comment\">/** Local-side IPC implementation stub class. */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stub</span> <span class=\"keyword\">extends</span> <span class=\"title\">android</span>.<span class=\"title\">os</span>.<span class=\"title\">Binder</span> <span class=\"keyword\">implements</span> <span class=\"title\">com</span>.<span class=\"title\">spark</span>.<span class=\"title\">meizi</span>.<span class=\"title\">IRemoteService</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> java.lang.String DESCRIPTOR = <span class=\"string\">\"com.spark.meizi.IRemoteService\"</span>;</span><br><span class=\"line\"><span class=\"comment\">/** Construct the stub at attach it to the interface. */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Stub</span><span class=\"params\">()</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">this</span>.attachInterface(<span class=\"keyword\">this</span>, DESCRIPTOR);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * Cast an IBinder object into an com.spark.meizi.IRemoteService interface,</span><br><span class=\"line\"> * generating a proxy if needed.</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> com.spark.meizi.<span class=\"function\">IRemoteService <span class=\"title\">asInterface</span><span class=\"params\">(android.os.IBinder obj)</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ((obj==<span class=\"keyword\">null</span>)) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (((iin!=<span class=\"keyword\">null</span>)&amp;&amp;(iin <span class=\"keyword\">instanceof</span> com.spark.meizi.IRemoteService))) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> ((com.spark.meizi.IRemoteService)iin);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> com.spark.meizi.IRemoteService.Stub.Proxy(obj);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Override</span> <span class=\"keyword\">public</span> android.os.<span class=\"function\">IBinder <span class=\"title\">asBinder</span><span class=\"params\">()</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTransact</span><span class=\"params\">(<span class=\"keyword\">int</span> code, android.os.Parcel data, android.os.Parcel reply, <span class=\"keyword\">int</span> flags)</span> <span class=\"keyword\">throws</span> android.os.RemoteException</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (code)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> INTERFACE_TRANSACTION:</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">reply.writeString(DESCRIPTOR);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">case</span> TRANSACTION_basicTypes:</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">data.enforceInterface(DESCRIPTOR);</span><br><span class=\"line\"><span class=\"keyword\">int</span> _arg0;</span><br><span class=\"line\">_arg0 = data.readInt();</span><br><span class=\"line\"><span class=\"keyword\">long</span> _arg1;</span><br><span class=\"line\">_arg1 = data.readLong();</span><br><span class=\"line\"><span class=\"keyword\">boolean</span> _arg2;</span><br><span class=\"line\">_arg2 = (<span class=\"number\">0</span>!=data.readInt());</span><br><span class=\"line\"><span class=\"keyword\">float</span> _arg3;</span><br><span class=\"line\">_arg3 = data.readFloat();</span><br><span class=\"line\"><span class=\"keyword\">double</span> _arg4;</span><br><span class=\"line\">_arg4 = data.readDouble();</span><br><span class=\"line\">java.lang.String _arg5;</span><br><span class=\"line\">_arg5 = data.readString();</span><br><span class=\"line\"><span class=\"keyword\">this</span>.basicTypes(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5);</span><br><span class=\"line\">reply.writeNoException();</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onTransact(code, data, reply, flags);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">com</span>.<span class=\"title\">spark</span>.<span class=\"title\">meizi</span>.<span class=\"title\">IRemoteService</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span> android.os.IBinder mRemote;</span><br><span class=\"line\">Proxy(android.os.IBinder remote)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">mRemote = remote;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Override</span> <span class=\"keyword\">public</span> android.os.<span class=\"function\">IBinder <span class=\"title\">asBinder</span><span class=\"params\">()</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> mRemote;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> java.lang.<span class=\"function\">String <span class=\"title\">getInterfaceDescriptor</span><span class=\"params\">()</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> DESCRIPTOR;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\">     * Demonstrates some basic types that you can use as parameters</span><br><span class=\"line\">     * and return values in AIDL.</span><br><span class=\"line\">     */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">basicTypes</span><span class=\"params\">(<span class=\"keyword\">int</span> anInt, <span class=\"keyword\">long</span> aLong, <span class=\"keyword\">boolean</span> aBoolean, <span class=\"keyword\">float</span> aFloat, <span class=\"keyword\">double</span> aDouble, java.lang.String aString)</span> <span class=\"keyword\">throws</span> android.os.RemoteException</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">android.os.Parcel _data = android.os.Parcel.obtain();</span><br><span class=\"line\">android.os.Parcel _reply = android.os.Parcel.obtain();</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">_data.writeInterfaceToken(DESCRIPTOR);</span><br><span class=\"line\">_data.writeInt(anInt);</span><br><span class=\"line\">_data.writeLong(aLong);</span><br><span class=\"line\">_data.writeInt(((aBoolean)?(<span class=\"number\">1</span>):(<span class=\"number\">0</span>)));</span><br><span class=\"line\">_data.writeFloat(aFloat);</span><br><span class=\"line\">_data.writeDouble(aDouble);</span><br><span class=\"line\">_data.writeString(aString);</span><br><span class=\"line\">mRemote.transact(Stub.TRANSACTION_basicTypes, _data, _reply, <span class=\"number\">0</span>);</span><br><span class=\"line\">_reply.readException();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">_reply.recycle();</span><br><span class=\"line\">_data.recycle();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TRANSACTION_basicTypes = (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\">     * Demonstrates some basic types that you can use as parameters</span><br><span class=\"line\">     * and return values in AIDL.</span><br><span class=\"line\">     */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">basicTypes</span><span class=\"params\">(<span class=\"keyword\">int</span> anInt, <span class=\"keyword\">long</span> aLong, <span class=\"keyword\">boolean</span> aBoolean, <span class=\"keyword\">float</span> aFloat, <span class=\"keyword\">double</span> aDouble, java.lang.String aString)</span> <span class=\"keyword\">throws</span> android.os.RemoteException</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这个文件中有一个<strong>内部类Stub</strong>，这是父接口的一个抽象实现，并声明了aidl中的所有方法。为了实现由aidl生成的接口，我们需要继承Stub并实现从aidl继承过来的方法。下面是一个使用匿名类的例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> IRemoteService.Stub mBinder = <span class=\"keyword\">new</span> IRemoteService.Stub() &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getPid</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Process.myPid();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">basicTypes</span><span class=\"params\">(<span class=\"keyword\">int</span> anInt, <span class=\"keyword\">long</span> aLong, <span class=\"keyword\">boolean</span> aBoolean,</span><br><span class=\"line\">        <span class=\"keyword\">float</span> aFloat, <span class=\"keyword\">double</span> aDouble, String aString)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Does nothing</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这样mBinder就是一个Stub的实例了，下一步就是如何在client端使用，与service端产生交互了。<br>注：</p>\n<ul>\n<li>不能保证请求是在主线程被执行的，所以从构建到使用要考虑Service线程的安全性</li>\n<li>默认情况下，请求是同步的，所以尽量不要在主线程中发出请求</li>\n<li>所有的异常都不会返回给请求者（Caller）</li>\n</ul>\n<p>#在Client中使用接口<br>当你已经实现你的Service之后，你需把它暴露在Client中使Client可以绑定它。继承Service并实现onBind()方法，来返回一个实现了Stub的实例。下面就是一个把IRemoteService暴露给Client的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RemoteService</span> <span class=\"keyword\">extends</span> <span class=\"title\">Service</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">onBind</span><span class=\"params\">(Intent intent)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Return the interface</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> mBinder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> IRemoteService.Stub mBinder = <span class=\"keyword\">new</span> IRemoteService.Stub() &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getPid</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Process.myPid();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">basicTypes</span><span class=\"params\">(<span class=\"keyword\">int</span> anInt, <span class=\"keyword\">long</span> aLong, <span class=\"keyword\">boolean</span> aBoolean,</span><br><span class=\"line\">            <span class=\"keyword\">float</span> aFloat, <span class=\"keyword\">double</span> aDouble, String aString)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// Does nothing</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在client（比如是一个Activity）可以调用bindService()来连接这个Service，通过onServiceConnected()来接收Service中 onBind() 返回的mBinder，最后使用YourServiceInterface.Stub.asInterface(service)来把返回的mBinder转换成YourServiceInterface类型。例子如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IRemoteService mIRemoteService;</span><br><span class=\"line\"><span class=\"keyword\">private</span> ServiceConnection mConnection = <span class=\"keyword\">new</span> ServiceConnection() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Called when the connection with the service is established</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">(ComponentName className, IBinder service)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Following the example above for an AIDL interface,</span></span><br><span class=\"line\">        <span class=\"comment\">// this gets an instance of the IRemoteInterface, which we can use to call on the service</span></span><br><span class=\"line\">        mIRemoteService = IRemoteService.Stub.asInterface(service);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Called when the connection with the service disconnects unexpectedly</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceDisconnected</span><span class=\"params\">(ComponentName className)</span> </span>&#123;</span><br><span class=\"line\">        Log.e(TAG, <span class=\"string\">\"Service has unexpectedly disconnected\"</span>);</span><br><span class=\"line\">        mIRemoteService = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>注：<br>如果Service和Client在两个不同的Application中，Client的Application的src/目录下必须也有对应的.aidl文件。</p>\n<p>#一个Client的例子<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Binding</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** The primary interface we will be calling on the service. */</span></span><br><span class=\"line\">    IRemoteService mService = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">/** Another interface we use on the service. */</span></span><br><span class=\"line\">    ISecondary mSecondaryService = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Button mKillButton;</span><br><span class=\"line\">    TextView mCallbackText;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> mIsBound;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span><br><span class=\"line\">     * Standard initialization of this activity.  Set up the UI, then wait</span><br><span class=\"line\">     * for the user to poke it before doing anything.</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">        setContentView(R.layout.remote_service_binding);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Watch for button clicks.</span></span><br><span class=\"line\">        Button button = (Button)findViewById(R.id.bind);</span><br><span class=\"line\">        button.setOnClickListener(mBindListener);</span><br><span class=\"line\">        button = (Button)findViewById(R.id.unbind);</span><br><span class=\"line\">        button.setOnClickListener(mUnbindListener);</span><br><span class=\"line\">        mKillButton = (Button)findViewById(R.id.kill);</span><br><span class=\"line\">        mKillButton.setOnClickListener(mKillListener);</span><br><span class=\"line\">        mKillButton.setEnabled(<span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        mCallbackText = (TextView)findViewById(R.id.callback);</span><br><span class=\"line\">        mCallbackText.setText(<span class=\"string\">\"Not attached.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span><br><span class=\"line\">     * Class for interacting with the main interface of the service.</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ServiceConnection mConnection = <span class=\"keyword\">new</span> ServiceConnection() &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">(ComponentName className,</span><br><span class=\"line\">                IBinder service)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// This is called when the connection with the service has been</span></span><br><span class=\"line\">            <span class=\"comment\">// established, giving us the service object we can use to</span></span><br><span class=\"line\">            <span class=\"comment\">// interact with the service.  We are communicating with our</span></span><br><span class=\"line\">            <span class=\"comment\">// service through an IDL interface, so get a client-side</span></span><br><span class=\"line\">            <span class=\"comment\">// representation of that from the raw service object.</span></span><br><span class=\"line\">            mService = IRemoteService.Stub.asInterface(service);</span><br><span class=\"line\">            mKillButton.setEnabled(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            mCallbackText.setText(<span class=\"string\">\"Attached.\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// We want to monitor the service for as long as we are</span></span><br><span class=\"line\">            <span class=\"comment\">// connected to it.</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                mService.registerCallback(mCallback);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// In this case the service has crashed before we could even</span></span><br><span class=\"line\">                <span class=\"comment\">// do anything with it; we can count on soon being</span></span><br><span class=\"line\">                <span class=\"comment\">// disconnected (and then reconnected if it can be restarted)</span></span><br><span class=\"line\">                <span class=\"comment\">// so there is no need to do anything here.</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// As part of the sample, tell the user what happened.</span></span><br><span class=\"line\">            Toast.makeText(Binding.<span class=\"keyword\">this</span>, R.string.remote_service_connected,</span><br><span class=\"line\">                    Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceDisconnected</span><span class=\"params\">(ComponentName className)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// This is called when the connection with the service has been</span></span><br><span class=\"line\">            <span class=\"comment\">// unexpectedly disconnected -- that is, its process crashed.</span></span><br><span class=\"line\">            mService = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            mKillButton.setEnabled(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            mCallbackText.setText(<span class=\"string\">\"Disconnected.\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// As part of the sample, tell the user what happened.</span></span><br><span class=\"line\">            Toast.makeText(Binding.<span class=\"keyword\">this</span>, R.string.remote_service_disconnected,</span><br><span class=\"line\">                    Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span><br><span class=\"line\">     * Class for interacting with the secondary interface of the service.</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ServiceConnection mSecondaryConnection = <span class=\"keyword\">new</span> ServiceConnection() &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">(ComponentName className,</span><br><span class=\"line\">                IBinder service)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// Connecting to a secondary interface is the same as any</span></span><br><span class=\"line\">            <span class=\"comment\">// other interface.</span></span><br><span class=\"line\">            mSecondaryService = ISecondary.Stub.asInterface(service);</span><br><span class=\"line\">            mKillButton.setEnabled(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceDisconnected</span><span class=\"params\">(ComponentName className)</span> </span>&#123;</span><br><span class=\"line\">            mSecondaryService = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            mKillButton.setEnabled(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> OnClickListener mBindListener = <span class=\"keyword\">new</span> OnClickListener() &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// Establish a couple connections with the service, binding</span></span><br><span class=\"line\">            <span class=\"comment\">// by interface names.  This allows other applications to be</span></span><br><span class=\"line\">            <span class=\"comment\">// installed that replace the remote service by implementing</span></span><br><span class=\"line\">            <span class=\"comment\">// the same interface.</span></span><br><span class=\"line\">            Intent intent = <span class=\"keyword\">new</span> Intent(Binding.<span class=\"keyword\">this</span>, RemoteService.class);</span><br><span class=\"line\">            intent.setAction(IRemoteService.class.getName());</span><br><span class=\"line\">            bindService(intent, mConnection, Context.BIND_AUTO_CREATE);</span><br><span class=\"line\">            intent.setAction(ISecondary.class.getName());</span><br><span class=\"line\">            bindService(intent, mSecondaryConnection, Context.BIND_AUTO_CREATE);</span><br><span class=\"line\">            mIsBound = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            mCallbackText.setText(<span class=\"string\">\"Binding.\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> OnClickListener mUnbindListener = <span class=\"keyword\">new</span> OnClickListener() &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mIsBound) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// If we have received the service, and hence registered with</span></span><br><span class=\"line\">                <span class=\"comment\">// it, then now is the time to unregister.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (mService != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        mService.unregisterCallback(mCallback);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// There is nothing special we need to do if the service</span></span><br><span class=\"line\">                        <span class=\"comment\">// has crashed.</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// Detach our existing connection.</span></span><br><span class=\"line\">                unbindService(mConnection);</span><br><span class=\"line\">                unbindService(mSecondaryConnection);</span><br><span class=\"line\">                mKillButton.setEnabled(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">                mIsBound = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                mCallbackText.setText(<span class=\"string\">\"Unbinding.\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> OnClickListener mKillListener = <span class=\"keyword\">new</span> OnClickListener() &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// To kill the process hosting our service, we need to know its</span></span><br><span class=\"line\">            <span class=\"comment\">// PID.  Conveniently our service has a call that will return</span></span><br><span class=\"line\">            <span class=\"comment\">// to us that information.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mSecondaryService != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> pid = mSecondaryService.getPid();</span><br><span class=\"line\">                    <span class=\"comment\">// Note that, though this API allows us to request to</span></span><br><span class=\"line\">                    <span class=\"comment\">// kill any process based on its PID, the kernel will</span></span><br><span class=\"line\">                    <span class=\"comment\">// still impose standard restrictions on which PIDs you</span></span><br><span class=\"line\">                    <span class=\"comment\">// are actually able to kill.  Typically this means only</span></span><br><span class=\"line\">                    <span class=\"comment\">// the process running your application and any additional</span></span><br><span class=\"line\">                    <span class=\"comment\">// processes created by that app as shown here; packages</span></span><br><span class=\"line\">                    <span class=\"comment\">// sharing a common UID will also be able to kill each</span></span><br><span class=\"line\">                    <span class=\"comment\">// other's processes.</span></span><br><span class=\"line\">                    Process.killProcess(pid);</span><br><span class=\"line\">                    mCallbackText.setText(<span class=\"string\">\"Killed service process.\"</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (RemoteException ex) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Recover gracefully from the process hosting the</span></span><br><span class=\"line\">                    <span class=\"comment\">// server dying.</span></span><br><span class=\"line\">                    <span class=\"comment\">// Just for purposes of the sample, put up a notification.</span></span><br><span class=\"line\">                    Toast.makeText(Binding.<span class=\"keyword\">this</span>,</span><br><span class=\"line\">                            R.string.remote_call_failed,</span><br><span class=\"line\">                            Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ----------------------------------------------------------------------</span></span><br><span class=\"line\">    <span class=\"comment\">// Code showing how to deal with callbacks.</span></span><br><span class=\"line\">    <span class=\"comment\">// ----------------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span><br><span class=\"line\">     * This implementation is used to receive callbacks from the remote</span><br><span class=\"line\">     * service.</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IRemoteServiceCallback mCallback = <span class=\"keyword\">new</span> IRemoteServiceCallback.Stub() &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span><br><span class=\"line\">         * This is called by the remote service regularly to tell us about</span><br><span class=\"line\">         * new values.  Note that IPC calls are dispatched through a thread</span><br><span class=\"line\">         * pool running in each process, so the code executing here will</span><br><span class=\"line\">         * NOT be running in our main thread like most other things -- so,</span><br><span class=\"line\">         * to update the UI, we need to use a Handler to hop over there.</span><br><span class=\"line\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">valueChanged</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">            mHandler.sendMessage(mHandler.obtainMessage(BUMP_MSG, value, <span class=\"number\">0</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> BUMP_MSG = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Handler mHandler = <span class=\"keyword\">new</span> Handler() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (msg.what) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> BUMP_MSG:</span><br><span class=\"line\">                    mCallbackText.setText(<span class=\"string\">\"Received from service: \"</span> + msg.arg1);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">super</span>.handleMessage(msg);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","excerpt":"<p>Android Interface Definition Language (AIDL)， Android接口定义语言。系统中的进程之间不能共享内存，因此，需要提供一些机制在不同进程之间进行数据通信Interprocess communication (IPC)。AIDL就是解决这个问题的。<br>","more":"</p>\n<p>#介绍<br>Android Interface Definition Language (AIDL)， Android接口定义语言。系统中的进程之间不能共享内存，因此，需要提供一些机制在不同进程之间进行数据通信Interprocess communication (IPC)。AIDL就是解决这个问题的。<br>阅读本文需要了解Service的相关知识，关于Service的讲解请参考<a href=\"http://blog.csdn.net/l664675249/article/details/48899323\">http://blog.csdn.net/l664675249/article/details/48899323</a></p>\n<p>#创建.aidl文件<br>aidl是用Java语法编写的，后缀为.aidl的文件。</p>\n<ul>\n<li>每一个aidl文件必须定义一个接口，在这个接口里声明方法</li>\n<li>在aidl里不能有static属性（field）</li>\n<li>aidl支持基本的数据类型，当你需要使用额外的数据类型时需要把它们import进来，即使它们跟这个文件在同一个包中。</li>\n</ul>\n<p>##示例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// IRemoteService.aidl</span></span><br><span class=\"line\"><span class=\"keyword\">package</span> com.example.android;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Declare any non-default types here with import statements</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** Example service interface */</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IRemoteService</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** Request the process ID of this service, to do evil things with it. */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">getPid</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Demonstrates some basic types that you can use as parameters</span><br><span class=\"line\">     * and return values in AIDL.</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">basicTypes</span><span class=\"params\">(<span class=\"keyword\">int</span> anInt, <span class=\"keyword\">long</span> aLong, <span class=\"keyword\">boolean</span> aBoolean, <span class=\"keyword\">float</span> aFloat,</span><br><span class=\"line\">            <span class=\"keyword\">double</span> aDouble, String aString)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>把aidl文件存在src/目录下，当你build项目的时候，SDK工具会在gen/目录下生成一个与.aidl文件名字相同的.java文件。</p>\n<p>#实现接口<br>生成的IRemoteService.java如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">IRemoteService</span> <span class=\"keyword\">extends</span> <span class=\"title\">android</span>.<span class=\"title\">os</span>.<span class=\"title\">IInterface</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\"><span class=\"comment\">/** Local-side IPC implementation stub class. */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Stub</span> <span class=\"keyword\">extends</span> <span class=\"title\">android</span>.<span class=\"title\">os</span>.<span class=\"title\">Binder</span> <span class=\"keyword\">implements</span> <span class=\"title\">com</span>.<span class=\"title\">spark</span>.<span class=\"title\">meizi</span>.<span class=\"title\">IRemoteService</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> java.lang.String DESCRIPTOR = <span class=\"string\">\"com.spark.meizi.IRemoteService\"</span>;</span><br><span class=\"line\"><span class=\"comment\">/** Construct the stub at attach it to the interface. */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Stub</span><span class=\"params\">()</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">this</span>.attachInterface(<span class=\"keyword\">this</span>, DESCRIPTOR);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * Cast an IBinder object into an com.spark.meizi.IRemoteService interface,</span><br><span class=\"line\"> * generating a proxy if needed.</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> com.spark.meizi.<span class=\"function\">IRemoteService <span class=\"title\">asInterface</span><span class=\"params\">(android.os.IBinder obj)</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">if</span> ((obj==<span class=\"keyword\">null</span>)) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">android.os.IInterface iin = obj.queryLocalInterface(DESCRIPTOR);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (((iin!=<span class=\"keyword\">null</span>)&amp;&amp;(iin <span class=\"keyword\">instanceof</span> com.spark.meizi.IRemoteService))) &#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> ((com.spark.meizi.IRemoteService)iin);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">new</span> com.spark.meizi.IRemoteService.Stub.Proxy(obj);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Override</span> <span class=\"keyword\">public</span> android.os.<span class=\"function\">IBinder <span class=\"title\">asBinder</span><span class=\"params\">()</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTransact</span><span class=\"params\">(<span class=\"keyword\">int</span> code, android.os.Parcel data, android.os.Parcel reply, <span class=\"keyword\">int</span> flags)</span> <span class=\"keyword\">throws</span> android.os.RemoteException</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (code)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> INTERFACE_TRANSACTION:</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">reply.writeString(DESCRIPTOR);</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">case</span> TRANSACTION_basicTypes:</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">data.enforceInterface(DESCRIPTOR);</span><br><span class=\"line\"><span class=\"keyword\">int</span> _arg0;</span><br><span class=\"line\">_arg0 = data.readInt();</span><br><span class=\"line\"><span class=\"keyword\">long</span> _arg1;</span><br><span class=\"line\">_arg1 = data.readLong();</span><br><span class=\"line\"><span class=\"keyword\">boolean</span> _arg2;</span><br><span class=\"line\">_arg2 = (<span class=\"number\">0</span>!=data.readInt());</span><br><span class=\"line\"><span class=\"keyword\">float</span> _arg3;</span><br><span class=\"line\">_arg3 = data.readFloat();</span><br><span class=\"line\"><span class=\"keyword\">double</span> _arg4;</span><br><span class=\"line\">_arg4 = data.readDouble();</span><br><span class=\"line\">java.lang.String _arg5;</span><br><span class=\"line\">_arg5 = data.readString();</span><br><span class=\"line\"><span class=\"keyword\">this</span>.basicTypes(_arg0, _arg1, _arg2, _arg3, _arg4, _arg5);</span><br><span class=\"line\">reply.writeNoException();</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onTransact(code, data, reply, flags);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Proxy</span> <span class=\"keyword\">implements</span> <span class=\"title\">com</span>.<span class=\"title\">spark</span>.<span class=\"title\">meizi</span>.<span class=\"title\">IRemoteService</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">private</span> android.os.IBinder mRemote;</span><br><span class=\"line\">Proxy(android.os.IBinder remote)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">mRemote = remote;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Override</span> <span class=\"keyword\">public</span> android.os.<span class=\"function\">IBinder <span class=\"title\">asBinder</span><span class=\"params\">()</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> mRemote;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> java.lang.<span class=\"function\">String <span class=\"title\">getInterfaceDescriptor</span><span class=\"params\">()</span></span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\"><span class=\"keyword\">return</span> DESCRIPTOR;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\">     * Demonstrates some basic types that you can use as parameters</span><br><span class=\"line\">     * and return values in AIDL.</span><br><span class=\"line\">     */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">basicTypes</span><span class=\"params\">(<span class=\"keyword\">int</span> anInt, <span class=\"keyword\">long</span> aLong, <span class=\"keyword\">boolean</span> aBoolean, <span class=\"keyword\">float</span> aFloat, <span class=\"keyword\">double</span> aDouble, java.lang.String aString)</span> <span class=\"keyword\">throws</span> android.os.RemoteException</span><br><span class=\"line\"></span>&#123;</span><br><span class=\"line\">android.os.Parcel _data = android.os.Parcel.obtain();</span><br><span class=\"line\">android.os.Parcel _reply = android.os.Parcel.obtain();</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">_data.writeInterfaceToken(DESCRIPTOR);</span><br><span class=\"line\">_data.writeInt(anInt);</span><br><span class=\"line\">_data.writeLong(aLong);</span><br><span class=\"line\">_data.writeInt(((aBoolean)?(<span class=\"number\">1</span>):(<span class=\"number\">0</span>)));</span><br><span class=\"line\">_data.writeFloat(aFloat);</span><br><span class=\"line\">_data.writeDouble(aDouble);</span><br><span class=\"line\">_data.writeString(aString);</span><br><span class=\"line\">mRemote.transact(Stub.TRANSACTION_basicTypes, _data, _reply, <span class=\"number\">0</span>);</span><br><span class=\"line\">_reply.readException();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">_reply.recycle();</span><br><span class=\"line\">_data.recycle();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> TRANSACTION_basicTypes = (android.os.IBinder.FIRST_CALL_TRANSACTION + <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\">     * Demonstrates some basic types that you can use as parameters</span><br><span class=\"line\">     * and return values in AIDL.</span><br><span class=\"line\">     */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">basicTypes</span><span class=\"params\">(<span class=\"keyword\">int</span> anInt, <span class=\"keyword\">long</span> aLong, <span class=\"keyword\">boolean</span> aBoolean, <span class=\"keyword\">float</span> aFloat, <span class=\"keyword\">double</span> aDouble, java.lang.String aString)</span> <span class=\"keyword\">throws</span> android.os.RemoteException</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在这个文件中有一个<strong>内部类Stub</strong>，这是父接口的一个抽象实现，并声明了aidl中的所有方法。为了实现由aidl生成的接口，我们需要继承Stub并实现从aidl继承过来的方法。下面是一个使用匿名类的例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> IRemoteService.Stub mBinder = <span class=\"keyword\">new</span> IRemoteService.Stub() &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getPid</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Process.myPid();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">basicTypes</span><span class=\"params\">(<span class=\"keyword\">int</span> anInt, <span class=\"keyword\">long</span> aLong, <span class=\"keyword\">boolean</span> aBoolean,</span><br><span class=\"line\">        <span class=\"keyword\">float</span> aFloat, <span class=\"keyword\">double</span> aDouble, String aString)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Does nothing</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>这样mBinder就是一个Stub的实例了，下一步就是如何在client端使用，与service端产生交互了。<br>注：</p>\n<ul>\n<li>不能保证请求是在主线程被执行的，所以从构建到使用要考虑Service线程的安全性</li>\n<li>默认情况下，请求是同步的，所以尽量不要在主线程中发出请求</li>\n<li>所有的异常都不会返回给请求者（Caller）</li>\n</ul>\n<p>#在Client中使用接口<br>当你已经实现你的Service之后，你需把它暴露在Client中使Client可以绑定它。继承Service并实现onBind()方法，来返回一个实现了Stub的实例。下面就是一个把IRemoteService暴露给Client的例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RemoteService</span> <span class=\"keyword\">extends</span> <span class=\"title\">Service</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> IBinder <span class=\"title\">onBind</span><span class=\"params\">(Intent intent)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Return the interface</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> mBinder;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> IRemoteService.Stub mBinder = <span class=\"keyword\">new</span> IRemoteService.Stub() &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getPid</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> Process.myPid();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">basicTypes</span><span class=\"params\">(<span class=\"keyword\">int</span> anInt, <span class=\"keyword\">long</span> aLong, <span class=\"keyword\">boolean</span> aBoolean,</span><br><span class=\"line\">            <span class=\"keyword\">float</span> aFloat, <span class=\"keyword\">double</span> aDouble, String aString)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// Does nothing</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在client（比如是一个Activity）可以调用bindService()来连接这个Service，通过onServiceConnected()来接收Service中 onBind() 返回的mBinder，最后使用YourServiceInterface.Stub.asInterface(service)来把返回的mBinder转换成YourServiceInterface类型。例子如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IRemoteService mIRemoteService;</span><br><span class=\"line\"><span class=\"keyword\">private</span> ServiceConnection mConnection = <span class=\"keyword\">new</span> ServiceConnection() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Called when the connection with the service is established</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">(ComponentName className, IBinder service)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Following the example above for an AIDL interface,</span></span><br><span class=\"line\">        <span class=\"comment\">// this gets an instance of the IRemoteInterface, which we can use to call on the service</span></span><br><span class=\"line\">        mIRemoteService = IRemoteService.Stub.asInterface(service);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Called when the connection with the service disconnects unexpectedly</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceDisconnected</span><span class=\"params\">(ComponentName className)</span> </span>&#123;</span><br><span class=\"line\">        Log.e(TAG, <span class=\"string\">\"Service has unexpectedly disconnected\"</span>);</span><br><span class=\"line\">        mIRemoteService = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>注：<br>如果Service和Client在两个不同的Application中，Client的Application的src/目录下必须也有对应的.aidl文件。</p>\n<p>#一个Client的例子<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Binding</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/** The primary interface we will be calling on the service. */</span></span><br><span class=\"line\">    IRemoteService mService = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">/** Another interface we use on the service. */</span></span><br><span class=\"line\">    ISecondary mSecondaryService = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    Button mKillButton;</span><br><span class=\"line\">    TextView mCallbackText;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> mIsBound;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span><br><span class=\"line\">     * Standard initialization of this activity.  Set up the UI, then wait</span><br><span class=\"line\">     * for the user to poke it before doing anything.</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\"></span><br><span class=\"line\">        setContentView(R.layout.remote_service_binding);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Watch for button clicks.</span></span><br><span class=\"line\">        Button button = (Button)findViewById(R.id.bind);</span><br><span class=\"line\">        button.setOnClickListener(mBindListener);</span><br><span class=\"line\">        button = (Button)findViewById(R.id.unbind);</span><br><span class=\"line\">        button.setOnClickListener(mUnbindListener);</span><br><span class=\"line\">        mKillButton = (Button)findViewById(R.id.kill);</span><br><span class=\"line\">        mKillButton.setOnClickListener(mKillListener);</span><br><span class=\"line\">        mKillButton.setEnabled(<span class=\"keyword\">false</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        mCallbackText = (TextView)findViewById(R.id.callback);</span><br><span class=\"line\">        mCallbackText.setText(<span class=\"string\">\"Not attached.\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span><br><span class=\"line\">     * Class for interacting with the main interface of the service.</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ServiceConnection mConnection = <span class=\"keyword\">new</span> ServiceConnection() &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">(ComponentName className,</span><br><span class=\"line\">                IBinder service)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// This is called when the connection with the service has been</span></span><br><span class=\"line\">            <span class=\"comment\">// established, giving us the service object we can use to</span></span><br><span class=\"line\">            <span class=\"comment\">// interact with the service.  We are communicating with our</span></span><br><span class=\"line\">            <span class=\"comment\">// service through an IDL interface, so get a client-side</span></span><br><span class=\"line\">            <span class=\"comment\">// representation of that from the raw service object.</span></span><br><span class=\"line\">            mService = IRemoteService.Stub.asInterface(service);</span><br><span class=\"line\">            mKillButton.setEnabled(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">            mCallbackText.setText(<span class=\"string\">\"Attached.\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// We want to monitor the service for as long as we are</span></span><br><span class=\"line\">            <span class=\"comment\">// connected to it.</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                mService.registerCallback(mCallback);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// In this case the service has crashed before we could even</span></span><br><span class=\"line\">                <span class=\"comment\">// do anything with it; we can count on soon being</span></span><br><span class=\"line\">                <span class=\"comment\">// disconnected (and then reconnected if it can be restarted)</span></span><br><span class=\"line\">                <span class=\"comment\">// so there is no need to do anything here.</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// As part of the sample, tell the user what happened.</span></span><br><span class=\"line\">            Toast.makeText(Binding.<span class=\"keyword\">this</span>, R.string.remote_service_connected,</span><br><span class=\"line\">                    Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceDisconnected</span><span class=\"params\">(ComponentName className)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// This is called when the connection with the service has been</span></span><br><span class=\"line\">            <span class=\"comment\">// unexpectedly disconnected -- that is, its process crashed.</span></span><br><span class=\"line\">            mService = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            mKillButton.setEnabled(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">            mCallbackText.setText(<span class=\"string\">\"Disconnected.\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// As part of the sample, tell the user what happened.</span></span><br><span class=\"line\">            Toast.makeText(Binding.<span class=\"keyword\">this</span>, R.string.remote_service_disconnected,</span><br><span class=\"line\">                    Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span><br><span class=\"line\">     * Class for interacting with the secondary interface of the service.</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ServiceConnection mSecondaryConnection = <span class=\"keyword\">new</span> ServiceConnection() &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceConnected</span><span class=\"params\">(ComponentName className,</span><br><span class=\"line\">                IBinder service)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// Connecting to a secondary interface is the same as any</span></span><br><span class=\"line\">            <span class=\"comment\">// other interface.</span></span><br><span class=\"line\">            mSecondaryService = ISecondary.Stub.asInterface(service);</span><br><span class=\"line\">            mKillButton.setEnabled(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onServiceDisconnected</span><span class=\"params\">(ComponentName className)</span> </span>&#123;</span><br><span class=\"line\">            mSecondaryService = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            mKillButton.setEnabled(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> OnClickListener mBindListener = <span class=\"keyword\">new</span> OnClickListener() &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// Establish a couple connections with the service, binding</span></span><br><span class=\"line\">            <span class=\"comment\">// by interface names.  This allows other applications to be</span></span><br><span class=\"line\">            <span class=\"comment\">// installed that replace the remote service by implementing</span></span><br><span class=\"line\">            <span class=\"comment\">// the same interface.</span></span><br><span class=\"line\">            Intent intent = <span class=\"keyword\">new</span> Intent(Binding.<span class=\"keyword\">this</span>, RemoteService.class);</span><br><span class=\"line\">            intent.setAction(IRemoteService.class.getName());</span><br><span class=\"line\">            bindService(intent, mConnection, Context.BIND_AUTO_CREATE);</span><br><span class=\"line\">            intent.setAction(ISecondary.class.getName());</span><br><span class=\"line\">            bindService(intent, mSecondaryConnection, Context.BIND_AUTO_CREATE);</span><br><span class=\"line\">            mIsBound = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            mCallbackText.setText(<span class=\"string\">\"Binding.\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> OnClickListener mUnbindListener = <span class=\"keyword\">new</span> OnClickListener() &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mIsBound) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// If we have received the service, and hence registered with</span></span><br><span class=\"line\">                <span class=\"comment\">// it, then now is the time to unregister.</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (mService != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        mService.unregisterCallback(mCallback);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (RemoteException e) &#123;</span><br><span class=\"line\">                        <span class=\"comment\">// There is nothing special we need to do if the service</span></span><br><span class=\"line\">                        <span class=\"comment\">// has crashed.</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">// Detach our existing connection.</span></span><br><span class=\"line\">                unbindService(mConnection);</span><br><span class=\"line\">                unbindService(mSecondaryConnection);</span><br><span class=\"line\">                mKillButton.setEnabled(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">                mIsBound = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                mCallbackText.setText(<span class=\"string\">\"Unbinding.\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> OnClickListener mKillListener = <span class=\"keyword\">new</span> OnClickListener() &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// To kill the process hosting our service, we need to know its</span></span><br><span class=\"line\">            <span class=\"comment\">// PID.  Conveniently our service has a call that will return</span></span><br><span class=\"line\">            <span class=\"comment\">// to us that information.</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mSecondaryService != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> pid = mSecondaryService.getPid();</span><br><span class=\"line\">                    <span class=\"comment\">// Note that, though this API allows us to request to</span></span><br><span class=\"line\">                    <span class=\"comment\">// kill any process based on its PID, the kernel will</span></span><br><span class=\"line\">                    <span class=\"comment\">// still impose standard restrictions on which PIDs you</span></span><br><span class=\"line\">                    <span class=\"comment\">// are actually able to kill.  Typically this means only</span></span><br><span class=\"line\">                    <span class=\"comment\">// the process running your application and any additional</span></span><br><span class=\"line\">                    <span class=\"comment\">// processes created by that app as shown here; packages</span></span><br><span class=\"line\">                    <span class=\"comment\">// sharing a common UID will also be able to kill each</span></span><br><span class=\"line\">                    <span class=\"comment\">// other's processes.</span></span><br><span class=\"line\">                    Process.killProcess(pid);</span><br><span class=\"line\">                    mCallbackText.setText(<span class=\"string\">\"Killed service process.\"</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (RemoteException ex) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// Recover gracefully from the process hosting the</span></span><br><span class=\"line\">                    <span class=\"comment\">// server dying.</span></span><br><span class=\"line\">                    <span class=\"comment\">// Just for purposes of the sample, put up a notification.</span></span><br><span class=\"line\">                    Toast.makeText(Binding.<span class=\"keyword\">this</span>,</span><br><span class=\"line\">                            R.string.remote_call_failed,</span><br><span class=\"line\">                            Toast.LENGTH_SHORT).show();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ----------------------------------------------------------------------</span></span><br><span class=\"line\">    <span class=\"comment\">// Code showing how to deal with callbacks.</span></span><br><span class=\"line\">    <span class=\"comment\">// ----------------------------------------------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span><br><span class=\"line\">     * This implementation is used to receive callbacks from the remote</span><br><span class=\"line\">     * service.</span><br><span class=\"line\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> IRemoteServiceCallback mCallback = <span class=\"keyword\">new</span> IRemoteServiceCallback.Stub() &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span><br><span class=\"line\">         * This is called by the remote service regularly to tell us about</span><br><span class=\"line\">         * new values.  Note that IPC calls are dispatched through a thread</span><br><span class=\"line\">         * pool running in each process, so the code executing here will</span><br><span class=\"line\">         * NOT be running in our main thread like most other things -- so,</span><br><span class=\"line\">         * to update the UI, we need to use a Handler to hop over there.</span><br><span class=\"line\">         */</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">valueChanged</span><span class=\"params\">(<span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">            mHandler.sendMessage(mHandler.obtainMessage(BUMP_MSG, value, <span class=\"number\">0</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> BUMP_MSG = <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Handler mHandler = <span class=\"keyword\">new</span> Handler() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">switch</span> (msg.what) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">case</span> BUMP_MSG:</span><br><span class=\"line\">                    mCallbackText.setText(<span class=\"string\">\"Received from service: \"</span> + msg.arg1);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                    <span class=\"keyword\">super</span>.handleMessage(msg);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"View的工作原理","_content":"View的绘制流程是从ViewRoot的performTraversals方法开始的，它经过measure、layout和draw三个过程才能最终将一个View绘制出来，其中measure用来测量View的宽和高，layout用来确定View在父容器中的放置位置，而draw则负责将View绘制在屏幕上。\n<!-- more -->\nView的绘制流程是从ViewRoot的performTraversals方法开始的，它经过measure、layout和draw三个过程才能最终将一个View绘制出来，其中measure用来测量View的宽和高，layout用来确定View在父容器中的放置位置，而draw则负责将View绘制在屏幕上。\n\n# ViewRoot和DecorView\n## ViewRoot\n\n- ViewRoot对应ViewRootImpl类，它是连接WindowManager和DecorView的纽带，View的三大流程均通过ViewRoot来完成。\n- ActivityThread中，Activity创建完成后，会将DecorView添加到Window中，同时创建ViewRootImpl对象，并建立两者的关联。\n\n## DecorView\n- DecorView作为顶级View，一般情况下它内部包含一个竖直方向的LinearLayout，在这个LinearLayout里面有上下两个部分（具体情况和Android版本及主体有关），上面的是标题栏，下面的是内容栏。在Activity中通过setContentView所设置的布局文件其实就是被加到内容栏之中的，而内容栏的id是content，在代码中可以通过ViewGroup content = （ViewGroup)findViewById(R.android.id.content)来得到content对应的layout。\n- DecorView其实是一个FrameLayout，View层的事件都先经过DecorView，然后才传递给我们的View。\n\n# MeasureSpec\n在测量过程中，系统会将**View的LayoutParams根据父容器所施加的规则转换成对应的MeasureSpec，然后再根据这个MeasureSpec来测量出View的宽和高。**测量出来的宽和高不一定等于View最终的宽和高。\n\nMeasureSpec将SpecMode和SpecSize打包成一个int值来避免过多的对象内存分配，高2位代表SpecMode，低30位代表SpecSize，SpecMode是指测量模式，而SpecSize是指在某种测量模式下的规格大小。\nSpecMode有三类：\n- UNSPECIFIED：父容器不对View有任何限制，要多大给多大，这种情况一般用于系统内部，表示一种测量状态\n- EXACTLY：父容器已经检测出View所需要的精确大小，这个时候View的最终大小就是SpecSize所指定的值。它对应于LayoutParams中的match_parent和具体的数值这两种模式\n- AT_MOST：父容器指定了一个可用大小即SpecSize，View的大小不能大于这个值，具体是什么值要看不同View的具体实现。它对应于LayoutParams中的wrap_content。\n\n# 普通MeasureSpec的创建规则\n**对于普通View，其MeasureSpec由父容器的MeasureSpec和自身的LayoutParams来共同决定。**\n\n- 子View为精确宽高，无论父容器的MeasureSpec，子View的MeasureSpec都为精确值且遵循LayoutParams中的值。\n- 子View为match_parent时，如果父容器是精确模式，则子View也为精确模式且为父容器的剩余空间大小；如果父容器是最大模式，则子View也是wrap_content且不会超过父容器的剩余空间。\n- 子View为wrap_content时，无论父View是精确还是最大模式，子View的模式总是最大模式，且不会超过父容器的剩余空间。\n\n# View的工作流程\n## measure\nViewGroup的measure方法会遍历每个子元素，并调用子元素内部的measure方法，measure源码如下：\n```java\n protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),\n                getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));\n    }\n```\n\n注：\n\n- getDefaultSize()返回MeasureSpec中的specSize，也就是View测量后的大小。\n- getSuggestedMinimumWidth()，View如果没有背景，那么返回android:minWidth这个属性指定的值，这个值可以为0；如果设置了背景，则返回背景的最小宽度和minWidth中的**最大值**。\n- getSuggestedMinimumHeight()，与getSuggestedMinimumWidth()类似。\n- 直接继承View的自定义控件需要重写onMeasure方法并设置wrap_content时的自身大小，否则在布局中使用wrap_content时就相当于使用match_parent。因为LayoutParams=wrap_content的情况下，MeasureSpec为AT_MOST，所以View的宽和高为父容器当前剩余的空间，这种效果与match_parent一致。**具体处理方法要根据需求灵活决定。**\n\n### 如何得到View的宽和高\n\n在Activity的onCreate、onStart、onResume方法中均无法正确得到某个View的宽/高信息，这是因为View的measure过程和Activity的生命周期方法不是同步执行的，因此无法保证Activity执行了onCreate、onStart、onResume时某个View就已经测量完毕了，如果View还没有测量完毕，那么获得的宽/高就是0。\n\n可以通过如下四个方法来解决这个问题：\n- Activity或者View的onWindowFocusChanged方法（注意该方法会在Activity Pause和resume时被多次调用）\n- view.post(new Runnable( {@Overidde public void run(){})})，在run方法中获取。\n- ViewTreeObserver中的onGlobalLayoutListener中。\n- 手动调用View的measure方法。\n示例代码请参考原书P190页\n\n## layout\nlayout的作用是用来确定子视图在父视图中的位置。源码如下：\n\n```java\npublic void layout(int l, int t, int r, int b) {  \n    int oldL = mLeft;  \n    int oldT = mTop;  \n    int oldB = mBottom;  \n    int oldR = mRight;  \n    boolean changed = setFrame(l, t, r, b);  \n    if (changed || (mPrivateFlags & LAYOUT_REQUIRED) == LAYOUT_REQUIRED) {  \n        if (ViewDebug.TRACE_HIERARCHY) {  \n            ViewDebug.trace(this, ViewDebug.HierarchyTraceType.ON_LAYOUT);  \n        }  \n        onLayout(changed, l, t, r, b);  \n        mPrivateFlags &= ~LAYOUT_REQUIRED;  \n        if (mOnLayoutChangeListeners != null) {  \n            ArrayList<OnLayoutChangeListener> listenersCopy =  \n                    (ArrayList<OnLayoutChangeListener>) mOnLayoutChangeListeners.clone();  \n            int numListeners = listenersCopy.size();  \n            for (int i = 0; i < numListeners; ++i) {  \n                listenersCopy.get(i).onLayoutChange(this, l, t, r, b, oldL, oldT, oldR, oldB);  \n            }  \n        }  \n    }  \n    mPrivateFlags &= ~FORCE_LAYOUT;  \n}  \n```\n通过setFrame()确定四个顶点的位置，进而确定View在父容器中的位置。\n\n在View的默认实现中，View的测量宽/高和最终宽/高是相等的，只不过测量宽/高形成于View的measure过程，而最终宽/高形成于View的layout过程，即两者的赋值时机不同，测量宽/高的赋值时机稍微早一些。多数情况下可以认为View的测量宽/高就等于最终的宽/高，但对于在View的layout中改变了View的left、top、right、bottom四个属性时，得出的测量宽/高有可能和最终的宽/高不一致。\n\n## draw\ndraw的过程很简单主要有以下几步：\n\n- 绘制背景(background.draw)\n- 绘制自己(onDraw)\n- 绘制children(dispatchDraw)\n- 绘制装饰(onDrawScrollBars)。\n\n源码如下\n```java\npublic void draw(Canvas canvas) {  \n  \n        / * Draw traversal performs several drawing steps which must be executed  \n         * in the appropriate order:  \n         *  \n         *      1. Draw the background if need  \n         *      2. If necessary, save the canvas' layers to prepare for fading  \n         *      3. Draw view's content  \n         *      4. Draw children (dispatchDraw)  \n         *      5. If necessary, draw the fading edges and restore layers  \n         *      6. Draw decorations (scrollbars for instance)  \n         */  \n  \n       //Step 1, draw the background, if needed  \n        if (!dirtyOpaque) {  \n            drawBackground(canvas);  \n        }  \n  \n         // skip step 2 & 5 if possible (common case)  \n        final int viewFlags = mViewFlags;  \n        if (!verticalEdges && !horizontalEdges) {  \n            // Step 3, draw the content  \n            if (!dirtyOpaque) onDraw(canvas);  \n  \n            // Step 4, draw the children  \n            dispatchDraw(canvas);  \n  \n            // Step 6, draw decorations (scrollbars)  \n            onDrawScrollBars(canvas);  \n  \n            if (mOverlay != null && !mOverlay.isEmpty()) {  \n                mOverlay.getOverlayView().dispatchDraw(canvas);  \n            }  \n  \n            // we're done...  \n            return;  \n        }  \n  \n        // Step 2, save the canvas' layers  \n        ...  \n  \n        // Step 3, draw the content  \n        if (!dirtyOpaque)   \n            onDraw(canvas);  \n  \n        // Step 4, draw the children  \n        dispatchDraw(canvas);  \n  \n        // Step 5, draw the fade effect and restore layers  \n  \n        // Step 6, draw decorations (scrollbars)  \n        onDrawScrollBars(canvas);  \n    }  \n```\n\n注：\n\n- View有一个特殊的方法setWillNotDraw，如果一个View不需要绘制任何内容，设置这个标记位true后，系统会进行优化。默认情况下，View没有启用这个优化标记位，但是ViewGroup会默认启用这个优化标记位。\n- 这个标记位对实际开发的意义是：如果自定义控件继承于ViewGroup并且本身不具备绘制功能时，就可以开启这个标记位从而便于系统进行后续的优化。当明确知道一个ViewGroup需要通过onDraw来绘制内容时，需要显示地关闭WILL_NOT_DRAW这个标记位。\n\n欢迎转载，转载请注明出处[http://sparkyuan.me/](http://sparkyuan.me/)","source":"_posts/View的工作原理.md","raw":"title: View的工作原理\ncategories:\n- Android\n- Android开发艺术探索笔记\ntags:\n- Android\n- View\n---\nView的绘制流程是从ViewRoot的performTraversals方法开始的，它经过measure、layout和draw三个过程才能最终将一个View绘制出来，其中measure用来测量View的宽和高，layout用来确定View在父容器中的放置位置，而draw则负责将View绘制在屏幕上。\n<!-- more -->\nView的绘制流程是从ViewRoot的performTraversals方法开始的，它经过measure、layout和draw三个过程才能最终将一个View绘制出来，其中measure用来测量View的宽和高，layout用来确定View在父容器中的放置位置，而draw则负责将View绘制在屏幕上。\n\n# ViewRoot和DecorView\n## ViewRoot\n\n- ViewRoot对应ViewRootImpl类，它是连接WindowManager和DecorView的纽带，View的三大流程均通过ViewRoot来完成。\n- ActivityThread中，Activity创建完成后，会将DecorView添加到Window中，同时创建ViewRootImpl对象，并建立两者的关联。\n\n## DecorView\n- DecorView作为顶级View，一般情况下它内部包含一个竖直方向的LinearLayout，在这个LinearLayout里面有上下两个部分（具体情况和Android版本及主体有关），上面的是标题栏，下面的是内容栏。在Activity中通过setContentView所设置的布局文件其实就是被加到内容栏之中的，而内容栏的id是content，在代码中可以通过ViewGroup content = （ViewGroup)findViewById(R.android.id.content)来得到content对应的layout。\n- DecorView其实是一个FrameLayout，View层的事件都先经过DecorView，然后才传递给我们的View。\n\n# MeasureSpec\n在测量过程中，系统会将**View的LayoutParams根据父容器所施加的规则转换成对应的MeasureSpec，然后再根据这个MeasureSpec来测量出View的宽和高。**测量出来的宽和高不一定等于View最终的宽和高。\n\nMeasureSpec将SpecMode和SpecSize打包成一个int值来避免过多的对象内存分配，高2位代表SpecMode，低30位代表SpecSize，SpecMode是指测量模式，而SpecSize是指在某种测量模式下的规格大小。\nSpecMode有三类：\n- UNSPECIFIED：父容器不对View有任何限制，要多大给多大，这种情况一般用于系统内部，表示一种测量状态\n- EXACTLY：父容器已经检测出View所需要的精确大小，这个时候View的最终大小就是SpecSize所指定的值。它对应于LayoutParams中的match_parent和具体的数值这两种模式\n- AT_MOST：父容器指定了一个可用大小即SpecSize，View的大小不能大于这个值，具体是什么值要看不同View的具体实现。它对应于LayoutParams中的wrap_content。\n\n# 普通MeasureSpec的创建规则\n**对于普通View，其MeasureSpec由父容器的MeasureSpec和自身的LayoutParams来共同决定。**\n\n- 子View为精确宽高，无论父容器的MeasureSpec，子View的MeasureSpec都为精确值且遵循LayoutParams中的值。\n- 子View为match_parent时，如果父容器是精确模式，则子View也为精确模式且为父容器的剩余空间大小；如果父容器是最大模式，则子View也是wrap_content且不会超过父容器的剩余空间。\n- 子View为wrap_content时，无论父View是精确还是最大模式，子View的模式总是最大模式，且不会超过父容器的剩余空间。\n\n# View的工作流程\n## measure\nViewGroup的measure方法会遍历每个子元素，并调用子元素内部的measure方法，measure源码如下：\n```java\n protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),\n                getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));\n    }\n```\n\n注：\n\n- getDefaultSize()返回MeasureSpec中的specSize，也就是View测量后的大小。\n- getSuggestedMinimumWidth()，View如果没有背景，那么返回android:minWidth这个属性指定的值，这个值可以为0；如果设置了背景，则返回背景的最小宽度和minWidth中的**最大值**。\n- getSuggestedMinimumHeight()，与getSuggestedMinimumWidth()类似。\n- 直接继承View的自定义控件需要重写onMeasure方法并设置wrap_content时的自身大小，否则在布局中使用wrap_content时就相当于使用match_parent。因为LayoutParams=wrap_content的情况下，MeasureSpec为AT_MOST，所以View的宽和高为父容器当前剩余的空间，这种效果与match_parent一致。**具体处理方法要根据需求灵活决定。**\n\n### 如何得到View的宽和高\n\n在Activity的onCreate、onStart、onResume方法中均无法正确得到某个View的宽/高信息，这是因为View的measure过程和Activity的生命周期方法不是同步执行的，因此无法保证Activity执行了onCreate、onStart、onResume时某个View就已经测量完毕了，如果View还没有测量完毕，那么获得的宽/高就是0。\n\n可以通过如下四个方法来解决这个问题：\n- Activity或者View的onWindowFocusChanged方法（注意该方法会在Activity Pause和resume时被多次调用）\n- view.post(new Runnable( {@Overidde public void run(){})})，在run方法中获取。\n- ViewTreeObserver中的onGlobalLayoutListener中。\n- 手动调用View的measure方法。\n示例代码请参考原书P190页\n\n## layout\nlayout的作用是用来确定子视图在父视图中的位置。源码如下：\n\n```java\npublic void layout(int l, int t, int r, int b) {  \n    int oldL = mLeft;  \n    int oldT = mTop;  \n    int oldB = mBottom;  \n    int oldR = mRight;  \n    boolean changed = setFrame(l, t, r, b);  \n    if (changed || (mPrivateFlags & LAYOUT_REQUIRED) == LAYOUT_REQUIRED) {  \n        if (ViewDebug.TRACE_HIERARCHY) {  \n            ViewDebug.trace(this, ViewDebug.HierarchyTraceType.ON_LAYOUT);  \n        }  \n        onLayout(changed, l, t, r, b);  \n        mPrivateFlags &= ~LAYOUT_REQUIRED;  \n        if (mOnLayoutChangeListeners != null) {  \n            ArrayList<OnLayoutChangeListener> listenersCopy =  \n                    (ArrayList<OnLayoutChangeListener>) mOnLayoutChangeListeners.clone();  \n            int numListeners = listenersCopy.size();  \n            for (int i = 0; i < numListeners; ++i) {  \n                listenersCopy.get(i).onLayoutChange(this, l, t, r, b, oldL, oldT, oldR, oldB);  \n            }  \n        }  \n    }  \n    mPrivateFlags &= ~FORCE_LAYOUT;  \n}  \n```\n通过setFrame()确定四个顶点的位置，进而确定View在父容器中的位置。\n\n在View的默认实现中，View的测量宽/高和最终宽/高是相等的，只不过测量宽/高形成于View的measure过程，而最终宽/高形成于View的layout过程，即两者的赋值时机不同，测量宽/高的赋值时机稍微早一些。多数情况下可以认为View的测量宽/高就等于最终的宽/高，但对于在View的layout中改变了View的left、top、right、bottom四个属性时，得出的测量宽/高有可能和最终的宽/高不一致。\n\n## draw\ndraw的过程很简单主要有以下几步：\n\n- 绘制背景(background.draw)\n- 绘制自己(onDraw)\n- 绘制children(dispatchDraw)\n- 绘制装饰(onDrawScrollBars)。\n\n源码如下\n```java\npublic void draw(Canvas canvas) {  \n  \n        / * Draw traversal performs several drawing steps which must be executed  \n         * in the appropriate order:  \n         *  \n         *      1. Draw the background if need  \n         *      2. If necessary, save the canvas' layers to prepare for fading  \n         *      3. Draw view's content  \n         *      4. Draw children (dispatchDraw)  \n         *      5. If necessary, draw the fading edges and restore layers  \n         *      6. Draw decorations (scrollbars for instance)  \n         */  \n  \n       //Step 1, draw the background, if needed  \n        if (!dirtyOpaque) {  \n            drawBackground(canvas);  \n        }  \n  \n         // skip step 2 & 5 if possible (common case)  \n        final int viewFlags = mViewFlags;  \n        if (!verticalEdges && !horizontalEdges) {  \n            // Step 3, draw the content  \n            if (!dirtyOpaque) onDraw(canvas);  \n  \n            // Step 4, draw the children  \n            dispatchDraw(canvas);  \n  \n            // Step 6, draw decorations (scrollbars)  \n            onDrawScrollBars(canvas);  \n  \n            if (mOverlay != null && !mOverlay.isEmpty()) {  \n                mOverlay.getOverlayView().dispatchDraw(canvas);  \n            }  \n  \n            // we're done...  \n            return;  \n        }  \n  \n        // Step 2, save the canvas' layers  \n        ...  \n  \n        // Step 3, draw the content  \n        if (!dirtyOpaque)   \n            onDraw(canvas);  \n  \n        // Step 4, draw the children  \n        dispatchDraw(canvas);  \n  \n        // Step 5, draw the fade effect and restore layers  \n  \n        // Step 6, draw decorations (scrollbars)  \n        onDrawScrollBars(canvas);  \n    }  \n```\n\n注：\n\n- View有一个特殊的方法setWillNotDraw，如果一个View不需要绘制任何内容，设置这个标记位true后，系统会进行优化。默认情况下，View没有启用这个优化标记位，但是ViewGroup会默认启用这个优化标记位。\n- 这个标记位对实际开发的意义是：如果自定义控件继承于ViewGroup并且本身不具备绘制功能时，就可以开启这个标记位从而便于系统进行后续的优化。当明确知道一个ViewGroup需要通过onDraw来绘制内容时，需要显示地关闭WILL_NOT_DRAW这个标记位。\n\n欢迎转载，转载请注明出处[http://sparkyuan.me/](http://sparkyuan.me/)","slug":"View的工作原理","published":1,"date":"2016-03-12T05:28:32.363Z","updated":"2016-03-12T05:28:32.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilop1pue0006qcmy5kvstmj7","content":"<p>View的绘制流程是从ViewRoot的performTraversals方法开始的，它经过measure、layout和draw三个过程才能最终将一个View绘制出来，其中measure用来测量View的宽和高，layout用来确定View在父容器中的放置位置，而draw则负责将View绘制在屏幕上。<br><a id=\"more\"></a><br>View的绘制流程是从ViewRoot的performTraversals方法开始的，它经过measure、layout和draw三个过程才能最终将一个View绘制出来，其中measure用来测量View的宽和高，layout用来确定View在父容器中的放置位置，而draw则负责将View绘制在屏幕上。</p>\n<h1 id=\"ViewRoot和DecorView\"><a href=\"#ViewRoot和DecorView\" class=\"headerlink\" title=\"ViewRoot和DecorView\"></a>ViewRoot和DecorView</h1><h2 id=\"ViewRoot\"><a href=\"#ViewRoot\" class=\"headerlink\" title=\"ViewRoot\"></a>ViewRoot</h2><ul>\n<li>ViewRoot对应ViewRootImpl类，它是连接WindowManager和DecorView的纽带，View的三大流程均通过ViewRoot来完成。</li>\n<li>ActivityThread中，Activity创建完成后，会将DecorView添加到Window中，同时创建ViewRootImpl对象，并建立两者的关联。</li>\n</ul>\n<h2 id=\"DecorView\"><a href=\"#DecorView\" class=\"headerlink\" title=\"DecorView\"></a>DecorView</h2><ul>\n<li>DecorView作为顶级View，一般情况下它内部包含一个竖直方向的LinearLayout，在这个LinearLayout里面有上下两个部分（具体情况和Android版本及主体有关），上面的是标题栏，下面的是内容栏。在Activity中通过setContentView所设置的布局文件其实就是被加到内容栏之中的，而内容栏的id是content，在代码中可以通过ViewGroup content = （ViewGroup)findViewById(R.android.id.content)来得到content对应的layout。</li>\n<li>DecorView其实是一个FrameLayout，View层的事件都先经过DecorView，然后才传递给我们的View。</li>\n</ul>\n<h1 id=\"MeasureSpec\"><a href=\"#MeasureSpec\" class=\"headerlink\" title=\"MeasureSpec\"></a>MeasureSpec</h1><p>在测量过程中，系统会将<strong>View的LayoutParams根据父容器所施加的规则转换成对应的MeasureSpec，然后再根据这个MeasureSpec来测量出View的宽和高。</strong>测量出来的宽和高不一定等于View最终的宽和高。</p>\n<p>MeasureSpec将SpecMode和SpecSize打包成一个int值来避免过多的对象内存分配，高2位代表SpecMode，低30位代表SpecSize，SpecMode是指测量模式，而SpecSize是指在某种测量模式下的规格大小。<br>SpecMode有三类：</p>\n<ul>\n<li>UNSPECIFIED：父容器不对View有任何限制，要多大给多大，这种情况一般用于系统内部，表示一种测量状态</li>\n<li>EXACTLY：父容器已经检测出View所需要的精确大小，这个时候View的最终大小就是SpecSize所指定的值。它对应于LayoutParams中的match_parent和具体的数值这两种模式</li>\n<li>AT_MOST：父容器指定了一个可用大小即SpecSize，View的大小不能大于这个值，具体是什么值要看不同View的具体实现。它对应于LayoutParams中的wrap_content。</li>\n</ul>\n<h1 id=\"普通MeasureSpec的创建规则\"><a href=\"#普通MeasureSpec的创建规则\" class=\"headerlink\" title=\"普通MeasureSpec的创建规则\"></a>普通MeasureSpec的创建规则</h1><p><strong>对于普通View，其MeasureSpec由父容器的MeasureSpec和自身的LayoutParams来共同决定。</strong></p>\n<ul>\n<li>子View为精确宽高，无论父容器的MeasureSpec，子View的MeasureSpec都为精确值且遵循LayoutParams中的值。</li>\n<li>子View为match_parent时，如果父容器是精确模式，则子View也为精确模式且为父容器的剩余空间大小；如果父容器是最大模式，则子View也是wrap_content且不会超过父容器的剩余空间。</li>\n<li>子View为wrap_content时，无论父View是精确还是最大模式，子View的模式总是最大模式，且不会超过父容器的剩余空间。</li>\n</ul>\n<h1 id=\"View的工作流程\"><a href=\"#View的工作流程\" class=\"headerlink\" title=\"View的工作流程\"></a>View的工作流程</h1><h2 id=\"measure\"><a href=\"#measure\" class=\"headerlink\" title=\"measure\"></a>measure</h2><p>ViewGroup的measure方法会遍历每个子元素，并调用子元素内部的measure方法，measure源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">       setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),</span><br><span class=\"line\">               getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>注：</p>\n<ul>\n<li>getDefaultSize()返回MeasureSpec中的specSize，也就是View测量后的大小。</li>\n<li>getSuggestedMinimumWidth()，View如果没有背景，那么返回android:minWidth这个属性指定的值，这个值可以为0；如果设置了背景，则返回背景的最小宽度和minWidth中的<strong>最大值</strong>。</li>\n<li>getSuggestedMinimumHeight()，与getSuggestedMinimumWidth()类似。</li>\n<li>直接继承View的自定义控件需要重写onMeasure方法并设置wrap_content时的自身大小，否则在布局中使用wrap_content时就相当于使用match_parent。因为LayoutParams=wrap_content的情况下，MeasureSpec为AT_MOST，所以View的宽和高为父容器当前剩余的空间，这种效果与match_parent一致。<strong>具体处理方法要根据需求灵活决定。</strong></li>\n</ul>\n<h3 id=\"如何得到View的宽和高\"><a href=\"#如何得到View的宽和高\" class=\"headerlink\" title=\"如何得到View的宽和高\"></a>如何得到View的宽和高</h3><p>在Activity的onCreate、onStart、onResume方法中均无法正确得到某个View的宽/高信息，这是因为View的measure过程和Activity的生命周期方法不是同步执行的，因此无法保证Activity执行了onCreate、onStart、onResume时某个View就已经测量完毕了，如果View还没有测量完毕，那么获得的宽/高就是0。</p>\n<p>可以通过如下四个方法来解决这个问题：</p>\n<ul>\n<li>Activity或者View的onWindowFocusChanged方法（注意该方法会在Activity Pause和resume时被多次调用）</li>\n<li>view.post(new Runnable( {@Overidde public void run(){})})，在run方法中获取。</li>\n<li>ViewTreeObserver中的onGlobalLayoutListener中。</li>\n<li>手动调用View的measure方法。<br>示例代码请参考原书P190页</li>\n</ul>\n<h2 id=\"layout\"><a href=\"#layout\" class=\"headerlink\" title=\"layout\"></a>layout</h2><p>layout的作用是用来确定子视图在父视图中的位置。源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">layout</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldL = mLeft;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldT = mTop;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldB = mBottom;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldR = mRight;  </span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> changed = setFrame(l, t, r, b);  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (changed || (mPrivateFlags &amp; LAYOUT_REQUIRED) == LAYOUT_REQUIRED) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ViewDebug.TRACE_HIERARCHY) &#123;  </span><br><span class=\"line\">            ViewDebug.trace(<span class=\"keyword\">this</span>, ViewDebug.HierarchyTraceType.ON_LAYOUT);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        onLayout(changed, l, t, r, b);  </span><br><span class=\"line\">        mPrivateFlags &amp;= ~LAYOUT_REQUIRED;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mOnLayoutChangeListeners != <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">            ArrayList&lt;OnLayoutChangeListener&gt; listenersCopy =  </span><br><span class=\"line\">                    (ArrayList&lt;OnLayoutChangeListener&gt;) mOnLayoutChangeListeners.clone();  </span><br><span class=\"line\">            <span class=\"keyword\">int</span> numListeners = listenersCopy.size();  </span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numListeners; ++i) &#123;  </span><br><span class=\"line\">                listenersCopy.get(i).onLayoutChange(<span class=\"keyword\">this</span>, l, t, r, b, oldL, oldT, oldR, oldB);  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    mPrivateFlags &amp;= ~FORCE_LAYOUT;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过setFrame()确定四个顶点的位置，进而确定View在父容器中的位置。</p>\n<p>在View的默认实现中，View的测量宽/高和最终宽/高是相等的，只不过测量宽/高形成于View的measure过程，而最终宽/高形成于View的layout过程，即两者的赋值时机不同，测量宽/高的赋值时机稍微早一些。多数情况下可以认为View的测量宽/高就等于最终的宽/高，但对于在View的layout中改变了View的left、top、right、bottom四个属性时，得出的测量宽/高有可能和最终的宽/高不一致。</p>\n<h2 id=\"draw\"><a href=\"#draw\" class=\"headerlink\" title=\"draw\"></a>draw</h2><p>draw的过程很简单主要有以下几步：</p>\n<ul>\n<li>绘制背景(background.draw)</li>\n<li>绘制自己(onDraw)</li>\n<li>绘制children(dispatchDraw)</li>\n<li>绘制装饰(onDrawScrollBars)。</li>\n</ul>\n<p>源码如下<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void draw(Canvas canvas) &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">        / * Draw traversal performs several drawing steps which must be executed  </span><br><span class=\"line\">         * in the appropriate order:  </span><br><span class=\"line\">         *  </span><br><span class=\"line\">         *      1. Draw the background if need  </span><br><span class=\"line\">         *      2. If necessary, save the canvas' layers to prepare for fading  </span><br><span class=\"line\">         *      3. Draw view's content  </span><br><span class=\"line\">         *      4. Draw children (dispatchDraw)  </span><br><span class=\"line\">         *      5. If necessary, draw the fading edges and restore layers  </span><br><span class=\"line\">         *      6. Draw decorations (scrollbars for instance)  </span><br><span class=\"line\">         */  </span><br><span class=\"line\">  </span><br><span class=\"line\">       //Step 1, draw the background, if needed  </span><br><span class=\"line\">        if (!dirtyOpaque) &#123;  </span><br><span class=\"line\">            drawBackground(canvas);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">         // skip step 2 &amp; 5 if possible (common case)  </span><br><span class=\"line\">        final int viewFlags = mViewFlags;  </span><br><span class=\"line\">        if (!verticalEdges &amp;&amp; !horizontalEdges) &#123;  </span><br><span class=\"line\">            // Step 3, draw the content  </span><br><span class=\"line\">            if (!dirtyOpaque) onDraw(canvas);  </span><br><span class=\"line\">  </span><br><span class=\"line\">            // Step 4, draw the children  </span><br><span class=\"line\">            dispatchDraw(canvas);  </span><br><span class=\"line\">  </span><br><span class=\"line\">            // Step 6, draw decorations (scrollbars)  </span><br><span class=\"line\">            onDrawScrollBars(canvas);  </span><br><span class=\"line\">  </span><br><span class=\"line\">            if (mOverlay != null &amp;&amp; !mOverlay.isEmpty()) &#123;  </span><br><span class=\"line\">                mOverlay.getOverlayView().dispatchDraw(canvas);  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">            // we're done...  </span><br><span class=\"line\">            return;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">        // Step 2, save the canvas' layers  </span><br><span class=\"line\">        ...  </span><br><span class=\"line\">  </span><br><span class=\"line\">        // Step 3, draw the content  </span><br><span class=\"line\">        if (!dirtyOpaque)   </span><br><span class=\"line\">            onDraw(canvas);  </span><br><span class=\"line\">  </span><br><span class=\"line\">        // Step 4, draw the children  </span><br><span class=\"line\">        dispatchDraw(canvas);  </span><br><span class=\"line\">  </span><br><span class=\"line\">        // Step 5, draw the fade effect and restore layers  </span><br><span class=\"line\">  </span><br><span class=\"line\">        // Step 6, draw decorations (scrollbars)  </span><br><span class=\"line\">        onDrawScrollBars(canvas);  </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>注：</p>\n<ul>\n<li>View有一个特殊的方法setWillNotDraw，如果一个View不需要绘制任何内容，设置这个标记位true后，系统会进行优化。默认情况下，View没有启用这个优化标记位，但是ViewGroup会默认启用这个优化标记位。</li>\n<li>这个标记位对实际开发的意义是：如果自定义控件继承于ViewGroup并且本身不具备绘制功能时，就可以开启这个标记位从而便于系统进行后续的优化。当明确知道一个ViewGroup需要通过onDraw来绘制内容时，需要显示地关闭WILL_NOT_DRAW这个标记位。</li>\n</ul>\n<p>欢迎转载，转载请注明出处<a href=\"http://sparkyuan.me/\" target=\"_blank\" rel=\"external\">http://sparkyuan.me/</a></p>\n","excerpt":"<p>View的绘制流程是从ViewRoot的performTraversals方法开始的，它经过measure、layout和draw三个过程才能最终将一个View绘制出来，其中measure用来测量View的宽和高，layout用来确定View在父容器中的放置位置，而draw则负责将View绘制在屏幕上。<br>","more":"<br>View的绘制流程是从ViewRoot的performTraversals方法开始的，它经过measure、layout和draw三个过程才能最终将一个View绘制出来，其中measure用来测量View的宽和高，layout用来确定View在父容器中的放置位置，而draw则负责将View绘制在屏幕上。</p>\n<h1 id=\"ViewRoot和DecorView\"><a href=\"#ViewRoot和DecorView\" class=\"headerlink\" title=\"ViewRoot和DecorView\"></a>ViewRoot和DecorView</h1><h2 id=\"ViewRoot\"><a href=\"#ViewRoot\" class=\"headerlink\" title=\"ViewRoot\"></a>ViewRoot</h2><ul>\n<li>ViewRoot对应ViewRootImpl类，它是连接WindowManager和DecorView的纽带，View的三大流程均通过ViewRoot来完成。</li>\n<li>ActivityThread中，Activity创建完成后，会将DecorView添加到Window中，同时创建ViewRootImpl对象，并建立两者的关联。</li>\n</ul>\n<h2 id=\"DecorView\"><a href=\"#DecorView\" class=\"headerlink\" title=\"DecorView\"></a>DecorView</h2><ul>\n<li>DecorView作为顶级View，一般情况下它内部包含一个竖直方向的LinearLayout，在这个LinearLayout里面有上下两个部分（具体情况和Android版本及主体有关），上面的是标题栏，下面的是内容栏。在Activity中通过setContentView所设置的布局文件其实就是被加到内容栏之中的，而内容栏的id是content，在代码中可以通过ViewGroup content = （ViewGroup)findViewById(R.android.id.content)来得到content对应的layout。</li>\n<li>DecorView其实是一个FrameLayout，View层的事件都先经过DecorView，然后才传递给我们的View。</li>\n</ul>\n<h1 id=\"MeasureSpec\"><a href=\"#MeasureSpec\" class=\"headerlink\" title=\"MeasureSpec\"></a>MeasureSpec</h1><p>在测量过程中，系统会将<strong>View的LayoutParams根据父容器所施加的规则转换成对应的MeasureSpec，然后再根据这个MeasureSpec来测量出View的宽和高。</strong>测量出来的宽和高不一定等于View最终的宽和高。</p>\n<p>MeasureSpec将SpecMode和SpecSize打包成一个int值来避免过多的对象内存分配，高2位代表SpecMode，低30位代表SpecSize，SpecMode是指测量模式，而SpecSize是指在某种测量模式下的规格大小。<br>SpecMode有三类：</p>\n<ul>\n<li>UNSPECIFIED：父容器不对View有任何限制，要多大给多大，这种情况一般用于系统内部，表示一种测量状态</li>\n<li>EXACTLY：父容器已经检测出View所需要的精确大小，这个时候View的最终大小就是SpecSize所指定的值。它对应于LayoutParams中的match_parent和具体的数值这两种模式</li>\n<li>AT_MOST：父容器指定了一个可用大小即SpecSize，View的大小不能大于这个值，具体是什么值要看不同View的具体实现。它对应于LayoutParams中的wrap_content。</li>\n</ul>\n<h1 id=\"普通MeasureSpec的创建规则\"><a href=\"#普通MeasureSpec的创建规则\" class=\"headerlink\" title=\"普通MeasureSpec的创建规则\"></a>普通MeasureSpec的创建规则</h1><p><strong>对于普通View，其MeasureSpec由父容器的MeasureSpec和自身的LayoutParams来共同决定。</strong></p>\n<ul>\n<li>子View为精确宽高，无论父容器的MeasureSpec，子View的MeasureSpec都为精确值且遵循LayoutParams中的值。</li>\n<li>子View为match_parent时，如果父容器是精确模式，则子View也为精确模式且为父容器的剩余空间大小；如果父容器是最大模式，则子View也是wrap_content且不会超过父容器的剩余空间。</li>\n<li>子View为wrap_content时，无论父View是精确还是最大模式，子View的模式总是最大模式，且不会超过父容器的剩余空间。</li>\n</ul>\n<h1 id=\"View的工作流程\"><a href=\"#View的工作流程\" class=\"headerlink\" title=\"View的工作流程\"></a>View的工作流程</h1><h2 id=\"measure\"><a href=\"#measure\" class=\"headerlink\" title=\"measure\"></a>measure</h2><p>ViewGroup的measure方法会遍历每个子元素，并调用子元素内部的measure方法，measure源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">       setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),</span><br><span class=\"line\">               getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>注：</p>\n<ul>\n<li>getDefaultSize()返回MeasureSpec中的specSize，也就是View测量后的大小。</li>\n<li>getSuggestedMinimumWidth()，View如果没有背景，那么返回android:minWidth这个属性指定的值，这个值可以为0；如果设置了背景，则返回背景的最小宽度和minWidth中的<strong>最大值</strong>。</li>\n<li>getSuggestedMinimumHeight()，与getSuggestedMinimumWidth()类似。</li>\n<li>直接继承View的自定义控件需要重写onMeasure方法并设置wrap_content时的自身大小，否则在布局中使用wrap_content时就相当于使用match_parent。因为LayoutParams=wrap_content的情况下，MeasureSpec为AT_MOST，所以View的宽和高为父容器当前剩余的空间，这种效果与match_parent一致。<strong>具体处理方法要根据需求灵活决定。</strong></li>\n</ul>\n<h3 id=\"如何得到View的宽和高\"><a href=\"#如何得到View的宽和高\" class=\"headerlink\" title=\"如何得到View的宽和高\"></a>如何得到View的宽和高</h3><p>在Activity的onCreate、onStart、onResume方法中均无法正确得到某个View的宽/高信息，这是因为View的measure过程和Activity的生命周期方法不是同步执行的，因此无法保证Activity执行了onCreate、onStart、onResume时某个View就已经测量完毕了，如果View还没有测量完毕，那么获得的宽/高就是0。</p>\n<p>可以通过如下四个方法来解决这个问题：</p>\n<ul>\n<li>Activity或者View的onWindowFocusChanged方法（注意该方法会在Activity Pause和resume时被多次调用）</li>\n<li>view.post(new Runnable( {@Overidde public void run(){})})，在run方法中获取。</li>\n<li>ViewTreeObserver中的onGlobalLayoutListener中。</li>\n<li>手动调用View的measure方法。<br>示例代码请参考原书P190页</li>\n</ul>\n<h2 id=\"layout\"><a href=\"#layout\" class=\"headerlink\" title=\"layout\"></a>layout</h2><p>layout的作用是用来确定子视图在父视图中的位置。源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">layout</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldL = mLeft;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldT = mTop;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldB = mBottom;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldR = mRight;  </span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> changed = setFrame(l, t, r, b);  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (changed || (mPrivateFlags &amp; LAYOUT_REQUIRED) == LAYOUT_REQUIRED) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ViewDebug.TRACE_HIERARCHY) &#123;  </span><br><span class=\"line\">            ViewDebug.trace(<span class=\"keyword\">this</span>, ViewDebug.HierarchyTraceType.ON_LAYOUT);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        onLayout(changed, l, t, r, b);  </span><br><span class=\"line\">        mPrivateFlags &amp;= ~LAYOUT_REQUIRED;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mOnLayoutChangeListeners != <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">            ArrayList&lt;OnLayoutChangeListener&gt; listenersCopy =  </span><br><span class=\"line\">                    (ArrayList&lt;OnLayoutChangeListener&gt;) mOnLayoutChangeListeners.clone();  </span><br><span class=\"line\">            <span class=\"keyword\">int</span> numListeners = listenersCopy.size();  </span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numListeners; ++i) &#123;  </span><br><span class=\"line\">                listenersCopy.get(i).onLayoutChange(<span class=\"keyword\">this</span>, l, t, r, b, oldL, oldT, oldR, oldB);  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    mPrivateFlags &amp;= ~FORCE_LAYOUT;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过setFrame()确定四个顶点的位置，进而确定View在父容器中的位置。</p>\n<p>在View的默认实现中，View的测量宽/高和最终宽/高是相等的，只不过测量宽/高形成于View的measure过程，而最终宽/高形成于View的layout过程，即两者的赋值时机不同，测量宽/高的赋值时机稍微早一些。多数情况下可以认为View的测量宽/高就等于最终的宽/高，但对于在View的layout中改变了View的left、top、right、bottom四个属性时，得出的测量宽/高有可能和最终的宽/高不一致。</p>\n<h2 id=\"draw\"><a href=\"#draw\" class=\"headerlink\" title=\"draw\"></a>draw</h2><p>draw的过程很简单主要有以下几步：</p>\n<ul>\n<li>绘制背景(background.draw)</li>\n<li>绘制自己(onDraw)</li>\n<li>绘制children(dispatchDraw)</li>\n<li>绘制装饰(onDrawScrollBars)。</li>\n</ul>\n<p>源码如下<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void draw(Canvas canvas) &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">        / * Draw traversal performs several drawing steps which must be executed  </span><br><span class=\"line\">         * in the appropriate order:  </span><br><span class=\"line\">         *  </span><br><span class=\"line\">         *      1. Draw the background if need  </span><br><span class=\"line\">         *      2. If necessary, save the canvas' layers to prepare for fading  </span><br><span class=\"line\">         *      3. Draw view's content  </span><br><span class=\"line\">         *      4. Draw children (dispatchDraw)  </span><br><span class=\"line\">         *      5. If necessary, draw the fading edges and restore layers  </span><br><span class=\"line\">         *      6. Draw decorations (scrollbars for instance)  </span><br><span class=\"line\">         */  </span><br><span class=\"line\">  </span><br><span class=\"line\">       //Step 1, draw the background, if needed  </span><br><span class=\"line\">        if (!dirtyOpaque) &#123;  </span><br><span class=\"line\">            drawBackground(canvas);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">         // skip step 2 &amp; 5 if possible (common case)  </span><br><span class=\"line\">        final int viewFlags = mViewFlags;  </span><br><span class=\"line\">        if (!verticalEdges &amp;&amp; !horizontalEdges) &#123;  </span><br><span class=\"line\">            // Step 3, draw the content  </span><br><span class=\"line\">            if (!dirtyOpaque) onDraw(canvas);  </span><br><span class=\"line\">  </span><br><span class=\"line\">            // Step 4, draw the children  </span><br><span class=\"line\">            dispatchDraw(canvas);  </span><br><span class=\"line\">  </span><br><span class=\"line\">            // Step 6, draw decorations (scrollbars)  </span><br><span class=\"line\">            onDrawScrollBars(canvas);  </span><br><span class=\"line\">  </span><br><span class=\"line\">            if (mOverlay != null &amp;&amp; !mOverlay.isEmpty()) &#123;  </span><br><span class=\"line\">                mOverlay.getOverlayView().dispatchDraw(canvas);  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">            // we're done...  </span><br><span class=\"line\">            return;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">        // Step 2, save the canvas' layers  </span><br><span class=\"line\">        ...  </span><br><span class=\"line\">  </span><br><span class=\"line\">        // Step 3, draw the content  </span><br><span class=\"line\">        if (!dirtyOpaque)   </span><br><span class=\"line\">            onDraw(canvas);  </span><br><span class=\"line\">  </span><br><span class=\"line\">        // Step 4, draw the children  </span><br><span class=\"line\">        dispatchDraw(canvas);  </span><br><span class=\"line\">  </span><br><span class=\"line\">        // Step 5, draw the fade effect and restore layers  </span><br><span class=\"line\">  </span><br><span class=\"line\">        // Step 6, draw decorations (scrollbars)  </span><br><span class=\"line\">        onDrawScrollBars(canvas);  </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>注：</p>\n<ul>\n<li>View有一个特殊的方法setWillNotDraw，如果一个View不需要绘制任何内容，设置这个标记位true后，系统会进行优化。默认情况下，View没有启用这个优化标记位，但是ViewGroup会默认启用这个优化标记位。</li>\n<li>这个标记位对实际开发的意义是：如果自定义控件继承于ViewGroup并且本身不具备绘制功能时，就可以开启这个标记位从而便于系统进行后续的优化。当明确知道一个ViewGroup需要通过onDraw来绘制内容时，需要显示地关闭WILL_NOT_DRAW这个标记位。</li>\n</ul>\n<p>欢迎转载，转载请注明出处<a href=\"http://sparkyuan.me/\">http://sparkyuan.me/</a></p>"},{"title":"View事件分发机制","_content":"点击事件的事件分发就是对MotionEvent事件的分发过程，当一个MotionEvent产生了以后，系统需要把这个事件传递给一个具体的View，而这个传递的过程就是分发的过程。\n<!-- more -->\n\n# 介绍\n点击事件的事件分发就是对MotionEvent事件的分发过程，当一个MotionEvent产生了以后，系统需要把这个事件传递给一个具体的View，而这个传递的过程就是分发的过程。\n\n# 涉及到的三个方法\n\n- dispatchTouchEvent：用来进行事件的分发，如果事件能够传递给当前View，那么此方法一定会被调用，返回结果受当前View的onTouchEvent和View的dispatchTouchEvent方法的影响，表示是否当消耗当前事件\n- onInterceptTouchEvent：用来判断是否拦截某个事件，如果当前View拦截了某个事件，那么在同一个事件序列当中，此方法不会被再次调用，返回结果表示是否拦截当前事件；\n- onTouchEvent：在dispatchTouchEvent方法中调用，用来处理点击事件，返回结果表示是否消耗当前事件，如果不消耗，则在同一个事件序列中，当前View无法再次接收到事件。\n\n## 三个方法之间的关系\n\n```java\npublic boolean dispatchTouchEvent(MotionEvent ev) { \n    boolean consume = false;\n    if(onInterceptTouchEvent(ev)) { \n        consume = onTouchEvent(ev);\n    } else { \n        consume = child.dispatchTouchEvent(ev); \n    }\n    return consume; \n}\n```\n\n上面的伪代码很好的描述了三者之间的关系。如果当前View拦截事件，就交给自己的onTouchEvent去处理，否则就传给子View，直到事件被最终处理。\n\n# 事件分发顺序\n当一个点击事件产生后，它的传递过程如下：Activity -> Window -> View。如果View的onTouchEvent返回false，那么它的父容器onTouchEvent将会被调用，以此类推，最终将由Activity的onTouchEvent处理。\n\n## Activity对事件的分发过程\n**Activity -> Window -> DecorView。**\n\nWindows是一个抽象类，可以控制**顶级View**的外观和行为策略，PhoneWindow是这个类的唯一个实现。\nDecorView就是当前界面的底层容器，即setContentView所设置的View是它的一个子View。\n\n## 顶级View对点击事件的分发过程\n\n**ViewGroup -> dispatchTouchEvent -> onInterceptTouchEvent -> onTouch or onTouchEvent**\n\n顶级View一般都是一个ViewGroup。拦截事件之后，如果ViewGroup设置了mOnTouchListener，则Listener里的onTouch方法会屏蔽掉onTouchEvent。如果onTouchEvent设置了mOnClickListener，则Listener里的onClick会被调用。如果ViewGroup没有拦截则传给子View直到整个事件分发完成。\n\n##View对点击事件的处理过程\n如果View设置了mOnTouchListener，则Listener里的onTouch方法会屏蔽掉onTouchEvent。如果onTouchEvent设置了mOnClickListener，则Listener里的onClick会被调用。\nView没有onInterceptTouchEvent方法，一旦有点击事件传递给他，他就会处理。\n\n注：上面只是描述了事件分发过程的原理，关于源码的分析请参考书本的相应章节。\n\n欢迎转载，转载请注明出处[http://sparkyuan.github.io/](http://sparkyuan.github.io/)","source":"_posts/View事件分发机制.md","raw":"title: View事件分发机制\ncategories:\n- Android\n- Android开发艺术探索笔记\ntags:\n- Android\n- View\n- 事件分发机制\n---\n点击事件的事件分发就是对MotionEvent事件的分发过程，当一个MotionEvent产生了以后，系统需要把这个事件传递给一个具体的View，而这个传递的过程就是分发的过程。\n<!-- more -->\n\n# 介绍\n点击事件的事件分发就是对MotionEvent事件的分发过程，当一个MotionEvent产生了以后，系统需要把这个事件传递给一个具体的View，而这个传递的过程就是分发的过程。\n\n# 涉及到的三个方法\n\n- dispatchTouchEvent：用来进行事件的分发，如果事件能够传递给当前View，那么此方法一定会被调用，返回结果受当前View的onTouchEvent和View的dispatchTouchEvent方法的影响，表示是否当消耗当前事件\n- onInterceptTouchEvent：用来判断是否拦截某个事件，如果当前View拦截了某个事件，那么在同一个事件序列当中，此方法不会被再次调用，返回结果表示是否拦截当前事件；\n- onTouchEvent：在dispatchTouchEvent方法中调用，用来处理点击事件，返回结果表示是否消耗当前事件，如果不消耗，则在同一个事件序列中，当前View无法再次接收到事件。\n\n## 三个方法之间的关系\n\n```java\npublic boolean dispatchTouchEvent(MotionEvent ev) { \n    boolean consume = false;\n    if(onInterceptTouchEvent(ev)) { \n        consume = onTouchEvent(ev);\n    } else { \n        consume = child.dispatchTouchEvent(ev); \n    }\n    return consume; \n}\n```\n\n上面的伪代码很好的描述了三者之间的关系。如果当前View拦截事件，就交给自己的onTouchEvent去处理，否则就传给子View，直到事件被最终处理。\n\n# 事件分发顺序\n当一个点击事件产生后，它的传递过程如下：Activity -> Window -> View。如果View的onTouchEvent返回false，那么它的父容器onTouchEvent将会被调用，以此类推，最终将由Activity的onTouchEvent处理。\n\n## Activity对事件的分发过程\n**Activity -> Window -> DecorView。**\n\nWindows是一个抽象类，可以控制**顶级View**的外观和行为策略，PhoneWindow是这个类的唯一个实现。\nDecorView就是当前界面的底层容器，即setContentView所设置的View是它的一个子View。\n\n## 顶级View对点击事件的分发过程\n\n**ViewGroup -> dispatchTouchEvent -> onInterceptTouchEvent -> onTouch or onTouchEvent**\n\n顶级View一般都是一个ViewGroup。拦截事件之后，如果ViewGroup设置了mOnTouchListener，则Listener里的onTouch方法会屏蔽掉onTouchEvent。如果onTouchEvent设置了mOnClickListener，则Listener里的onClick会被调用。如果ViewGroup没有拦截则传给子View直到整个事件分发完成。\n\n##View对点击事件的处理过程\n如果View设置了mOnTouchListener，则Listener里的onTouch方法会屏蔽掉onTouchEvent。如果onTouchEvent设置了mOnClickListener，则Listener里的onClick会被调用。\nView没有onInterceptTouchEvent方法，一旦有点击事件传递给他，他就会处理。\n\n注：上面只是描述了事件分发过程的原理，关于源码的分析请参考书本的相应章节。\n\n欢迎转载，转载请注明出处[http://sparkyuan.github.io/](http://sparkyuan.github.io/)","slug":"View事件分发机制","published":1,"date":"2016-03-12T05:28:32.363Z","updated":"2016-03-12T05:28:32.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilop1put0008qcmy0pt641u8","content":"<p>点击事件的事件分发就是对MotionEvent事件的分发过程，当一个MotionEvent产生了以后，系统需要把这个事件传递给一个具体的View，而这个传递的过程就是分发的过程。<br><a id=\"more\"></a></p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>点击事件的事件分发就是对MotionEvent事件的分发过程，当一个MotionEvent产生了以后，系统需要把这个事件传递给一个具体的View，而这个传递的过程就是分发的过程。</p>\n<h1 id=\"涉及到的三个方法\"><a href=\"#涉及到的三个方法\" class=\"headerlink\" title=\"涉及到的三个方法\"></a>涉及到的三个方法</h1><ul>\n<li>dispatchTouchEvent：用来进行事件的分发，如果事件能够传递给当前View，那么此方法一定会被调用，返回结果受当前View的onTouchEvent和View的dispatchTouchEvent方法的影响，表示是否当消耗当前事件</li>\n<li>onInterceptTouchEvent：用来判断是否拦截某个事件，如果当前View拦截了某个事件，那么在同一个事件序列当中，此方法不会被再次调用，返回结果表示是否拦截当前事件；</li>\n<li>onTouchEvent：在dispatchTouchEvent方法中调用，用来处理点击事件，返回结果表示是否消耗当前事件，如果不消耗，则在同一个事件序列中，当前View无法再次接收到事件。</li>\n</ul>\n<h2 id=\"三个方法之间的关系\"><a href=\"#三个方法之间的关系\" class=\"headerlink\" title=\"三个方法之间的关系\"></a>三个方法之间的关系</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> consume = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(onInterceptTouchEvent(ev)) &#123; </span><br><span class=\"line\">        consume = onTouchEvent(ev);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\">        consume = child.dispatchTouchEvent(ev); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> consume; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的伪代码很好的描述了三者之间的关系。如果当前View拦截事件，就交给自己的onTouchEvent去处理，否则就传给子View，直到事件被最终处理。</p>\n<h1 id=\"事件分发顺序\"><a href=\"#事件分发顺序\" class=\"headerlink\" title=\"事件分发顺序\"></a>事件分发顺序</h1><p>当一个点击事件产生后，它的传递过程如下：Activity -&gt; Window -&gt; View。如果View的onTouchEvent返回false，那么它的父容器onTouchEvent将会被调用，以此类推，最终将由Activity的onTouchEvent处理。</p>\n<h2 id=\"Activity对事件的分发过程\"><a href=\"#Activity对事件的分发过程\" class=\"headerlink\" title=\"Activity对事件的分发过程\"></a>Activity对事件的分发过程</h2><p><strong>Activity -&gt; Window -&gt; DecorView。</strong></p>\n<p>Windows是一个抽象类，可以控制<strong>顶级View</strong>的外观和行为策略，PhoneWindow是这个类的唯一个实现。<br>DecorView就是当前界面的底层容器，即setContentView所设置的View是它的一个子View。</p>\n<h2 id=\"顶级View对点击事件的分发过程\"><a href=\"#顶级View对点击事件的分发过程\" class=\"headerlink\" title=\"顶级View对点击事件的分发过程\"></a>顶级View对点击事件的分发过程</h2><p><strong>ViewGroup -&gt; dispatchTouchEvent -&gt; onInterceptTouchEvent -&gt; onTouch or onTouchEvent</strong></p>\n<p>顶级View一般都是一个ViewGroup。拦截事件之后，如果ViewGroup设置了mOnTouchListener，则Listener里的onTouch方法会屏蔽掉onTouchEvent。如果onTouchEvent设置了mOnClickListener，则Listener里的onClick会被调用。如果ViewGroup没有拦截则传给子View直到整个事件分发完成。</p>\n<p>##View对点击事件的处理过程<br>如果View设置了mOnTouchListener，则Listener里的onTouch方法会屏蔽掉onTouchEvent。如果onTouchEvent设置了mOnClickListener，则Listener里的onClick会被调用。<br>View没有onInterceptTouchEvent方法，一旦有点击事件传递给他，他就会处理。</p>\n<p>注：上面只是描述了事件分发过程的原理，关于源码的分析请参考书本的相应章节。</p>\n<p>欢迎转载，转载请注明出处<a href=\"http://sparkyuan.github.io/\">http://sparkyuan.github.io/</a></p>\n","excerpt":"<p>点击事件的事件分发就是对MotionEvent事件的分发过程，当一个MotionEvent产生了以后，系统需要把这个事件传递给一个具体的View，而这个传递的过程就是分发的过程。<br>","more":"</p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>点击事件的事件分发就是对MotionEvent事件的分发过程，当一个MotionEvent产生了以后，系统需要把这个事件传递给一个具体的View，而这个传递的过程就是分发的过程。</p>\n<h1 id=\"涉及到的三个方法\"><a href=\"#涉及到的三个方法\" class=\"headerlink\" title=\"涉及到的三个方法\"></a>涉及到的三个方法</h1><ul>\n<li>dispatchTouchEvent：用来进行事件的分发，如果事件能够传递给当前View，那么此方法一定会被调用，返回结果受当前View的onTouchEvent和View的dispatchTouchEvent方法的影响，表示是否当消耗当前事件</li>\n<li>onInterceptTouchEvent：用来判断是否拦截某个事件，如果当前View拦截了某个事件，那么在同一个事件序列当中，此方法不会被再次调用，返回结果表示是否拦截当前事件；</li>\n<li>onTouchEvent：在dispatchTouchEvent方法中调用，用来处理点击事件，返回结果表示是否消耗当前事件，如果不消耗，则在同一个事件序列中，当前View无法再次接收到事件。</li>\n</ul>\n<h2 id=\"三个方法之间的关系\"><a href=\"#三个方法之间的关系\" class=\"headerlink\" title=\"三个方法之间的关系\"></a>三个方法之间的关系</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> consume = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(onInterceptTouchEvent(ev)) &#123; </span><br><span class=\"line\">        consume = onTouchEvent(ev);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123; </span><br><span class=\"line\">        consume = child.dispatchTouchEvent(ev); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> consume; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面的伪代码很好的描述了三者之间的关系。如果当前View拦截事件，就交给自己的onTouchEvent去处理，否则就传给子View，直到事件被最终处理。</p>\n<h1 id=\"事件分发顺序\"><a href=\"#事件分发顺序\" class=\"headerlink\" title=\"事件分发顺序\"></a>事件分发顺序</h1><p>当一个点击事件产生后，它的传递过程如下：Activity -&gt; Window -&gt; View。如果View的onTouchEvent返回false，那么它的父容器onTouchEvent将会被调用，以此类推，最终将由Activity的onTouchEvent处理。</p>\n<h2 id=\"Activity对事件的分发过程\"><a href=\"#Activity对事件的分发过程\" class=\"headerlink\" title=\"Activity对事件的分发过程\"></a>Activity对事件的分发过程</h2><p><strong>Activity -&gt; Window -&gt; DecorView。</strong></p>\n<p>Windows是一个抽象类，可以控制<strong>顶级View</strong>的外观和行为策略，PhoneWindow是这个类的唯一个实现。<br>DecorView就是当前界面的底层容器，即setContentView所设置的View是它的一个子View。</p>\n<h2 id=\"顶级View对点击事件的分发过程\"><a href=\"#顶级View对点击事件的分发过程\" class=\"headerlink\" title=\"顶级View对点击事件的分发过程\"></a>顶级View对点击事件的分发过程</h2><p><strong>ViewGroup -&gt; dispatchTouchEvent -&gt; onInterceptTouchEvent -&gt; onTouch or onTouchEvent</strong></p>\n<p>顶级View一般都是一个ViewGroup。拦截事件之后，如果ViewGroup设置了mOnTouchListener，则Listener里的onTouch方法会屏蔽掉onTouchEvent。如果onTouchEvent设置了mOnClickListener，则Listener里的onClick会被调用。如果ViewGroup没有拦截则传给子View直到整个事件分发完成。</p>\n<p>##View对点击事件的处理过程<br>如果View设置了mOnTouchListener，则Listener里的onTouch方法会屏蔽掉onTouchEvent。如果onTouchEvent设置了mOnClickListener，则Listener里的onClick会被调用。<br>View没有onInterceptTouchEvent方法，一旦有点击事件传递给他，他就会处理。</p>\n<p>注：上面只是描述了事件分发过程的原理，关于源码的分析请参考书本的相应章节。</p>\n<p>欢迎转载，转载请注明出处<a href=\"http://sparkyuan.github.io/\">http://sparkyuan.github.io/</a></p>"},{"title":"ViewRoot，DecorView，MeasureSpec和View的工作原理","_content":"View的绘制流程是从ViewRoot的performTraversals方法开始的，它经过measure、layout和draw三个过程才能最终将一个View绘制出来，其中measure用来测量View的宽和高，layout用来确定View在父容器中的放置位置，而draw则负责将View绘制在屏幕上。\n<!-- more -->\n\nView的绘制流程是从ViewRoot的performTraversals方法开始的，它经过measure、layout和draw三个过程才能最终将一个View绘制出来，其中measure用来测量View的宽和高，layout用来确定View在父容器中的放置位置，而draw则负责将View绘制在屏幕上。\n\n#ViewRoot和DecorView\n##ViewRoot\n- ViewRoot对应ViewRootImpl类，它是连接WindowManager和DecorView的纽带，View的三大流程均通过ViewRoot来完成。\n- ActivityThread中，Activity创建完成后，会将DecorView添加到Window中，同时创建ViewRootImpl对象，并建立两者的关联。\n\n##DecorView\n- DecorView作为顶级View，一般情况下它**内部**包含一个竖直方向的LinearLayout，在这个LinearLayout里面有上下两个部分（具体情况和Android版本及主体有关），上面的是标题栏，下面的是内容栏。在Activity中通过setContentView所设置的布局文件其实就是被加到内容栏之中的，而内容栏的id是content，在代码中可以通过ViewGroup content = （ViewGroup)findViewById(R.android.id.content)来得到content对应的layout。\n- DecorView其实是一个FrameLayout，View层的事件都先经过DecorView，然后才传递给我们的View。\n\n#MeasureSpec\n在测量过程中，系统会将**View的LayoutParams根据父容器所施加的规则转换成对应的MeasureSpec，然后再根据这个MeasureSpec来测量出View的宽和高。**测量出来的宽和高不一定等于View最终的宽和高。\nMeasureSpec将SpecMode和SpecSize打包成一个int值来避免过多的对象内存分配，高2位代表SpecMode，低30位代表SpecSize，SpecMode是指测量模式，而SpecSize是指在某种测量模式下的规格大小。\n\nSpecMode有三类：\n\n - UNSPECIFIED：父容器不对View有任何限制，要多大给多大，这种情况一般用于系统内部，表示一种测量状态\n - EXACTLY：父容器已经检测出View所需要的精确大小，这个时候View的最终大小就是SpecSize所指定的值。它对应于LayoutParams中的match_parent和具体的数值这两种模式\n - AT_MOST：父容器指定了一个可用大小即SpecSize，View的大小不能大于这个值，具体是什么值要看不同View的具体实现。它对应于LayoutParams中的wrap_content。\n\n#普通MeasureSpec的创建规则\n**对于普通View，其MeasureSpec由父容器的MeasureSpec和自身的LayoutParams来共同决定。**\n\n- 子View为精确宽高，无论父容器的MeasureSpec，子View的MeasureSpec都为精确值且遵循LayoutParams中的值。\n- 子View为match_parent时，如果父容器是精确模式，则子View也为精确模式且为父容器的剩余空间大小；如果父容器是最大模式，则子View也是最大模式且不会超过父容器的剩余空间。\n- 子View为wrap_content时，无论父View是精确还是最大模式，子View的模式总是最大模式，且不会超过父容器的剩余空间。\n\n#View的工作流程\n##measure\nViewGroup的measure方法会遍历每个子元素，并调用子元素内部的measure方法，measure源码如下：\n```java\n protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),\n                getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));\n    }\n```\n\n注：\n\n- getDefaultSize()返回MeasureSpec中的specSize，也就是View测量后的大小。\n- getSuggestedMinimumWidth()，View如果没有背景，那么返回android:minWidth这个属性指定的值，这个值可以为0；如果设置了背景，则返回背景的最小宽度和minWidth中的**最大值**。\n- getSuggestedMinimumHeight()，与getSuggestedMinimumWidth()类似。\n- 直接继承View的自定义控件需要重写onMeasure方法并设置wrap_content时的自身大小，否则在布局中使用wrap_content时就相当于使用match_parent。因为LayoutParams=wrap_content的情况下，MeasureSpec为AT_MOST，所以View的宽和高为父容器当前剩余的空间，这种效果与match_parent一致。**具体处理方法要根据需求灵活决定。**\n\n###如何得到View的宽和高\n\n在Activity的onCreate、onStart、onResume方法中均无法正确得到某个View的宽/高信息，这是因为View的measure过程和Activity的生命周期方法不是同步执行的，因此无法保证Activity执行了onCreate、onStart、onResume时某个View就已经测量完毕了，如果View还没有测量完毕，那么获得的宽/高就是0。\n\n可以通过如下四个方法来解决这个问题：\n\n- Activity或者View的onWindowFocusChanged方法（注意该方法会在Activity Pause和resume时被多次调用）\n- view.post(new Runnable( {@Overidde public void run(){})})，在run方法中获取。\n- ViewTreeObserver中的onGlobalLayoutListener中。\n- 手动调用View的measure方法。\n\n示例代码请参考原书P190页\n\n##layout\nlayout的作用是用来确定子视图在父视图中的位置。源码如下：\n\n```java\npublic void layout(int l, int t, int r, int b) {  \n    int oldL = mLeft;  \n    int oldT = mTop;  \n    int oldB = mBottom;  \n    int oldR = mRight;  \n    boolean changed = setFrame(l, t, r, b);  \n    if (changed || (mPrivateFlags & LAYOUT_REQUIRED) == LAYOUT_REQUIRED) {  \n        if (ViewDebug.TRACE_HIERARCHY) {  \n            ViewDebug.trace(this, ViewDebug.HierarchyTraceType.ON_LAYOUT);  \n        }  \n        onLayout(changed, l, t, r, b);  \n        mPrivateFlags &= ~LAYOUT_REQUIRED;  \n        if (mOnLayoutChangeListeners != null) {  \n            ArrayList<OnLayoutChangeListener> listenersCopy =  \n                    (ArrayList<OnLayoutChangeListener>) mOnLayoutChangeListeners.clone();  \n            int numListeners = listenersCopy.size();  \n            for (int i = 0; i < numListeners; ++i) {  \n                listenersCopy.get(i).onLayoutChange(this, l, t, r, b, oldL, oldT, oldR, oldB);  \n            }  \n        }  \n    }  \n    mPrivateFlags &= ~FORCE_LAYOUT;  \n}  \n```\n通过setFrame()确定四个顶点的位置，进而确定View在父容器中的位置。\n\n在View的默认实现中，View的测量宽/高和最终宽/高是相等的，只不过测量宽/高形成于View的measure过程，而最终宽/高形成于View的layout过程，即两者的赋值时机不同，测量宽/高的赋值时机稍微早一些。多数情况下可以认为View的测量宽/高就等于最终的宽/高，但对于在View的layout中改变了View的left、top、right、bottom四个属性时，得出的测量宽/高有可能和最终的宽/高不一致。\n\n##draw\ndraw的过程很简单主要有以下几步：\n\n- 绘制背景(background.draw)\n- 绘制自己(onDraw)\n- 绘制children(dispatchDraw)\n- 绘制装饰(onDrawScrollBars)。\n\n源码如下\n```java\npublic void draw(Canvas canvas) {  \n  \n        / * Draw traversal performs several drawing steps which must be executed  \n         * in the appropriate order:  \n         *  \n         *      1. Draw the background if need  \n         *      2. If necessary, save the canvas' layers to prepare for fading  \n         *      3. Draw view's content  \n         *      4. Draw children (dispatchDraw)  \n         *      5. If necessary, draw the fading edges and restore layers  \n         *      6. Draw decorations (scrollbars for instance)  \n         */  \n  \n       //Step 1, draw the background, if needed  \n        if (!dirtyOpaque) {  \n            drawBackground(canvas);  \n        }  \n  \n         // skip step 2 & 5 if possible (common case)  \n        final int viewFlags = mViewFlags;  \n        if (!verticalEdges && !horizontalEdges) {  \n            // Step 3, draw the content  \n            if (!dirtyOpaque) onDraw(canvas);  \n  \n            // Step 4, draw the children  \n            dispatchDraw(canvas);  \n  \n            // Step 6, draw decorations (scrollbars)  \n            onDrawScrollBars(canvas);  \n  \n            if (mOverlay != null && !mOverlay.isEmpty()) {  \n                mOverlay.getOverlayView().dispatchDraw(canvas);  \n            }  \n  \n            // we're done...  \n            return;  \n        }  \n  \n        // Step 2, save the canvas' layers  \n        ...  \n  \n        // Step 3, draw the content  \n        if (!dirtyOpaque)   \n            onDraw(canvas);  \n  \n        // Step 4, draw the children  \n        dispatchDraw(canvas);  \n  \n        // Step 5, draw the fade effect and restore layers  \n  \n        // Step 6, draw decorations (scrollbars)  \n        onDrawScrollBars(canvas);  \n    }  \n```\n\n注：\n\n- View有一个特殊的方法setWillNotDraw，如果一个View不需要绘制任何内容，设置这个标记位true后，系统会进行优化。默认情况下，View没有启用这个优化标记位，但是ViewGroup会默认启用这个优化标记位。\n- 这个标记位对实际开发的意义是：如果自定义控件继承于ViewGroup并且本身不具备绘制功能时，就可以开启这个标记位从而便于系统进行后续的优化。当明确知道一个ViewGroup需要通过onDraw来绘制内容时，需要显示地关闭WILL_NOT_DRAW这个标记位。\n","source":"_posts/ViewRoot，DecorView，MeasureSpec和View的工作原理.md","raw":"title: ViewRoot，DecorView，MeasureSpec和View的工作原理\ncategories:\n- Android\ntags:\n- Android\n- ViewRoot\n- DecorView\n- MeasureSpec和View的工作原理\n---\nView的绘制流程是从ViewRoot的performTraversals方法开始的，它经过measure、layout和draw三个过程才能最终将一个View绘制出来，其中measure用来测量View的宽和高，layout用来确定View在父容器中的放置位置，而draw则负责将View绘制在屏幕上。\n<!-- more -->\n\nView的绘制流程是从ViewRoot的performTraversals方法开始的，它经过measure、layout和draw三个过程才能最终将一个View绘制出来，其中measure用来测量View的宽和高，layout用来确定View在父容器中的放置位置，而draw则负责将View绘制在屏幕上。\n\n#ViewRoot和DecorView\n##ViewRoot\n- ViewRoot对应ViewRootImpl类，它是连接WindowManager和DecorView的纽带，View的三大流程均通过ViewRoot来完成。\n- ActivityThread中，Activity创建完成后，会将DecorView添加到Window中，同时创建ViewRootImpl对象，并建立两者的关联。\n\n##DecorView\n- DecorView作为顶级View，一般情况下它**内部**包含一个竖直方向的LinearLayout，在这个LinearLayout里面有上下两个部分（具体情况和Android版本及主体有关），上面的是标题栏，下面的是内容栏。在Activity中通过setContentView所设置的布局文件其实就是被加到内容栏之中的，而内容栏的id是content，在代码中可以通过ViewGroup content = （ViewGroup)findViewById(R.android.id.content)来得到content对应的layout。\n- DecorView其实是一个FrameLayout，View层的事件都先经过DecorView，然后才传递给我们的View。\n\n#MeasureSpec\n在测量过程中，系统会将**View的LayoutParams根据父容器所施加的规则转换成对应的MeasureSpec，然后再根据这个MeasureSpec来测量出View的宽和高。**测量出来的宽和高不一定等于View最终的宽和高。\nMeasureSpec将SpecMode和SpecSize打包成一个int值来避免过多的对象内存分配，高2位代表SpecMode，低30位代表SpecSize，SpecMode是指测量模式，而SpecSize是指在某种测量模式下的规格大小。\n\nSpecMode有三类：\n\n - UNSPECIFIED：父容器不对View有任何限制，要多大给多大，这种情况一般用于系统内部，表示一种测量状态\n - EXACTLY：父容器已经检测出View所需要的精确大小，这个时候View的最终大小就是SpecSize所指定的值。它对应于LayoutParams中的match_parent和具体的数值这两种模式\n - AT_MOST：父容器指定了一个可用大小即SpecSize，View的大小不能大于这个值，具体是什么值要看不同View的具体实现。它对应于LayoutParams中的wrap_content。\n\n#普通MeasureSpec的创建规则\n**对于普通View，其MeasureSpec由父容器的MeasureSpec和自身的LayoutParams来共同决定。**\n\n- 子View为精确宽高，无论父容器的MeasureSpec，子View的MeasureSpec都为精确值且遵循LayoutParams中的值。\n- 子View为match_parent时，如果父容器是精确模式，则子View也为精确模式且为父容器的剩余空间大小；如果父容器是最大模式，则子View也是最大模式且不会超过父容器的剩余空间。\n- 子View为wrap_content时，无论父View是精确还是最大模式，子View的模式总是最大模式，且不会超过父容器的剩余空间。\n\n#View的工作流程\n##measure\nViewGroup的measure方法会遍历每个子元素，并调用子元素内部的measure方法，measure源码如下：\n```java\n protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),\n                getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));\n    }\n```\n\n注：\n\n- getDefaultSize()返回MeasureSpec中的specSize，也就是View测量后的大小。\n- getSuggestedMinimumWidth()，View如果没有背景，那么返回android:minWidth这个属性指定的值，这个值可以为0；如果设置了背景，则返回背景的最小宽度和minWidth中的**最大值**。\n- getSuggestedMinimumHeight()，与getSuggestedMinimumWidth()类似。\n- 直接继承View的自定义控件需要重写onMeasure方法并设置wrap_content时的自身大小，否则在布局中使用wrap_content时就相当于使用match_parent。因为LayoutParams=wrap_content的情况下，MeasureSpec为AT_MOST，所以View的宽和高为父容器当前剩余的空间，这种效果与match_parent一致。**具体处理方法要根据需求灵活决定。**\n\n###如何得到View的宽和高\n\n在Activity的onCreate、onStart、onResume方法中均无法正确得到某个View的宽/高信息，这是因为View的measure过程和Activity的生命周期方法不是同步执行的，因此无法保证Activity执行了onCreate、onStart、onResume时某个View就已经测量完毕了，如果View还没有测量完毕，那么获得的宽/高就是0。\n\n可以通过如下四个方法来解决这个问题：\n\n- Activity或者View的onWindowFocusChanged方法（注意该方法会在Activity Pause和resume时被多次调用）\n- view.post(new Runnable( {@Overidde public void run(){})})，在run方法中获取。\n- ViewTreeObserver中的onGlobalLayoutListener中。\n- 手动调用View的measure方法。\n\n示例代码请参考原书P190页\n\n##layout\nlayout的作用是用来确定子视图在父视图中的位置。源码如下：\n\n```java\npublic void layout(int l, int t, int r, int b) {  \n    int oldL = mLeft;  \n    int oldT = mTop;  \n    int oldB = mBottom;  \n    int oldR = mRight;  \n    boolean changed = setFrame(l, t, r, b);  \n    if (changed || (mPrivateFlags & LAYOUT_REQUIRED) == LAYOUT_REQUIRED) {  \n        if (ViewDebug.TRACE_HIERARCHY) {  \n            ViewDebug.trace(this, ViewDebug.HierarchyTraceType.ON_LAYOUT);  \n        }  \n        onLayout(changed, l, t, r, b);  \n        mPrivateFlags &= ~LAYOUT_REQUIRED;  \n        if (mOnLayoutChangeListeners != null) {  \n            ArrayList<OnLayoutChangeListener> listenersCopy =  \n                    (ArrayList<OnLayoutChangeListener>) mOnLayoutChangeListeners.clone();  \n            int numListeners = listenersCopy.size();  \n            for (int i = 0; i < numListeners; ++i) {  \n                listenersCopy.get(i).onLayoutChange(this, l, t, r, b, oldL, oldT, oldR, oldB);  \n            }  \n        }  \n    }  \n    mPrivateFlags &= ~FORCE_LAYOUT;  \n}  \n```\n通过setFrame()确定四个顶点的位置，进而确定View在父容器中的位置。\n\n在View的默认实现中，View的测量宽/高和最终宽/高是相等的，只不过测量宽/高形成于View的measure过程，而最终宽/高形成于View的layout过程，即两者的赋值时机不同，测量宽/高的赋值时机稍微早一些。多数情况下可以认为View的测量宽/高就等于最终的宽/高，但对于在View的layout中改变了View的left、top、right、bottom四个属性时，得出的测量宽/高有可能和最终的宽/高不一致。\n\n##draw\ndraw的过程很简单主要有以下几步：\n\n- 绘制背景(background.draw)\n- 绘制自己(onDraw)\n- 绘制children(dispatchDraw)\n- 绘制装饰(onDrawScrollBars)。\n\n源码如下\n```java\npublic void draw(Canvas canvas) {  \n  \n        / * Draw traversal performs several drawing steps which must be executed  \n         * in the appropriate order:  \n         *  \n         *      1. Draw the background if need  \n         *      2. If necessary, save the canvas' layers to prepare for fading  \n         *      3. Draw view's content  \n         *      4. Draw children (dispatchDraw)  \n         *      5. If necessary, draw the fading edges and restore layers  \n         *      6. Draw decorations (scrollbars for instance)  \n         */  \n  \n       //Step 1, draw the background, if needed  \n        if (!dirtyOpaque) {  \n            drawBackground(canvas);  \n        }  \n  \n         // skip step 2 & 5 if possible (common case)  \n        final int viewFlags = mViewFlags;  \n        if (!verticalEdges && !horizontalEdges) {  \n            // Step 3, draw the content  \n            if (!dirtyOpaque) onDraw(canvas);  \n  \n            // Step 4, draw the children  \n            dispatchDraw(canvas);  \n  \n            // Step 6, draw decorations (scrollbars)  \n            onDrawScrollBars(canvas);  \n  \n            if (mOverlay != null && !mOverlay.isEmpty()) {  \n                mOverlay.getOverlayView().dispatchDraw(canvas);  \n            }  \n  \n            // we're done...  \n            return;  \n        }  \n  \n        // Step 2, save the canvas' layers  \n        ...  \n  \n        // Step 3, draw the content  \n        if (!dirtyOpaque)   \n            onDraw(canvas);  \n  \n        // Step 4, draw the children  \n        dispatchDraw(canvas);  \n  \n        // Step 5, draw the fade effect and restore layers  \n  \n        // Step 6, draw decorations (scrollbars)  \n        onDrawScrollBars(canvas);  \n    }  \n```\n\n注：\n\n- View有一个特殊的方法setWillNotDraw，如果一个View不需要绘制任何内容，设置这个标记位true后，系统会进行优化。默认情况下，View没有启用这个优化标记位，但是ViewGroup会默认启用这个优化标记位。\n- 这个标记位对实际开发的意义是：如果自定义控件继承于ViewGroup并且本身不具备绘制功能时，就可以开启这个标记位从而便于系统进行后续的优化。当明确知道一个ViewGroup需要通过onDraw来绘制内容时，需要显示地关闭WILL_NOT_DRAW这个标记位。\n","slug":"ViewRoot，DecorView，MeasureSpec和View的工作原理","published":1,"date":"2016-03-12T05:28:32.363Z","updated":"2016-03-12T05:28:32.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilop1put000aqcmybdg34k34","content":"<p>View的绘制流程是从ViewRoot的performTraversals方法开始的，它经过measure、layout和draw三个过程才能最终将一个View绘制出来，其中measure用来测量View的宽和高，layout用来确定View在父容器中的放置位置，而draw则负责将View绘制在屏幕上。<br><a id=\"more\"></a></p>\n<p>View的绘制流程是从ViewRoot的performTraversals方法开始的，它经过measure、layout和draw三个过程才能最终将一个View绘制出来，其中measure用来测量View的宽和高，layout用来确定View在父容器中的放置位置，而draw则负责将View绘制在屏幕上。</p>\n<p>#ViewRoot和DecorView</p>\n<p>##ViewRoot</p>\n<ul>\n<li>ViewRoot对应ViewRootImpl类，它是连接WindowManager和DecorView的纽带，View的三大流程均通过ViewRoot来完成。</li>\n<li>ActivityThread中，Activity创建完成后，会将DecorView添加到Window中，同时创建ViewRootImpl对象，并建立两者的关联。</li>\n</ul>\n<p>##DecorView</p>\n<ul>\n<li>DecorView作为顶级View，一般情况下它<strong>内部</strong>包含一个竖直方向的LinearLayout，在这个LinearLayout里面有上下两个部分（具体情况和Android版本及主体有关），上面的是标题栏，下面的是内容栏。在Activity中通过setContentView所设置的布局文件其实就是被加到内容栏之中的，而内容栏的id是content，在代码中可以通过ViewGroup content = （ViewGroup)findViewById(R.android.id.content)来得到content对应的layout。</li>\n<li>DecorView其实是一个FrameLayout，View层的事件都先经过DecorView，然后才传递给我们的View。</li>\n</ul>\n<p>#MeasureSpec<br>在测量过程中，系统会将<strong>View的LayoutParams根据父容器所施加的规则转换成对应的MeasureSpec，然后再根据这个MeasureSpec来测量出View的宽和高。</strong>测量出来的宽和高不一定等于View最终的宽和高。<br>MeasureSpec将SpecMode和SpecSize打包成一个int值来避免过多的对象内存分配，高2位代表SpecMode，低30位代表SpecSize，SpecMode是指测量模式，而SpecSize是指在某种测量模式下的规格大小。</p>\n<p>SpecMode有三类：</p>\n<ul>\n<li>UNSPECIFIED：父容器不对View有任何限制，要多大给多大，这种情况一般用于系统内部，表示一种测量状态</li>\n<li>EXACTLY：父容器已经检测出View所需要的精确大小，这个时候View的最终大小就是SpecSize所指定的值。它对应于LayoutParams中的match_parent和具体的数值这两种模式</li>\n<li>AT_MOST：父容器指定了一个可用大小即SpecSize，View的大小不能大于这个值，具体是什么值要看不同View的具体实现。它对应于LayoutParams中的wrap_content。</li>\n</ul>\n<p>#普通MeasureSpec的创建规则<br><strong>对于普通View，其MeasureSpec由父容器的MeasureSpec和自身的LayoutParams来共同决定。</strong></p>\n<ul>\n<li>子View为精确宽高，无论父容器的MeasureSpec，子View的MeasureSpec都为精确值且遵循LayoutParams中的值。</li>\n<li>子View为match_parent时，如果父容器是精确模式，则子View也为精确模式且为父容器的剩余空间大小；如果父容器是最大模式，则子View也是最大模式且不会超过父容器的剩余空间。</li>\n<li>子View为wrap_content时，无论父View是精确还是最大模式，子View的模式总是最大模式，且不会超过父容器的剩余空间。</li>\n</ul>\n<p>#View的工作流程</p>\n<p>##measure<br>ViewGroup的measure方法会遍历每个子元素，并调用子元素内部的measure方法，measure源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">       setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),</span><br><span class=\"line\">               getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>注：</p>\n<ul>\n<li>getDefaultSize()返回MeasureSpec中的specSize，也就是View测量后的大小。</li>\n<li>getSuggestedMinimumWidth()，View如果没有背景，那么返回android:minWidth这个属性指定的值，这个值可以为0；如果设置了背景，则返回背景的最小宽度和minWidth中的<strong>最大值</strong>。</li>\n<li>getSuggestedMinimumHeight()，与getSuggestedMinimumWidth()类似。</li>\n<li>直接继承View的自定义控件需要重写onMeasure方法并设置wrap_content时的自身大小，否则在布局中使用wrap_content时就相当于使用match_parent。因为LayoutParams=wrap_content的情况下，MeasureSpec为AT_MOST，所以View的宽和高为父容器当前剩余的空间，这种效果与match_parent一致。<strong>具体处理方法要根据需求灵活决定。</strong></li>\n</ul>\n<p>###如何得到View的宽和高</p>\n<p>在Activity的onCreate、onStart、onResume方法中均无法正确得到某个View的宽/高信息，这是因为View的measure过程和Activity的生命周期方法不是同步执行的，因此无法保证Activity执行了onCreate、onStart、onResume时某个View就已经测量完毕了，如果View还没有测量完毕，那么获得的宽/高就是0。</p>\n<p>可以通过如下四个方法来解决这个问题：</p>\n<ul>\n<li>Activity或者View的onWindowFocusChanged方法（注意该方法会在Activity Pause和resume时被多次调用）</li>\n<li>view.post(new Runnable( {@Overidde public void run(){})})，在run方法中获取。</li>\n<li>ViewTreeObserver中的onGlobalLayoutListener中。</li>\n<li>手动调用View的measure方法。</li>\n</ul>\n<p>示例代码请参考原书P190页</p>\n<p>##layout<br>layout的作用是用来确定子视图在父视图中的位置。源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">layout</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldL = mLeft;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldT = mTop;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldB = mBottom;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldR = mRight;  </span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> changed = setFrame(l, t, r, b);  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (changed || (mPrivateFlags &amp; LAYOUT_REQUIRED) == LAYOUT_REQUIRED) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ViewDebug.TRACE_HIERARCHY) &#123;  </span><br><span class=\"line\">            ViewDebug.trace(<span class=\"keyword\">this</span>, ViewDebug.HierarchyTraceType.ON_LAYOUT);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        onLayout(changed, l, t, r, b);  </span><br><span class=\"line\">        mPrivateFlags &amp;= ~LAYOUT_REQUIRED;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mOnLayoutChangeListeners != <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">            ArrayList&lt;OnLayoutChangeListener&gt; listenersCopy =  </span><br><span class=\"line\">                    (ArrayList&lt;OnLayoutChangeListener&gt;) mOnLayoutChangeListeners.clone();  </span><br><span class=\"line\">            <span class=\"keyword\">int</span> numListeners = listenersCopy.size();  </span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numListeners; ++i) &#123;  </span><br><span class=\"line\">                listenersCopy.get(i).onLayoutChange(<span class=\"keyword\">this</span>, l, t, r, b, oldL, oldT, oldR, oldB);  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    mPrivateFlags &amp;= ~FORCE_LAYOUT;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过setFrame()确定四个顶点的位置，进而确定View在父容器中的位置。</p>\n<p>在View的默认实现中，View的测量宽/高和最终宽/高是相等的，只不过测量宽/高形成于View的measure过程，而最终宽/高形成于View的layout过程，即两者的赋值时机不同，测量宽/高的赋值时机稍微早一些。多数情况下可以认为View的测量宽/高就等于最终的宽/高，但对于在View的layout中改变了View的left、top、right、bottom四个属性时，得出的测量宽/高有可能和最终的宽/高不一致。</p>\n<p>##draw<br>draw的过程很简单主要有以下几步：</p>\n<ul>\n<li>绘制背景(background.draw)</li>\n<li>绘制自己(onDraw)</li>\n<li>绘制children(dispatchDraw)</li>\n<li>绘制装饰(onDrawScrollBars)。</li>\n</ul>\n<p>源码如下<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void draw(Canvas canvas) &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">        / * Draw traversal performs several drawing steps which must be executed  </span><br><span class=\"line\">         * in the appropriate order:  </span><br><span class=\"line\">         *  </span><br><span class=\"line\">         *      1. Draw the background if need  </span><br><span class=\"line\">         *      2. If necessary, save the canvas' layers to prepare for fading  </span><br><span class=\"line\">         *      3. Draw view's content  </span><br><span class=\"line\">         *      4. Draw children (dispatchDraw)  </span><br><span class=\"line\">         *      5. If necessary, draw the fading edges and restore layers  </span><br><span class=\"line\">         *      6. Draw decorations (scrollbars for instance)  </span><br><span class=\"line\">         */  </span><br><span class=\"line\">  </span><br><span class=\"line\">       //Step 1, draw the background, if needed  </span><br><span class=\"line\">        if (!dirtyOpaque) &#123;  </span><br><span class=\"line\">            drawBackground(canvas);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">         // skip step 2 &amp; 5 if possible (common case)  </span><br><span class=\"line\">        final int viewFlags = mViewFlags;  </span><br><span class=\"line\">        if (!verticalEdges &amp;&amp; !horizontalEdges) &#123;  </span><br><span class=\"line\">            // Step 3, draw the content  </span><br><span class=\"line\">            if (!dirtyOpaque) onDraw(canvas);  </span><br><span class=\"line\">  </span><br><span class=\"line\">            // Step 4, draw the children  </span><br><span class=\"line\">            dispatchDraw(canvas);  </span><br><span class=\"line\">  </span><br><span class=\"line\">            // Step 6, draw decorations (scrollbars)  </span><br><span class=\"line\">            onDrawScrollBars(canvas);  </span><br><span class=\"line\">  </span><br><span class=\"line\">            if (mOverlay != null &amp;&amp; !mOverlay.isEmpty()) &#123;  </span><br><span class=\"line\">                mOverlay.getOverlayView().dispatchDraw(canvas);  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">            // we're done...  </span><br><span class=\"line\">            return;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">        // Step 2, save the canvas' layers  </span><br><span class=\"line\">        ...  </span><br><span class=\"line\">  </span><br><span class=\"line\">        // Step 3, draw the content  </span><br><span class=\"line\">        if (!dirtyOpaque)   </span><br><span class=\"line\">            onDraw(canvas);  </span><br><span class=\"line\">  </span><br><span class=\"line\">        // Step 4, draw the children  </span><br><span class=\"line\">        dispatchDraw(canvas);  </span><br><span class=\"line\">  </span><br><span class=\"line\">        // Step 5, draw the fade effect and restore layers  </span><br><span class=\"line\">  </span><br><span class=\"line\">        // Step 6, draw decorations (scrollbars)  </span><br><span class=\"line\">        onDrawScrollBars(canvas);  </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>注：</p>\n<ul>\n<li>View有一个特殊的方法setWillNotDraw，如果一个View不需要绘制任何内容，设置这个标记位true后，系统会进行优化。默认情况下，View没有启用这个优化标记位，但是ViewGroup会默认启用这个优化标记位。</li>\n<li>这个标记位对实际开发的意义是：如果自定义控件继承于ViewGroup并且本身不具备绘制功能时，就可以开启这个标记位从而便于系统进行后续的优化。当明确知道一个ViewGroup需要通过onDraw来绘制内容时，需要显示地关闭WILL_NOT_DRAW这个标记位。</li>\n</ul>\n","excerpt":"<p>View的绘制流程是从ViewRoot的performTraversals方法开始的，它经过measure、layout和draw三个过程才能最终将一个View绘制出来，其中measure用来测量View的宽和高，layout用来确定View在父容器中的放置位置，而draw则负责将View绘制在屏幕上。<br>","more":"</p>\n<p>View的绘制流程是从ViewRoot的performTraversals方法开始的，它经过measure、layout和draw三个过程才能最终将一个View绘制出来，其中measure用来测量View的宽和高，layout用来确定View在父容器中的放置位置，而draw则负责将View绘制在屏幕上。</p>\n<p>#ViewRoot和DecorView</p>\n<p>##ViewRoot</p>\n<ul>\n<li>ViewRoot对应ViewRootImpl类，它是连接WindowManager和DecorView的纽带，View的三大流程均通过ViewRoot来完成。</li>\n<li>ActivityThread中，Activity创建完成后，会将DecorView添加到Window中，同时创建ViewRootImpl对象，并建立两者的关联。</li>\n</ul>\n<p>##DecorView</p>\n<ul>\n<li>DecorView作为顶级View，一般情况下它<strong>内部</strong>包含一个竖直方向的LinearLayout，在这个LinearLayout里面有上下两个部分（具体情况和Android版本及主体有关），上面的是标题栏，下面的是内容栏。在Activity中通过setContentView所设置的布局文件其实就是被加到内容栏之中的，而内容栏的id是content，在代码中可以通过ViewGroup content = （ViewGroup)findViewById(R.android.id.content)来得到content对应的layout。</li>\n<li>DecorView其实是一个FrameLayout，View层的事件都先经过DecorView，然后才传递给我们的View。</li>\n</ul>\n<p>#MeasureSpec<br>在测量过程中，系统会将<strong>View的LayoutParams根据父容器所施加的规则转换成对应的MeasureSpec，然后再根据这个MeasureSpec来测量出View的宽和高。</strong>测量出来的宽和高不一定等于View最终的宽和高。<br>MeasureSpec将SpecMode和SpecSize打包成一个int值来避免过多的对象内存分配，高2位代表SpecMode，低30位代表SpecSize，SpecMode是指测量模式，而SpecSize是指在某种测量模式下的规格大小。</p>\n<p>SpecMode有三类：</p>\n<ul>\n<li>UNSPECIFIED：父容器不对View有任何限制，要多大给多大，这种情况一般用于系统内部，表示一种测量状态</li>\n<li>EXACTLY：父容器已经检测出View所需要的精确大小，这个时候View的最终大小就是SpecSize所指定的值。它对应于LayoutParams中的match_parent和具体的数值这两种模式</li>\n<li>AT_MOST：父容器指定了一个可用大小即SpecSize，View的大小不能大于这个值，具体是什么值要看不同View的具体实现。它对应于LayoutParams中的wrap_content。</li>\n</ul>\n<p>#普通MeasureSpec的创建规则<br><strong>对于普通View，其MeasureSpec由父容器的MeasureSpec和自身的LayoutParams来共同决定。</strong></p>\n<ul>\n<li>子View为精确宽高，无论父容器的MeasureSpec，子View的MeasureSpec都为精确值且遵循LayoutParams中的值。</li>\n<li>子View为match_parent时，如果父容器是精确模式，则子View也为精确模式且为父容器的剩余空间大小；如果父容器是最大模式，则子View也是最大模式且不会超过父容器的剩余空间。</li>\n<li>子View为wrap_content时，无论父View是精确还是最大模式，子View的模式总是最大模式，且不会超过父容器的剩余空间。</li>\n</ul>\n<p>#View的工作流程</p>\n<p>##measure<br>ViewGroup的measure方法会遍历每个子元素，并调用子元素内部的measure方法，measure源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">       setMeasuredDimension(getDefaultSize(getSuggestedMinimumWidth(), widthMeasureSpec),</span><br><span class=\"line\">               getDefaultSize(getSuggestedMinimumHeight(), heightMeasureSpec));</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n<p>注：</p>\n<ul>\n<li>getDefaultSize()返回MeasureSpec中的specSize，也就是View测量后的大小。</li>\n<li>getSuggestedMinimumWidth()，View如果没有背景，那么返回android:minWidth这个属性指定的值，这个值可以为0；如果设置了背景，则返回背景的最小宽度和minWidth中的<strong>最大值</strong>。</li>\n<li>getSuggestedMinimumHeight()，与getSuggestedMinimumWidth()类似。</li>\n<li>直接继承View的自定义控件需要重写onMeasure方法并设置wrap_content时的自身大小，否则在布局中使用wrap_content时就相当于使用match_parent。因为LayoutParams=wrap_content的情况下，MeasureSpec为AT_MOST，所以View的宽和高为父容器当前剩余的空间，这种效果与match_parent一致。<strong>具体处理方法要根据需求灵活决定。</strong></li>\n</ul>\n<p>###如何得到View的宽和高</p>\n<p>在Activity的onCreate、onStart、onResume方法中均无法正确得到某个View的宽/高信息，这是因为View的measure过程和Activity的生命周期方法不是同步执行的，因此无法保证Activity执行了onCreate、onStart、onResume时某个View就已经测量完毕了，如果View还没有测量完毕，那么获得的宽/高就是0。</p>\n<p>可以通过如下四个方法来解决这个问题：</p>\n<ul>\n<li>Activity或者View的onWindowFocusChanged方法（注意该方法会在Activity Pause和resume时被多次调用）</li>\n<li>view.post(new Runnable( {@Overidde public void run(){})})，在run方法中获取。</li>\n<li>ViewTreeObserver中的onGlobalLayoutListener中。</li>\n<li>手动调用View的measure方法。</li>\n</ul>\n<p>示例代码请参考原书P190页</p>\n<p>##layout<br>layout的作用是用来确定子视图在父视图中的位置。源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">layout</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldL = mLeft;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldT = mTop;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldB = mBottom;  </span><br><span class=\"line\">    <span class=\"keyword\">int</span> oldR = mRight;  </span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> changed = setFrame(l, t, r, b);  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (changed || (mPrivateFlags &amp; LAYOUT_REQUIRED) == LAYOUT_REQUIRED) &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ViewDebug.TRACE_HIERARCHY) &#123;  </span><br><span class=\"line\">            ViewDebug.trace(<span class=\"keyword\">this</span>, ViewDebug.HierarchyTraceType.ON_LAYOUT);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        onLayout(changed, l, t, r, b);  </span><br><span class=\"line\">        mPrivateFlags &amp;= ~LAYOUT_REQUIRED;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mOnLayoutChangeListeners != <span class=\"keyword\">null</span>) &#123;  </span><br><span class=\"line\">            ArrayList&lt;OnLayoutChangeListener&gt; listenersCopy =  </span><br><span class=\"line\">                    (ArrayList&lt;OnLayoutChangeListener&gt;) mOnLayoutChangeListeners.clone();  </span><br><span class=\"line\">            <span class=\"keyword\">int</span> numListeners = listenersCopy.size();  </span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; numListeners; ++i) &#123;  </span><br><span class=\"line\">                listenersCopy.get(i).onLayoutChange(<span class=\"keyword\">this</span>, l, t, r, b, oldL, oldT, oldR, oldB);  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    mPrivateFlags &amp;= ~FORCE_LAYOUT;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过setFrame()确定四个顶点的位置，进而确定View在父容器中的位置。</p>\n<p>在View的默认实现中，View的测量宽/高和最终宽/高是相等的，只不过测量宽/高形成于View的measure过程，而最终宽/高形成于View的layout过程，即两者的赋值时机不同，测量宽/高的赋值时机稍微早一些。多数情况下可以认为View的测量宽/高就等于最终的宽/高，但对于在View的layout中改变了View的left、top、right、bottom四个属性时，得出的测量宽/高有可能和最终的宽/高不一致。</p>\n<p>##draw<br>draw的过程很简单主要有以下几步：</p>\n<ul>\n<li>绘制背景(background.draw)</li>\n<li>绘制自己(onDraw)</li>\n<li>绘制children(dispatchDraw)</li>\n<li>绘制装饰(onDrawScrollBars)。</li>\n</ul>\n<p>源码如下<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void draw(Canvas canvas) &#123;  </span><br><span class=\"line\">  </span><br><span class=\"line\">        / * Draw traversal performs several drawing steps which must be executed  </span><br><span class=\"line\">         * in the appropriate order:  </span><br><span class=\"line\">         *  </span><br><span class=\"line\">         *      1. Draw the background if need  </span><br><span class=\"line\">         *      2. If necessary, save the canvas' layers to prepare for fading  </span><br><span class=\"line\">         *      3. Draw view's content  </span><br><span class=\"line\">         *      4. Draw children (dispatchDraw)  </span><br><span class=\"line\">         *      5. If necessary, draw the fading edges and restore layers  </span><br><span class=\"line\">         *      6. Draw decorations (scrollbars for instance)  </span><br><span class=\"line\">         */  </span><br><span class=\"line\">  </span><br><span class=\"line\">       //Step 1, draw the background, if needed  </span><br><span class=\"line\">        if (!dirtyOpaque) &#123;  </span><br><span class=\"line\">            drawBackground(canvas);  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">         // skip step 2 &amp; 5 if possible (common case)  </span><br><span class=\"line\">        final int viewFlags = mViewFlags;  </span><br><span class=\"line\">        if (!verticalEdges &amp;&amp; !horizontalEdges) &#123;  </span><br><span class=\"line\">            // Step 3, draw the content  </span><br><span class=\"line\">            if (!dirtyOpaque) onDraw(canvas);  </span><br><span class=\"line\">  </span><br><span class=\"line\">            // Step 4, draw the children  </span><br><span class=\"line\">            dispatchDraw(canvas);  </span><br><span class=\"line\">  </span><br><span class=\"line\">            // Step 6, draw decorations (scrollbars)  </span><br><span class=\"line\">            onDrawScrollBars(canvas);  </span><br><span class=\"line\">  </span><br><span class=\"line\">            if (mOverlay != null &amp;&amp; !mOverlay.isEmpty()) &#123;  </span><br><span class=\"line\">                mOverlay.getOverlayView().dispatchDraw(canvas);  </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">            // we're done...  </span><br><span class=\"line\">            return;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">        // Step 2, save the canvas' layers  </span><br><span class=\"line\">        ...  </span><br><span class=\"line\">  </span><br><span class=\"line\">        // Step 3, draw the content  </span><br><span class=\"line\">        if (!dirtyOpaque)   </span><br><span class=\"line\">            onDraw(canvas);  </span><br><span class=\"line\">  </span><br><span class=\"line\">        // Step 4, draw the children  </span><br><span class=\"line\">        dispatchDraw(canvas);  </span><br><span class=\"line\">  </span><br><span class=\"line\">        // Step 5, draw the fade effect and restore layers  </span><br><span class=\"line\">  </span><br><span class=\"line\">        // Step 6, draw decorations (scrollbars)  </span><br><span class=\"line\">        onDrawScrollBars(canvas);  </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p>注：</p>\n<ul>\n<li>View有一个特殊的方法setWillNotDraw，如果一个View不需要绘制任何内容，设置这个标记位true后，系统会进行优化。默认情况下，View没有启用这个优化标记位，但是ViewGroup会默认启用这个优化标记位。</li>\n<li>这个标记位对实际开发的意义是：如果自定义控件继承于ViewGroup并且本身不具备绘制功能时，就可以开启这个标记位从而便于系统进行后续的优化。当明确知道一个ViewGroup需要通过onDraw来绘制内容时，需要显示地关闭WILL_NOT_DRAW这个标记位。</li>\n</ul>"},{"title":"View的弹性滑动","_content":"相信开发Android的人都会有这种体会：从网上下载的demo运行的好好的，但是只要出现了滑动冲突，Demo就无法正常工作了。但是不用担心，解决滑动冲突有固定的模式，常见的有内部拦截和外部拦截两种，只要按照这个模式来就可以顺利解决。\n<!-- more -->\n# 介绍\n相信开发Android的人都会有这种体会：从网上下载的demo运行的好好的，但是只要出现了滑动冲突，Demo就无法正常工作了。但是不用担心，解决滑动冲突有固定的模式，常见的有内部拦截和外部拦截两种，只要按照这个模式来就可以顺利解决。本文会涉及到View事件分发的相关知识，关于事件分发请参考[http://blog.csdn.net/l664675249/article/details/50738102](http://blog.csdn.net/l664675249/article/details/50738102)\n\n# 常见的滑动冲突场景\n![常见场景](http://img.blog.csdn.net/20160229164733489)\n\n\n# 示例\n![示例](http://img.blog.csdn.net/20160229164638864)\n\n# 处理规则\n对于场景1，处理规则为：当用户左右滑动时，让外部的View拦截点击事件，当用户上下滑动时，让内部的View拦截点击事件。当产生滑动时，根据滑动的起始点与终点坐标位置，如果垂直方向滑动距离大，就判断为垂直滑动，否则判断为水平滑动。其他两种情况处理方法相似，**都是从业务需求上得出相应的规则。**\n\n# 解决方法\n## 外部拦截发\n所有的点击事件都先经过父容器拦截处理，如果父容器需要拦截就拦截，不需要就传给内部的View。伪代码如下\n```java\n  public boolean onInterceptTouchEvent(MotionEvent event) {\n        boolean intercepted = false;\n\n        switch (event.getAction()) {\n            case MotionEvent.ACTION_DOWN: {\n            \tintercepted = false;\n                break;\n            }\n            case MotionEvent.ACTION_MOVE: {\n                if (满足父容器的拦截要求) {\n                    intercepted = true;\n                } else {\n                    intercepted = false;\n                }\n                break;\n            }\n            case MotionEvent.ACTION_UP: {\n                intercepted = false;\n                break;\n            }\n            default:\n                break;\n        }\n        mLastXIntercept = x;\n        mLastYIntercept = y;\n        return intercepted;\n    }\n```\n\n**注：**\nACTION_DOWN这个事件是不能拦截的，因为一旦拦截后续的事件都会由父容器处理了。\n\n## 内部拦截法\n父容器不拦截任何事件，所有事件都传给子元素。如果子元素需要此事件就直接消耗，否则就交给父容器进行处理。完成这个功能需要配合requestDisallowInterceptTouchEvent()方法才可。这个方法表示是否让父容器拦截事件。伪代码如下：\n\n```java\n public boolean dispatchTouchEvent(MotionEvent event) {\n        int x = (int) event.getX();\n        int y = (int) event.getY();\n\n        switch (event.getAction()) {\n        case MotionEvent.ACTION_DOWN: {\n            parent.requestDisallowInterceptTouchEvent(true);\n            break;\n        }\n        case MotionEvent.ACTION_MOVE: {\n            if (满足父容器的拦截要求) {\n                parent.requestDisallowInterceptTouchEvent(false);\n            }\n            break;\n        }\n        case MotionEvent.ACTION_UP: {\n            break;\n        }\n        default:\n            break;\n        }\n        mLastX = x;\n        mLastY = y;\n        return super.dispatchTouchEvent(event);\n    }\n```\n\n\n**注**\n父容器默认拦截除了ACTION_DOWN以外的其他事件，这样子当元素调用parent.requestDisallowInterceptTouchEvent(false)时，父元素才能拦截所需的事件。\n\n# 总结\n\n- 解决滑动冲突有两种方法，推荐外部拦截法，实现起来简单。\n- 本文以场景1为例做了讲解，场景2,3的做法与1类似，都是根据业务需要制定处理规则。\n\n\n# 示例效果的源码\n## Activity\n```java\npublic class DemoActivity_1 extends Activity {\n    private static final String TAG = \"DemoActivity_1\";\n\n    private HorizontalScrollViewEx mListContainer;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.demo_1);\n        Log.d(TAG, \"onCreate\");\n        initView();\n    }\n\n    private void initView() {\n        LayoutInflater inflater = getLayoutInflater();\n        mListContainer = (HorizontalScrollViewEx) findViewById(R.id.container);\n        final int screenWidth = MyUtils.getScreenMetrics(this).widthPixels;\n        final int screenHeight = MyUtils.getScreenMetrics(this).heightPixels;\n        for (int i = 0; i < 3; i++) {\n            ViewGroup layout = (ViewGroup) inflater.inflate(\n                    R.layout.content_layout, mListContainer, false);\n            layout.getLayoutParams().width = screenWidth;\n            TextView textView = (TextView) layout.findViewById(R.id.title);\n            textView.setText(\"page \" + (i + 1));\n            layout.setBackgroundColor(Color.rgb(255 / (i + 1), 255 / (i + 1), 0));\n            createList(layout);\n            mListContainer.addView(layout);\n        }\n    }\n\n    private void createList(ViewGroup layout) {\n        ListView listView = (ListView) layout.findViewById(R.id.list);\n        ArrayList<String> datas = new ArrayList<String>();\n        for (int i = 0; i < 50; i++) {\n            datas.add(\"name \" + i);\n        }\n\n        ArrayAdapter<String> adapter = new ArrayAdapter<String>(this,\n                R.layout.content_list_item, R.id.name, datas);\n        listView.setAdapter(adapter);\n        listView.setOnItemClickListener(new OnItemClickListener() {\n            @Override\n            public void onItemClick(AdapterView<?> parent, View view,\n                    int position, long id) {\n                Toast.makeText(DemoActivity_1.this, \"click item\",\n                        Toast.LENGTH_SHORT).show();\n\n            }\n        });\n    }\n}\n```\n## 水平滑动的View\n```java\npublic class HorizontalScrollViewEx extends ViewGroup {\n    private static final String TAG = \"HorizontalScrollViewEx\";\n\n    private int mChildrenSize;\n    private int mChildWidth;\n    private int mChildIndex;\n\n    // 分别记录上次滑动的坐标\n    private int mLastX = 0;\n    private int mLastY = 0;\n    // 分别记录上次滑动的坐标(onInterceptTouchEvent)\n    private int mLastXIntercept = 0;\n    private int mLastYIntercept = 0;\n\n    private Scroller mScroller;\n    private VelocityTracker mVelocityTracker;\n\n    public HorizontalScrollViewEx(Context context) {\n        super(context);\n        init();\n    }\n\n    public HorizontalScrollViewEx(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        init();\n    }\n\n    public HorizontalScrollViewEx(Context context, AttributeSet attrs,\n                                  int defStyle) {\n        super(context, attrs, defStyle);\n        init();\n    }\n\n    private void init() {\n        mScroller = new Scroller(getContext());\n        mVelocityTracker = VelocityTracker.obtain();\n    }\n\n    @Override\n    public boolean onInterceptTouchEvent(MotionEvent event) {\n        boolean intercepted = false;\n        int x = (int) event.getX();\n        int y = (int) event.getY();\n\n        switch (event.getAction()) {\n            case MotionEvent.ACTION_DOWN: {\n                Log.d(TAG, \"onInterceptTouchEvent: ACTION_DOWN\");\n                intercepted = false;\n                if (!mScroller.isFinished()) {\n                    mScroller.abortAnimation();\n                    intercepted = true;\n                }\n                break;\n            }\n            case MotionEvent.ACTION_MOVE: {\n                Log.d(TAG, \"onInterceptTouchEvent: ACTION_MOVE\");\n                int deltaX = x - mLastXIntercept;\n                int deltaY = y - mLastYIntercept;\n                if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                    intercepted = true;\n                } else {\n                    intercepted = false;\n                }\n                break;\n            }\n            case MotionEvent.ACTION_UP: {\n                intercepted = false;\n                break;\n            }\n            default:\n                break;\n        }\n\n        Log.d(TAG, \"intercepted=\" + intercepted);\n        mLastX = x;\n        mLastY = y;\n        mLastXIntercept = x;\n        mLastYIntercept = y;\n\n        return intercepted;\n    }\n\n    @Override\n    public boolean onTouchEvent(MotionEvent event) {\n        mVelocityTracker.addMovement(event);\n        int x = (int) event.getX();\n        int y = (int) event.getY();\n        switch (event.getAction()) {\n            case MotionEvent.ACTION_DOWN: {\n                Log.d(TAG, \"onTouchEvent: ACTION_DOWN\");\n                if (!mScroller.isFinished()) {\n                    mScroller.abortAnimation();\n                }\n                break;\n            }\n            case MotionEvent.ACTION_MOVE: {\n                Log.d(TAG, \"onTouchEvent: ACTION_MOVE\");\n                int deltaX = x - mLastX;\n                int deltaY = y - mLastY;\n                Log.d(TAG, \"onTouchEvent: deltaX\" + deltaX);\n                scrollBy(-deltaX, 0);\n                break;\n            }\n            case MotionEvent.ACTION_UP: {\n\n                int scrollX = getScrollX();\n                int scrollToChildIndex = scrollX / mChildWidth;\n                mVelocityTracker.computeCurrentVelocity(1000);\n                float xVelocity = mVelocityTracker.getXVelocity();\n\n                //滑的速度到达阈值就认为需要进入下一页\n                if (Math.abs(xVelocity) >= 100) {\n                    mChildIndex = xVelocity > 0 ? mChildIndex - 1 : mChildIndex + 1;\n                } else {\n                    //滑动的距离超过一半，就进入下一页\n                    mChildIndex = (scrollX + mChildWidth / 2) / mChildWidth;\n                }\n                //保证在0页和最后一页滑动时不会越界\n                mChildIndex = Math.max(0, Math.min(mChildIndex, mChildrenSize - 1));\n                //没有达到进入下一页的要求，恢复原样\n                int dx = mChildIndex * mChildWidth - scrollX;\n                smoothScrollBy(dx, 0);\n                Log.d(TAG, \"onTouchEvent: dx = \" + dx);\n                mVelocityTracker.clear();\n                break;\n            }\n            default:\n                break;\n        }\n\n        mLastX = x;\n        mLastY = y;\n        return true;\n    }\n\n    @Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n        int measuredWidth = 0;\n        int measuredHeight = 0;\n        final int childCount = getChildCount();\n        measureChildren(widthMeasureSpec, heightMeasureSpec);\n\n        int widthSpaceSize = MeasureSpec.getSize(widthMeasureSpec);\n        int widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);\n        int heightSpaceSize = MeasureSpec.getSize(heightMeasureSpec);\n        int heightSpecMode = MeasureSpec.getMode(heightMeasureSpec);\n        if (childCount == 0) {\n            setMeasuredDimension(0, 0);\n        } else if (heightSpecMode == MeasureSpec.AT_MOST) {\n            final View childView = getChildAt(0);\n            measuredHeight = childView.getMeasuredHeight();\n            setMeasuredDimension(widthSpaceSize, childView.getMeasuredHeight());\n        } else if (widthSpecMode == MeasureSpec.AT_MOST) {\n            final View childView = getChildAt(0);\n            measuredWidth = childView.getMeasuredWidth() * childCount;\n            setMeasuredDimension(measuredWidth, heightSpaceSize);\n        } else {\n            final View childView = getChildAt(0);\n            measuredWidth = childView.getMeasuredWidth() * childCount;\n            measuredHeight = childView.getMeasuredHeight();\n            setMeasuredDimension(measuredWidth, measuredHeight);\n        }\n    }\n\n    @Override\n    protected void onLayout(boolean changed, int l, int t, int r, int b) {\n        int childLeft = 0;\n        final int childCount = getChildCount();\n        mChildrenSize = childCount;\n\n        for (int i = 0; i < childCount; i++) {\n            final View childView = getChildAt(i);\n            if (childView.getVisibility() != View.GONE) {\n                final int childWidth = childView.getMeasuredWidth();\n                mChildWidth = childWidth;\n                childView.layout(childLeft, 0, childLeft + childWidth,\n                        childView.getMeasuredHeight());\n                childLeft += childWidth;\n            }\n        }\n    }\n\n    private void smoothScrollBy(int dx, int dy) {\n        mScroller.startScroll(getScrollX(), 0, dx, 0, 500);\n        invalidate();\n    }\n\n    @Override\n    public void computeScroll() {\n        if (mScroller.computeScrollOffset()) {\n            scrollTo(mScroller.getCurrX(), mScroller.getCurrY());\n            postInvalidate();\n        }\n    }\n\n    @Override\n    protected void onDetachedFromWindow() {\n        mVelocityTracker.recycle();\n        super.onDetachedFromWindow();\n    }\n}\n```\n","source":"_posts/View的弹性滑动.md","raw":"title: View的弹性滑动\ncategories:\n- Android\n- Android开发艺术探索笔记\ntags:\n- Android\n- View\n- 弹性滑动\n---\n相信开发Android的人都会有这种体会：从网上下载的demo运行的好好的，但是只要出现了滑动冲突，Demo就无法正常工作了。但是不用担心，解决滑动冲突有固定的模式，常见的有内部拦截和外部拦截两种，只要按照这个模式来就可以顺利解决。\n<!-- more -->\n# 介绍\n相信开发Android的人都会有这种体会：从网上下载的demo运行的好好的，但是只要出现了滑动冲突，Demo就无法正常工作了。但是不用担心，解决滑动冲突有固定的模式，常见的有内部拦截和外部拦截两种，只要按照这个模式来就可以顺利解决。本文会涉及到View事件分发的相关知识，关于事件分发请参考[http://blog.csdn.net/l664675249/article/details/50738102](http://blog.csdn.net/l664675249/article/details/50738102)\n\n# 常见的滑动冲突场景\n![常见场景](http://img.blog.csdn.net/20160229164733489)\n\n\n# 示例\n![示例](http://img.blog.csdn.net/20160229164638864)\n\n# 处理规则\n对于场景1，处理规则为：当用户左右滑动时，让外部的View拦截点击事件，当用户上下滑动时，让内部的View拦截点击事件。当产生滑动时，根据滑动的起始点与终点坐标位置，如果垂直方向滑动距离大，就判断为垂直滑动，否则判断为水平滑动。其他两种情况处理方法相似，**都是从业务需求上得出相应的规则。**\n\n# 解决方法\n## 外部拦截发\n所有的点击事件都先经过父容器拦截处理，如果父容器需要拦截就拦截，不需要就传给内部的View。伪代码如下\n```java\n  public boolean onInterceptTouchEvent(MotionEvent event) {\n        boolean intercepted = false;\n\n        switch (event.getAction()) {\n            case MotionEvent.ACTION_DOWN: {\n            \tintercepted = false;\n                break;\n            }\n            case MotionEvent.ACTION_MOVE: {\n                if (满足父容器的拦截要求) {\n                    intercepted = true;\n                } else {\n                    intercepted = false;\n                }\n                break;\n            }\n            case MotionEvent.ACTION_UP: {\n                intercepted = false;\n                break;\n            }\n            default:\n                break;\n        }\n        mLastXIntercept = x;\n        mLastYIntercept = y;\n        return intercepted;\n    }\n```\n\n**注：**\nACTION_DOWN这个事件是不能拦截的，因为一旦拦截后续的事件都会由父容器处理了。\n\n## 内部拦截法\n父容器不拦截任何事件，所有事件都传给子元素。如果子元素需要此事件就直接消耗，否则就交给父容器进行处理。完成这个功能需要配合requestDisallowInterceptTouchEvent()方法才可。这个方法表示是否让父容器拦截事件。伪代码如下：\n\n```java\n public boolean dispatchTouchEvent(MotionEvent event) {\n        int x = (int) event.getX();\n        int y = (int) event.getY();\n\n        switch (event.getAction()) {\n        case MotionEvent.ACTION_DOWN: {\n            parent.requestDisallowInterceptTouchEvent(true);\n            break;\n        }\n        case MotionEvent.ACTION_MOVE: {\n            if (满足父容器的拦截要求) {\n                parent.requestDisallowInterceptTouchEvent(false);\n            }\n            break;\n        }\n        case MotionEvent.ACTION_UP: {\n            break;\n        }\n        default:\n            break;\n        }\n        mLastX = x;\n        mLastY = y;\n        return super.dispatchTouchEvent(event);\n    }\n```\n\n\n**注**\n父容器默认拦截除了ACTION_DOWN以外的其他事件，这样子当元素调用parent.requestDisallowInterceptTouchEvent(false)时，父元素才能拦截所需的事件。\n\n# 总结\n\n- 解决滑动冲突有两种方法，推荐外部拦截法，实现起来简单。\n- 本文以场景1为例做了讲解，场景2,3的做法与1类似，都是根据业务需要制定处理规则。\n\n\n# 示例效果的源码\n## Activity\n```java\npublic class DemoActivity_1 extends Activity {\n    private static final String TAG = \"DemoActivity_1\";\n\n    private HorizontalScrollViewEx mListContainer;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.demo_1);\n        Log.d(TAG, \"onCreate\");\n        initView();\n    }\n\n    private void initView() {\n        LayoutInflater inflater = getLayoutInflater();\n        mListContainer = (HorizontalScrollViewEx) findViewById(R.id.container);\n        final int screenWidth = MyUtils.getScreenMetrics(this).widthPixels;\n        final int screenHeight = MyUtils.getScreenMetrics(this).heightPixels;\n        for (int i = 0; i < 3; i++) {\n            ViewGroup layout = (ViewGroup) inflater.inflate(\n                    R.layout.content_layout, mListContainer, false);\n            layout.getLayoutParams().width = screenWidth;\n            TextView textView = (TextView) layout.findViewById(R.id.title);\n            textView.setText(\"page \" + (i + 1));\n            layout.setBackgroundColor(Color.rgb(255 / (i + 1), 255 / (i + 1), 0));\n            createList(layout);\n            mListContainer.addView(layout);\n        }\n    }\n\n    private void createList(ViewGroup layout) {\n        ListView listView = (ListView) layout.findViewById(R.id.list);\n        ArrayList<String> datas = new ArrayList<String>();\n        for (int i = 0; i < 50; i++) {\n            datas.add(\"name \" + i);\n        }\n\n        ArrayAdapter<String> adapter = new ArrayAdapter<String>(this,\n                R.layout.content_list_item, R.id.name, datas);\n        listView.setAdapter(adapter);\n        listView.setOnItemClickListener(new OnItemClickListener() {\n            @Override\n            public void onItemClick(AdapterView<?> parent, View view,\n                    int position, long id) {\n                Toast.makeText(DemoActivity_1.this, \"click item\",\n                        Toast.LENGTH_SHORT).show();\n\n            }\n        });\n    }\n}\n```\n## 水平滑动的View\n```java\npublic class HorizontalScrollViewEx extends ViewGroup {\n    private static final String TAG = \"HorizontalScrollViewEx\";\n\n    private int mChildrenSize;\n    private int mChildWidth;\n    private int mChildIndex;\n\n    // 分别记录上次滑动的坐标\n    private int mLastX = 0;\n    private int mLastY = 0;\n    // 分别记录上次滑动的坐标(onInterceptTouchEvent)\n    private int mLastXIntercept = 0;\n    private int mLastYIntercept = 0;\n\n    private Scroller mScroller;\n    private VelocityTracker mVelocityTracker;\n\n    public HorizontalScrollViewEx(Context context) {\n        super(context);\n        init();\n    }\n\n    public HorizontalScrollViewEx(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        init();\n    }\n\n    public HorizontalScrollViewEx(Context context, AttributeSet attrs,\n                                  int defStyle) {\n        super(context, attrs, defStyle);\n        init();\n    }\n\n    private void init() {\n        mScroller = new Scroller(getContext());\n        mVelocityTracker = VelocityTracker.obtain();\n    }\n\n    @Override\n    public boolean onInterceptTouchEvent(MotionEvent event) {\n        boolean intercepted = false;\n        int x = (int) event.getX();\n        int y = (int) event.getY();\n\n        switch (event.getAction()) {\n            case MotionEvent.ACTION_DOWN: {\n                Log.d(TAG, \"onInterceptTouchEvent: ACTION_DOWN\");\n                intercepted = false;\n                if (!mScroller.isFinished()) {\n                    mScroller.abortAnimation();\n                    intercepted = true;\n                }\n                break;\n            }\n            case MotionEvent.ACTION_MOVE: {\n                Log.d(TAG, \"onInterceptTouchEvent: ACTION_MOVE\");\n                int deltaX = x - mLastXIntercept;\n                int deltaY = y - mLastYIntercept;\n                if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                    intercepted = true;\n                } else {\n                    intercepted = false;\n                }\n                break;\n            }\n            case MotionEvent.ACTION_UP: {\n                intercepted = false;\n                break;\n            }\n            default:\n                break;\n        }\n\n        Log.d(TAG, \"intercepted=\" + intercepted);\n        mLastX = x;\n        mLastY = y;\n        mLastXIntercept = x;\n        mLastYIntercept = y;\n\n        return intercepted;\n    }\n\n    @Override\n    public boolean onTouchEvent(MotionEvent event) {\n        mVelocityTracker.addMovement(event);\n        int x = (int) event.getX();\n        int y = (int) event.getY();\n        switch (event.getAction()) {\n            case MotionEvent.ACTION_DOWN: {\n                Log.d(TAG, \"onTouchEvent: ACTION_DOWN\");\n                if (!mScroller.isFinished()) {\n                    mScroller.abortAnimation();\n                }\n                break;\n            }\n            case MotionEvent.ACTION_MOVE: {\n                Log.d(TAG, \"onTouchEvent: ACTION_MOVE\");\n                int deltaX = x - mLastX;\n                int deltaY = y - mLastY;\n                Log.d(TAG, \"onTouchEvent: deltaX\" + deltaX);\n                scrollBy(-deltaX, 0);\n                break;\n            }\n            case MotionEvent.ACTION_UP: {\n\n                int scrollX = getScrollX();\n                int scrollToChildIndex = scrollX / mChildWidth;\n                mVelocityTracker.computeCurrentVelocity(1000);\n                float xVelocity = mVelocityTracker.getXVelocity();\n\n                //滑的速度到达阈值就认为需要进入下一页\n                if (Math.abs(xVelocity) >= 100) {\n                    mChildIndex = xVelocity > 0 ? mChildIndex - 1 : mChildIndex + 1;\n                } else {\n                    //滑动的距离超过一半，就进入下一页\n                    mChildIndex = (scrollX + mChildWidth / 2) / mChildWidth;\n                }\n                //保证在0页和最后一页滑动时不会越界\n                mChildIndex = Math.max(0, Math.min(mChildIndex, mChildrenSize - 1));\n                //没有达到进入下一页的要求，恢复原样\n                int dx = mChildIndex * mChildWidth - scrollX;\n                smoothScrollBy(dx, 0);\n                Log.d(TAG, \"onTouchEvent: dx = \" + dx);\n                mVelocityTracker.clear();\n                break;\n            }\n            default:\n                break;\n        }\n\n        mLastX = x;\n        mLastY = y;\n        return true;\n    }\n\n    @Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n        int measuredWidth = 0;\n        int measuredHeight = 0;\n        final int childCount = getChildCount();\n        measureChildren(widthMeasureSpec, heightMeasureSpec);\n\n        int widthSpaceSize = MeasureSpec.getSize(widthMeasureSpec);\n        int widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);\n        int heightSpaceSize = MeasureSpec.getSize(heightMeasureSpec);\n        int heightSpecMode = MeasureSpec.getMode(heightMeasureSpec);\n        if (childCount == 0) {\n            setMeasuredDimension(0, 0);\n        } else if (heightSpecMode == MeasureSpec.AT_MOST) {\n            final View childView = getChildAt(0);\n            measuredHeight = childView.getMeasuredHeight();\n            setMeasuredDimension(widthSpaceSize, childView.getMeasuredHeight());\n        } else if (widthSpecMode == MeasureSpec.AT_MOST) {\n            final View childView = getChildAt(0);\n            measuredWidth = childView.getMeasuredWidth() * childCount;\n            setMeasuredDimension(measuredWidth, heightSpaceSize);\n        } else {\n            final View childView = getChildAt(0);\n            measuredWidth = childView.getMeasuredWidth() * childCount;\n            measuredHeight = childView.getMeasuredHeight();\n            setMeasuredDimension(measuredWidth, measuredHeight);\n        }\n    }\n\n    @Override\n    protected void onLayout(boolean changed, int l, int t, int r, int b) {\n        int childLeft = 0;\n        final int childCount = getChildCount();\n        mChildrenSize = childCount;\n\n        for (int i = 0; i < childCount; i++) {\n            final View childView = getChildAt(i);\n            if (childView.getVisibility() != View.GONE) {\n                final int childWidth = childView.getMeasuredWidth();\n                mChildWidth = childWidth;\n                childView.layout(childLeft, 0, childLeft + childWidth,\n                        childView.getMeasuredHeight());\n                childLeft += childWidth;\n            }\n        }\n    }\n\n    private void smoothScrollBy(int dx, int dy) {\n        mScroller.startScroll(getScrollX(), 0, dx, 0, 500);\n        invalidate();\n    }\n\n    @Override\n    public void computeScroll() {\n        if (mScroller.computeScrollOffset()) {\n            scrollTo(mScroller.getCurrX(), mScroller.getCurrY());\n            postInvalidate();\n        }\n    }\n\n    @Override\n    protected void onDetachedFromWindow() {\n        mVelocityTracker.recycle();\n        super.onDetachedFromWindow();\n    }\n}\n```\n","slug":"View的弹性滑动","published":1,"date":"2016-03-12T05:28:32.363Z","updated":"2016-03-12T05:28:32.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilop1put000cqcmy73prmq5j","content":"<p>相信开发Android的人都会有这种体会：从网上下载的demo运行的好好的，但是只要出现了滑动冲突，Demo就无法正常工作了。但是不用担心，解决滑动冲突有固定的模式，常见的有内部拦截和外部拦截两种，只要按照这个模式来就可以顺利解决。<br><a id=\"more\"></a></p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>相信开发Android的人都会有这种体会：从网上下载的demo运行的好好的，但是只要出现了滑动冲突，Demo就无法正常工作了。但是不用担心，解决滑动冲突有固定的模式，常见的有内部拦截和外部拦截两种，只要按照这个模式来就可以顺利解决。本文会涉及到View事件分发的相关知识，关于事件分发请参考<a href=\"http://blog.csdn.net/l664675249/article/details/50738102\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/l664675249/article/details/50738102</a></p>\n<h1 id=\"常见的滑动冲突场景\"><a href=\"#常见的滑动冲突场景\" class=\"headerlink\" title=\"常见的滑动冲突场景\"></a>常见的滑动冲突场景</h1><p><img src=\"http://img.blog.csdn.net/20160229164733489\" alt=\"常见场景\"></p>\n<h1 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h1><p><img src=\"http://img.blog.csdn.net/20160229164638864\" alt=\"示例\"></p>\n<h1 id=\"处理规则\"><a href=\"#处理规则\" class=\"headerlink\" title=\"处理规则\"></a>处理规则</h1><p>对于场景1，处理规则为：当用户左右滑动时，让外部的View拦截点击事件，当用户上下滑动时，让内部的View拦截点击事件。当产生滑动时，根据滑动的起始点与终点坐标位置，如果垂直方向滑动距离大，就判断为垂直滑动，否则判断为水平滑动。其他两种情况处理方法相似，<strong>都是从业务需求上得出相应的规则。</strong></p>\n<h1 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h1><h2 id=\"外部拦截发\"><a href=\"#外部拦截发\" class=\"headerlink\" title=\"外部拦截发\"></a>外部拦截发</h2><p>所有的点击事件都先经过父容器拦截处理，如果父容器需要拦截就拦截，不需要就传给内部的View。伪代码如下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onInterceptTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">boolean</span> intercepted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (event.getAction()) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN: &#123;</span><br><span class=\"line\">          \tintercepted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">              <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE: &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (满足父容器的拦截要求) &#123;</span><br><span class=\"line\">                  intercepted = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                  intercepted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">case</span> MotionEvent.ACTION_UP: &#123;</span><br><span class=\"line\">              intercepted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">              <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">default</span>:</span><br><span class=\"line\">              <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      mLastXIntercept = x;</span><br><span class=\"line\">      mLastYIntercept = y;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> intercepted;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>注：</strong><br>ACTION_DOWN这个事件是不能拦截的，因为一旦拦截后续的事件都会由父容器处理了。</p>\n<h2 id=\"内部拦截法\"><a href=\"#内部拦截法\" class=\"headerlink\" title=\"内部拦截法\"></a>内部拦截法</h2><p>父容器不拦截任何事件，所有事件都传给子元素。如果子元素需要此事件就直接消耗，否则就交给父容器进行处理。完成这个功能需要配合requestDisallowInterceptTouchEvent()方法才可。这个方法表示是否让父容器拦截事件。伪代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> x = (<span class=\"keyword\">int</span>) event.getX();</span><br><span class=\"line\">       <span class=\"keyword\">int</span> y = (<span class=\"keyword\">int</span>) event.getY();</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">switch</span> (event.getAction()) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN: &#123;</span><br><span class=\"line\">           parent.requestDisallowInterceptTouchEvent(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">           <span class=\"keyword\">break</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE: &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (满足父容器的拦截要求) &#123;</span><br><span class=\"line\">               parent.requestDisallowInterceptTouchEvent(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">break</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> MotionEvent.ACTION_UP: &#123;</span><br><span class=\"line\">           <span class=\"keyword\">break</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">default</span>:</span><br><span class=\"line\">           <span class=\"keyword\">break</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       mLastX = x;</span><br><span class=\"line\">       mLastY = y;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.dispatchTouchEvent(event);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注</strong><br>父容器默认拦截除了ACTION_DOWN以外的其他事件，这样子当元素调用parent.requestDisallowInterceptTouchEvent(false)时，父元素才能拦截所需的事件。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ul>\n<li>解决滑动冲突有两种方法，推荐外部拦截法，实现起来简单。</li>\n<li>本文以场景1为例做了讲解，场景2,3的做法与1类似，都是根据业务需要制定处理规则。</li>\n</ul>\n<h1 id=\"示例效果的源码\"><a href=\"#示例效果的源码\" class=\"headerlink\" title=\"示例效果的源码\"></a>示例效果的源码</h1><h2 id=\"Activity\"><a href=\"#Activity\" class=\"headerlink\" title=\"Activity\"></a>Activity</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoActivity_1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"DemoActivity_1\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HorizontalScrollViewEx mListContainer;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.demo_1);</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">\"onCreate\"</span>);</span><br><span class=\"line\">        initView();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initView</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        LayoutInflater inflater = getLayoutInflater();</span><br><span class=\"line\">        mListContainer = (HorizontalScrollViewEx) findViewById(R.id.container);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> screenWidth = MyUtils.getScreenMetrics(<span class=\"keyword\">this</span>).widthPixels;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> screenHeight = MyUtils.getScreenMetrics(<span class=\"keyword\">this</span>).heightPixels;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">            ViewGroup layout = (ViewGroup) inflater.inflate(</span><br><span class=\"line\">                    R.layout.content_layout, mListContainer, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">            layout.getLayoutParams().width = screenWidth;</span><br><span class=\"line\">            TextView textView = (TextView) layout.findViewById(R.id.title);</span><br><span class=\"line\">            textView.setText(<span class=\"string\">\"page \"</span> + (i + <span class=\"number\">1</span>));</span><br><span class=\"line\">            layout.setBackgroundColor(Color.rgb(<span class=\"number\">255</span> / (i + <span class=\"number\">1</span>), <span class=\"number\">255</span> / (i + <span class=\"number\">1</span>), <span class=\"number\">0</span>));</span><br><span class=\"line\">            createList(layout);</span><br><span class=\"line\">            mListContainer.addView(layout);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">createList</span><span class=\"params\">(ViewGroup layout)</span> </span>&#123;</span><br><span class=\"line\">        ListView listView = (ListView) layout.findViewById(R.id.list);</span><br><span class=\"line\">        ArrayList&lt;String&gt; datas = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">50</span>; i++) &#123;</span><br><span class=\"line\">            datas.add(<span class=\"string\">\"name \"</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        ArrayAdapter&lt;String&gt; adapter = <span class=\"keyword\">new</span> ArrayAdapter&lt;String&gt;(<span class=\"keyword\">this</span>,</span><br><span class=\"line\">                R.layout.content_list_item, R.id.name, datas);</span><br><span class=\"line\">        listView.setAdapter(adapter);</span><br><span class=\"line\">        listView.setOnItemClickListener(<span class=\"keyword\">new</span> OnItemClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onItemClick</span><span class=\"params\">(AdapterView&lt;?&gt; parent, View view,</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> position, <span class=\"keyword\">long</span> id)</span> </span>&#123;</span><br><span class=\"line\">                Toast.makeText(DemoActivity_1.<span class=\"keyword\">this</span>, <span class=\"string\">\"click item\"</span>,</span><br><span class=\"line\">                        Toast.LENGTH_SHORT).show();</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"水平滑动的View\"><a href=\"#水平滑动的View\" class=\"headerlink\" title=\"水平滑动的View\"></a>水平滑动的View</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HorizontalScrollViewEx</span> <span class=\"keyword\">extends</span> <span class=\"title\">ViewGroup</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"HorizontalScrollViewEx\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mChildrenSize;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mChildWidth;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mChildIndex;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 分别记录上次滑动的坐标</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mLastX = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mLastY = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 分别记录上次滑动的坐标(onInterceptTouchEvent)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mLastXIntercept = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mLastYIntercept = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Scroller mScroller;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> VelocityTracker mVelocityTracker;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HorizontalScrollViewEx</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context);</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HorizontalScrollViewEx</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HorizontalScrollViewEx</span><span class=\"params\">(Context context, AttributeSet attrs,</span><br><span class=\"line\">                                  <span class=\"keyword\">int</span> defStyle)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyle);</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mScroller = <span class=\"keyword\">new</span> Scroller(getContext());</span><br><span class=\"line\">        mVelocityTracker = VelocityTracker.obtain();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onInterceptTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> intercepted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = (<span class=\"keyword\">int</span>) event.getX();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> y = (<span class=\"keyword\">int</span>) event.getY();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (event.getAction()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN: &#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">\"onInterceptTouchEvent: ACTION_DOWN\"</span>);</span><br><span class=\"line\">                intercepted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!mScroller.isFinished()) &#123;</span><br><span class=\"line\">                    mScroller.abortAnimation();</span><br><span class=\"line\">                    intercepted = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE: &#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">\"onInterceptTouchEvent: ACTION_MOVE\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">int</span> deltaX = x - mLastXIntercept;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> deltaY = y - mLastYIntercept;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (Math.abs(deltaX) &gt; Math.abs(deltaY)) &#123;</span><br><span class=\"line\">                    intercepted = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    intercepted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_UP: &#123;</span><br><span class=\"line\">                intercepted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">\"intercepted=\"</span> + intercepted);</span><br><span class=\"line\">        mLastX = x;</span><br><span class=\"line\">        mLastY = y;</span><br><span class=\"line\">        mLastXIntercept = x;</span><br><span class=\"line\">        mLastYIntercept = y;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> intercepted;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">        mVelocityTracker.addMovement(event);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = (<span class=\"keyword\">int</span>) event.getX();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> y = (<span class=\"keyword\">int</span>) event.getY();</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (event.getAction()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN: &#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">\"onTouchEvent: ACTION_DOWN\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!mScroller.isFinished()) &#123;</span><br><span class=\"line\">                    mScroller.abortAnimation();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE: &#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">\"onTouchEvent: ACTION_MOVE\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">int</span> deltaX = x - mLastX;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> deltaY = y - mLastY;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">\"onTouchEvent: deltaX\"</span> + deltaX);</span><br><span class=\"line\">                scrollBy(-deltaX, <span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_UP: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">int</span> scrollX = getScrollX();</span><br><span class=\"line\">                <span class=\"keyword\">int</span> scrollToChildIndex = scrollX / mChildWidth;</span><br><span class=\"line\">                mVelocityTracker.computeCurrentVelocity(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                <span class=\"keyword\">float</span> xVelocity = mVelocityTracker.getXVelocity();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//滑的速度到达阈值就认为需要进入下一页</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (Math.abs(xVelocity) &gt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">                    mChildIndex = xVelocity &gt; <span class=\"number\">0</span> ? mChildIndex - <span class=\"number\">1</span> : mChildIndex + <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//滑动的距离超过一半，就进入下一页</span></span><br><span class=\"line\">                    mChildIndex = (scrollX + mChildWidth / <span class=\"number\">2</span>) / mChildWidth;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//保证在0页和最后一页滑动时不会越界</span></span><br><span class=\"line\">                mChildIndex = Math.max(<span class=\"number\">0</span>, Math.min(mChildIndex, mChildrenSize - <span class=\"number\">1</span>));</span><br><span class=\"line\">                <span class=\"comment\">//没有达到进入下一页的要求，恢复原样</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> dx = mChildIndex * mChildWidth - scrollX;</span><br><span class=\"line\">                smoothScrollBy(dx, <span class=\"number\">0</span>);</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">\"onTouchEvent: dx = \"</span> + dx);</span><br><span class=\"line\">                mVelocityTracker.clear();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        mLastX = x;</span><br><span class=\"line\">        mLastY = y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> measuredWidth = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> measuredHeight = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childCount = getChildCount();</span><br><span class=\"line\">        measureChildren(widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> widthSpaceSize = MeasureSpec.getSize(widthMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> heightSpaceSize = MeasureSpec.getSize(heightMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> heightSpecMode = MeasureSpec.getMode(heightMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childCount == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            setMeasuredDimension(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (heightSpecMode == MeasureSpec.AT_MOST) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> View childView = getChildAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">            measuredHeight = childView.getMeasuredHeight();</span><br><span class=\"line\">            setMeasuredDimension(widthSpaceSize, childView.getMeasuredHeight());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (widthSpecMode == MeasureSpec.AT_MOST) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> View childView = getChildAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">            measuredWidth = childView.getMeasuredWidth() * childCount;</span><br><span class=\"line\">            setMeasuredDimension(measuredWidth, heightSpaceSize);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> View childView = getChildAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">            measuredWidth = childView.getMeasuredWidth() * childCount;</span><br><span class=\"line\">            measuredHeight = childView.getMeasuredHeight();</span><br><span class=\"line\">            setMeasuredDimension(measuredWidth, measuredHeight);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> childLeft = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childCount = getChildCount();</span><br><span class=\"line\">        mChildrenSize = childCount;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; childCount; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> View childView = getChildAt(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (childView.getVisibility() != View.GONE) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidth = childView.getMeasuredWidth();</span><br><span class=\"line\">                mChildWidth = childWidth;</span><br><span class=\"line\">                childView.layout(childLeft, <span class=\"number\">0</span>, childLeft + childWidth,</span><br><span class=\"line\">                        childView.getMeasuredHeight());</span><br><span class=\"line\">                childLeft += childWidth;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">smoothScrollBy</span><span class=\"params\">(<span class=\"keyword\">int</span> dx, <span class=\"keyword\">int</span> dy)</span> </span>&#123;</span><br><span class=\"line\">        mScroller.startScroll(getScrollX(), <span class=\"number\">0</span>, dx, <span class=\"number\">0</span>, <span class=\"number\">500</span>);</span><br><span class=\"line\">        invalidate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">computeScroll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mScroller.computeScrollOffset()) &#123;</span><br><span class=\"line\">            scrollTo(mScroller.getCurrX(), mScroller.getCurrY());</span><br><span class=\"line\">            postInvalidate();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDetachedFromWindow</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mVelocityTracker.recycle();</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDetachedFromWindow();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"<p>相信开发Android的人都会有这种体会：从网上下载的demo运行的好好的，但是只要出现了滑动冲突，Demo就无法正常工作了。但是不用担心，解决滑动冲突有固定的模式，常见的有内部拦截和外部拦截两种，只要按照这个模式来就可以顺利解决。<br>","more":"</p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>相信开发Android的人都会有这种体会：从网上下载的demo运行的好好的，但是只要出现了滑动冲突，Demo就无法正常工作了。但是不用担心，解决滑动冲突有固定的模式，常见的有内部拦截和外部拦截两种，只要按照这个模式来就可以顺利解决。本文会涉及到View事件分发的相关知识，关于事件分发请参考<a href=\"http://blog.csdn.net/l664675249/article/details/50738102\">http://blog.csdn.net/l664675249/article/details/50738102</a></p>\n<h1 id=\"常见的滑动冲突场景\"><a href=\"#常见的滑动冲突场景\" class=\"headerlink\" title=\"常见的滑动冲突场景\"></a>常见的滑动冲突场景</h1><p><img src=\"http://img.blog.csdn.net/20160229164733489\" alt=\"常见场景\"></p>\n<h1 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h1><p><img src=\"http://img.blog.csdn.net/20160229164638864\" alt=\"示例\"></p>\n<h1 id=\"处理规则\"><a href=\"#处理规则\" class=\"headerlink\" title=\"处理规则\"></a>处理规则</h1><p>对于场景1，处理规则为：当用户左右滑动时，让外部的View拦截点击事件，当用户上下滑动时，让内部的View拦截点击事件。当产生滑动时，根据滑动的起始点与终点坐标位置，如果垂直方向滑动距离大，就判断为垂直滑动，否则判断为水平滑动。其他两种情况处理方法相似，<strong>都是从业务需求上得出相应的规则。</strong></p>\n<h1 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h1><h2 id=\"外部拦截发\"><a href=\"#外部拦截发\" class=\"headerlink\" title=\"外部拦截发\"></a>外部拦截发</h2><p>所有的点击事件都先经过父容器拦截处理，如果父容器需要拦截就拦截，不需要就传给内部的View。伪代码如下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onInterceptTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">boolean</span> intercepted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (event.getAction()) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN: &#123;</span><br><span class=\"line\">          \tintercepted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">              <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE: &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (满足父容器的拦截要求) &#123;</span><br><span class=\"line\">                  intercepted = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                  intercepted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">case</span> MotionEvent.ACTION_UP: &#123;</span><br><span class=\"line\">              intercepted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">              <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">default</span>:</span><br><span class=\"line\">              <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      mLastXIntercept = x;</span><br><span class=\"line\">      mLastYIntercept = y;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> intercepted;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>注：</strong><br>ACTION_DOWN这个事件是不能拦截的，因为一旦拦截后续的事件都会由父容器处理了。</p>\n<h2 id=\"内部拦截法\"><a href=\"#内部拦截法\" class=\"headerlink\" title=\"内部拦截法\"></a>内部拦截法</h2><p>父容器不拦截任何事件，所有事件都传给子元素。如果子元素需要此事件就直接消耗，否则就交给父容器进行处理。完成这个功能需要配合requestDisallowInterceptTouchEvent()方法才可。这个方法表示是否让父容器拦截事件。伪代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> x = (<span class=\"keyword\">int</span>) event.getX();</span><br><span class=\"line\">       <span class=\"keyword\">int</span> y = (<span class=\"keyword\">int</span>) event.getY();</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">switch</span> (event.getAction()) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN: &#123;</span><br><span class=\"line\">           parent.requestDisallowInterceptTouchEvent(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">           <span class=\"keyword\">break</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE: &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (满足父容器的拦截要求) &#123;</span><br><span class=\"line\">               parent.requestDisallowInterceptTouchEvent(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">break</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> MotionEvent.ACTION_UP: &#123;</span><br><span class=\"line\">           <span class=\"keyword\">break</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">default</span>:</span><br><span class=\"line\">           <span class=\"keyword\">break</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       mLastX = x;</span><br><span class=\"line\">       mLastY = y;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.dispatchTouchEvent(event);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注</strong><br>父容器默认拦截除了ACTION_DOWN以外的其他事件，这样子当元素调用parent.requestDisallowInterceptTouchEvent(false)时，父元素才能拦截所需的事件。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><ul>\n<li>解决滑动冲突有两种方法，推荐外部拦截法，实现起来简单。</li>\n<li>本文以场景1为例做了讲解，场景2,3的做法与1类似，都是根据业务需要制定处理规则。</li>\n</ul>\n<h1 id=\"示例效果的源码\"><a href=\"#示例效果的源码\" class=\"headerlink\" title=\"示例效果的源码\"></a>示例效果的源码</h1><h2 id=\"Activity\"><a href=\"#Activity\" class=\"headerlink\" title=\"Activity\"></a>Activity</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoActivity_1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"DemoActivity_1\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HorizontalScrollViewEx mListContainer;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.demo_1);</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">\"onCreate\"</span>);</span><br><span class=\"line\">        initView();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initView</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        LayoutInflater inflater = getLayoutInflater();</span><br><span class=\"line\">        mListContainer = (HorizontalScrollViewEx) findViewById(R.id.container);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> screenWidth = MyUtils.getScreenMetrics(<span class=\"keyword\">this</span>).widthPixels;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> screenHeight = MyUtils.getScreenMetrics(<span class=\"keyword\">this</span>).heightPixels;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">            ViewGroup layout = (ViewGroup) inflater.inflate(</span><br><span class=\"line\">                    R.layout.content_layout, mListContainer, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">            layout.getLayoutParams().width = screenWidth;</span><br><span class=\"line\">            TextView textView = (TextView) layout.findViewById(R.id.title);</span><br><span class=\"line\">            textView.setText(<span class=\"string\">\"page \"</span> + (i + <span class=\"number\">1</span>));</span><br><span class=\"line\">            layout.setBackgroundColor(Color.rgb(<span class=\"number\">255</span> / (i + <span class=\"number\">1</span>), <span class=\"number\">255</span> / (i + <span class=\"number\">1</span>), <span class=\"number\">0</span>));</span><br><span class=\"line\">            createList(layout);</span><br><span class=\"line\">            mListContainer.addView(layout);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">createList</span><span class=\"params\">(ViewGroup layout)</span> </span>&#123;</span><br><span class=\"line\">        ListView listView = (ListView) layout.findViewById(R.id.list);</span><br><span class=\"line\">        ArrayList&lt;String&gt; datas = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">50</span>; i++) &#123;</span><br><span class=\"line\">            datas.add(<span class=\"string\">\"name \"</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        ArrayAdapter&lt;String&gt; adapter = <span class=\"keyword\">new</span> ArrayAdapter&lt;String&gt;(<span class=\"keyword\">this</span>,</span><br><span class=\"line\">                R.layout.content_list_item, R.id.name, datas);</span><br><span class=\"line\">        listView.setAdapter(adapter);</span><br><span class=\"line\">        listView.setOnItemClickListener(<span class=\"keyword\">new</span> OnItemClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onItemClick</span><span class=\"params\">(AdapterView&lt;?&gt; parent, View view,</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> position, <span class=\"keyword\">long</span> id)</span> </span>&#123;</span><br><span class=\"line\">                Toast.makeText(DemoActivity_1.<span class=\"keyword\">this</span>, <span class=\"string\">\"click item\"</span>,</span><br><span class=\"line\">                        Toast.LENGTH_SHORT).show();</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"水平滑动的View\"><a href=\"#水平滑动的View\" class=\"headerlink\" title=\"水平滑动的View\"></a>水平滑动的View</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HorizontalScrollViewEx</span> <span class=\"keyword\">extends</span> <span class=\"title\">ViewGroup</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"HorizontalScrollViewEx\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mChildrenSize;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mChildWidth;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mChildIndex;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 分别记录上次滑动的坐标</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mLastX = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mLastY = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 分别记录上次滑动的坐标(onInterceptTouchEvent)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mLastXIntercept = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mLastYIntercept = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Scroller mScroller;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> VelocityTracker mVelocityTracker;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HorizontalScrollViewEx</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context);</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HorizontalScrollViewEx</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HorizontalScrollViewEx</span><span class=\"params\">(Context context, AttributeSet attrs,</span><br><span class=\"line\">                                  <span class=\"keyword\">int</span> defStyle)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyle);</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mScroller = <span class=\"keyword\">new</span> Scroller(getContext());</span><br><span class=\"line\">        mVelocityTracker = VelocityTracker.obtain();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onInterceptTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> intercepted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = (<span class=\"keyword\">int</span>) event.getX();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> y = (<span class=\"keyword\">int</span>) event.getY();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (event.getAction()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN: &#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">\"onInterceptTouchEvent: ACTION_DOWN\"</span>);</span><br><span class=\"line\">                intercepted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!mScroller.isFinished()) &#123;</span><br><span class=\"line\">                    mScroller.abortAnimation();</span><br><span class=\"line\">                    intercepted = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE: &#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">\"onInterceptTouchEvent: ACTION_MOVE\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">int</span> deltaX = x - mLastXIntercept;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> deltaY = y - mLastYIntercept;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (Math.abs(deltaX) &gt; Math.abs(deltaY)) &#123;</span><br><span class=\"line\">                    intercepted = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    intercepted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_UP: &#123;</span><br><span class=\"line\">                intercepted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">\"intercepted=\"</span> + intercepted);</span><br><span class=\"line\">        mLastX = x;</span><br><span class=\"line\">        mLastY = y;</span><br><span class=\"line\">        mLastXIntercept = x;</span><br><span class=\"line\">        mLastYIntercept = y;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> intercepted;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">        mVelocityTracker.addMovement(event);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = (<span class=\"keyword\">int</span>) event.getX();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> y = (<span class=\"keyword\">int</span>) event.getY();</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (event.getAction()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN: &#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">\"onTouchEvent: ACTION_DOWN\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!mScroller.isFinished()) &#123;</span><br><span class=\"line\">                    mScroller.abortAnimation();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE: &#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">\"onTouchEvent: ACTION_MOVE\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">int</span> deltaX = x - mLastX;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> deltaY = y - mLastY;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">\"onTouchEvent: deltaX\"</span> + deltaX);</span><br><span class=\"line\">                scrollBy(-deltaX, <span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_UP: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">int</span> scrollX = getScrollX();</span><br><span class=\"line\">                <span class=\"keyword\">int</span> scrollToChildIndex = scrollX / mChildWidth;</span><br><span class=\"line\">                mVelocityTracker.computeCurrentVelocity(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                <span class=\"keyword\">float</span> xVelocity = mVelocityTracker.getXVelocity();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//滑的速度到达阈值就认为需要进入下一页</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (Math.abs(xVelocity) &gt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">                    mChildIndex = xVelocity &gt; <span class=\"number\">0</span> ? mChildIndex - <span class=\"number\">1</span> : mChildIndex + <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//滑动的距离超过一半，就进入下一页</span></span><br><span class=\"line\">                    mChildIndex = (scrollX + mChildWidth / <span class=\"number\">2</span>) / mChildWidth;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//保证在0页和最后一页滑动时不会越界</span></span><br><span class=\"line\">                mChildIndex = Math.max(<span class=\"number\">0</span>, Math.min(mChildIndex, mChildrenSize - <span class=\"number\">1</span>));</span><br><span class=\"line\">                <span class=\"comment\">//没有达到进入下一页的要求，恢复原样</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> dx = mChildIndex * mChildWidth - scrollX;</span><br><span class=\"line\">                smoothScrollBy(dx, <span class=\"number\">0</span>);</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">\"onTouchEvent: dx = \"</span> + dx);</span><br><span class=\"line\">                mVelocityTracker.clear();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        mLastX = x;</span><br><span class=\"line\">        mLastY = y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> measuredWidth = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> measuredHeight = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childCount = getChildCount();</span><br><span class=\"line\">        measureChildren(widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> widthSpaceSize = MeasureSpec.getSize(widthMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> heightSpaceSize = MeasureSpec.getSize(heightMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> heightSpecMode = MeasureSpec.getMode(heightMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childCount == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            setMeasuredDimension(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (heightSpecMode == MeasureSpec.AT_MOST) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> View childView = getChildAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">            measuredHeight = childView.getMeasuredHeight();</span><br><span class=\"line\">            setMeasuredDimension(widthSpaceSize, childView.getMeasuredHeight());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (widthSpecMode == MeasureSpec.AT_MOST) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> View childView = getChildAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">            measuredWidth = childView.getMeasuredWidth() * childCount;</span><br><span class=\"line\">            setMeasuredDimension(measuredWidth, heightSpaceSize);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> View childView = getChildAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">            measuredWidth = childView.getMeasuredWidth() * childCount;</span><br><span class=\"line\">            measuredHeight = childView.getMeasuredHeight();</span><br><span class=\"line\">            setMeasuredDimension(measuredWidth, measuredHeight);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> childLeft = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childCount = getChildCount();</span><br><span class=\"line\">        mChildrenSize = childCount;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; childCount; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> View childView = getChildAt(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (childView.getVisibility() != View.GONE) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidth = childView.getMeasuredWidth();</span><br><span class=\"line\">                mChildWidth = childWidth;</span><br><span class=\"line\">                childView.layout(childLeft, <span class=\"number\">0</span>, childLeft + childWidth,</span><br><span class=\"line\">                        childView.getMeasuredHeight());</span><br><span class=\"line\">                childLeft += childWidth;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">smoothScrollBy</span><span class=\"params\">(<span class=\"keyword\">int</span> dx, <span class=\"keyword\">int</span> dy)</span> </span>&#123;</span><br><span class=\"line\">        mScroller.startScroll(getScrollX(), <span class=\"number\">0</span>, dx, <span class=\"number\">0</span>, <span class=\"number\">500</span>);</span><br><span class=\"line\">        invalidate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">computeScroll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mScroller.computeScrollOffset()) &#123;</span><br><span class=\"line\">            scrollTo(mScroller.getCurrX(), mScroller.getCurrY());</span><br><span class=\"line\">            postInvalidate();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDetachedFromWindow</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mVelocityTracker.recycle();</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDetachedFromWindow();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"View的滑动冲突","_content":"相信开发Android的人都会有这种体会：从网上下载的demo运行的好好的，但是只要出现了滑动冲突，Demo就无法正常工作了。但是不用担心，解决滑动冲突有固定的模式，常见的有内部拦截和外部拦截两种，只要按照这个模式来就可以顺利解决。\n<!-- more -->\n#介绍\n相信开发Android的人都会有这种体会：从网上下载的demo运行的好好的，但是只要出现了滑动冲突，Demo就无法正常工作了。但是不用担心，解决滑动冲突有固定的模式，常见的有内部拦截和外部拦截两种，只要按照这个模式来就可以顺利解决。本文会涉及到View事件分发的相关知识，关于事件分发请参考[http://blog.csdn.net/l664675249/article/details/50738102](http://blog.csdn.net/l664675249/article/details/50738102)\n\n#常见的滑动冲突场景\n\n[图片](http://)\n\n#示例\n\n\n#处理规则\n对于场景1，处理规则为：当用户左右滑动时，让外部的View拦截点击事件，当用户上下滑动时，让内部的View拦截点击事件。当产生滑动时，根据滑动的起始点与终点坐标位置，如果垂直方向滑动距离大，就判断为垂直滑动，否则判断为水平滑动。其他两种情况处理方法相似，**都是从业务需求上得出相应的规则。**\n\n#解决方法\n##外部拦截发\n所有的点击事件都先经过父容器拦截处理，如果父容器需要拦截就拦截，不需要就传给内部的View。伪代码如下\n```java\n  public boolean onInterceptTouchEvent(MotionEvent event) {\n        boolean intercepted = false;\n\n        switch (event.getAction()) {\n            case MotionEvent.ACTION_DOWN: {\n            \tintercepted = false;\n                break;\n            }\n            case MotionEvent.ACTION_MOVE: {\n                if (满足父容器的拦截要求) {\n                    intercepted = true;\n                } else {\n                    intercepted = false;\n                }\n                break;\n            }\n            case MotionEvent.ACTION_UP: {\n                intercepted = false;\n                break;\n            }\n            default:\n                break;\n        }\n        mLastXIntercept = x;\n        mLastYIntercept = y;\n        return intercepted;\n    }\n```\n\n**注：**\nACTION_DOWN这个事件是不能拦截的，因为一旦拦截后续的事件都会由父容器处理了。\n\n##内部拦截法\n父容器不拦截任何事件，所有事件都传给子元素。如果子元素需要此事件就直接消耗，否则就交给父容器进行处理。完成这个功能需要配合requestDisallowInterceptTouchEvent()方法才可。这个方法表示是否让父容器拦截事件。伪代码如下：\n\n```java\n public boolean dispatchTouchEvent(MotionEvent event) {\n        int x = (int) event.getX();\n        int y = (int) event.getY();\n\n        switch (event.getAction()) {\n        case MotionEvent.ACTION_DOWN: {\n            parent.requestDisallowInterceptTouchEvent(true);\n            break;\n        }\n        case MotionEvent.ACTION_MOVE: {\n            if (满足父容器的拦截要求) {\n                parent.requestDisallowInterceptTouchEvent(false);\n            }\n            break;\n        }\n        case MotionEvent.ACTION_UP: {\n            break;\n        }\n        default:\n            break;\n        }\n        mLastX = x;\n        mLastY = y;\n        return super.dispatchTouchEvent(event);\n    }\n```\n\n**注**\n父容器默认拦截除了ACTION_DOWN以外的其他事件，这样子当元素调用parent.requestDisallowInterceptTouchEvent(false)时，父元素才能拦截所需的事件。\n\n#总结\n\n- 解决滑动冲突有两种方法，推荐外部拦截法，实现起来简单。\n- 本文以场景1为例做了讲解，场景2,3的做法与1类似，都是根据业务需要制定处理规则。\n\n\n#示例效果的源码\n##Activity\n```java\npublic class DemoActivity_1 extends Activity {\n    private static final String TAG = \"DemoActivity_1\";\n\n    private HorizontalScrollViewEx mListContainer;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.demo_1);\n        Log.d(TAG, \"onCreate\");\n        initView();\n    }\n\n    private void initView() {\n        LayoutInflater inflater = getLayoutInflater();\n        mListContainer = (HorizontalScrollViewEx) findViewById(R.id.container);\n        final int screenWidth = MyUtils.getScreenMetrics(this).widthPixels;\n        final int screenHeight = MyUtils.getScreenMetrics(this).heightPixels;\n        for (int i = 0; i < 3; i++) {\n            ViewGroup layout = (ViewGroup) inflater.inflate(\n                    R.layout.content_layout, mListContainer, false);\n            layout.getLayoutParams().width = screenWidth;\n            TextView textView = (TextView) layout.findViewById(R.id.title);\n            textView.setText(\"page \" + (i + 1));\n            layout.setBackgroundColor(Color.rgb(255 / (i + 1), 255 / (i + 1), 0));\n            createList(layout);\n            mListContainer.addView(layout);\n        }\n    }\n\n    private void createList(ViewGroup layout) {\n        ListView listView = (ListView) layout.findViewById(R.id.list);\n        ArrayList<String> datas = new ArrayList<String>();\n        for (int i = 0; i < 50; i++) {\n            datas.add(\"name \" + i);\n        }\n\n        ArrayAdapter<String> adapter = new ArrayAdapter<String>(this,\n                R.layout.content_list_item, R.id.name, datas);\n        listView.setAdapter(adapter);\n        listView.setOnItemClickListener(new OnItemClickListener() {\n            @Override\n            public void onItemClick(AdapterView<?> parent, View view,\n                    int position, long id) {\n                Toast.makeText(DemoActivity_1.this, \"click item\",\n                        Toast.LENGTH_SHORT).show();\n\n            }\n        });\n    }\n}\n```\n##水平滑动的View\n```java\npublic class HorizontalScrollViewEx extends ViewGroup {\n    private static final String TAG = \"HorizontalScrollViewEx\";\n\n    private int mChildrenSize;\n    private int mChildWidth;\n    private int mChildIndex;\n\n    // 分别记录上次滑动的坐标\n    private int mLastX = 0;\n    private int mLastY = 0;\n    // 分别记录上次滑动的坐标(onInterceptTouchEvent)\n    private int mLastXIntercept = 0;\n    private int mLastYIntercept = 0;\n\n    private Scroller mScroller;\n    private VelocityTracker mVelocityTracker;\n\n    public HorizontalScrollViewEx(Context context) {\n        super(context);\n        init();\n    }\n\n    public HorizontalScrollViewEx(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        init();\n    }\n\n    public HorizontalScrollViewEx(Context context, AttributeSet attrs,\n                                  int defStyle) {\n        super(context, attrs, defStyle);\n        init();\n    }\n\n    private void init() {\n        mScroller = new Scroller(getContext());\n        mVelocityTracker = VelocityTracker.obtain();\n    }\n\n    @Override\n    public boolean onInterceptTouchEvent(MotionEvent event) {\n        boolean intercepted = false;\n        int x = (int) event.getX();\n        int y = (int) event.getY();\n\n        switch (event.getAction()) {\n            case MotionEvent.ACTION_DOWN: {\n                Log.d(TAG, \"onInterceptTouchEvent: ACTION_DOWN\");\n                intercepted = false;\n                if (!mScroller.isFinished()) {\n                    mScroller.abortAnimation();\n                    intercepted = true;\n                }\n                break;\n            }\n            case MotionEvent.ACTION_MOVE: {\n                Log.d(TAG, \"onInterceptTouchEvent: ACTION_MOVE\");\n                int deltaX = x - mLastXIntercept;\n                int deltaY = y - mLastYIntercept;\n                if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                    intercepted = true;\n                } else {\n                    intercepted = false;\n                }\n                break;\n            }\n            case MotionEvent.ACTION_UP: {\n                intercepted = false;\n                break;\n            }\n            default:\n                break;\n        }\n\n        Log.d(TAG, \"intercepted=\" + intercepted);\n        mLastX = x;\n        mLastY = y;\n        mLastXIntercept = x;\n        mLastYIntercept = y;\n\n        return intercepted;\n    }\n\n    @Override\n    public boolean onTouchEvent(MotionEvent event) {\n        mVelocityTracker.addMovement(event);\n        int x = (int) event.getX();\n        int y = (int) event.getY();\n        switch (event.getAction()) {\n            case MotionEvent.ACTION_DOWN: {\n                Log.d(TAG, \"onTouchEvent: ACTION_DOWN\");\n                if (!mScroller.isFinished()) {\n                    mScroller.abortAnimation();\n                }\n                break;\n            }\n            case MotionEvent.ACTION_MOVE: {\n                Log.d(TAG, \"onTouchEvent: ACTION_MOVE\");\n                int deltaX = x - mLastX;\n                int deltaY = y - mLastY;\n                Log.d(TAG, \"onTouchEvent: deltaX\" + deltaX);\n                scrollBy(-deltaX, 0);\n                break;\n            }\n            case MotionEvent.ACTION_UP: {\n\n                int scrollX = getScrollX();\n                int scrollToChildIndex = scrollX / mChildWidth;\n                mVelocityTracker.computeCurrentVelocity(1000);\n                float xVelocity = mVelocityTracker.getXVelocity();\n\n                //滑的速度到达阈值就认为需要进入下一页\n                if (Math.abs(xVelocity) >= 100) {\n                    mChildIndex = xVelocity > 0 ? mChildIndex - 1 : mChildIndex + 1;\n                } else {\n                    //滑动的距离超过一半，就进入下一页\n                    mChildIndex = (scrollX + mChildWidth / 2) / mChildWidth;\n                }\n                //保证在0页和最后一页滑动时不会越界\n                mChildIndex = Math.max(0, Math.min(mChildIndex, mChildrenSize - 1));\n                //没有达到进入下一页的要求，恢复原样\n                int dx = mChildIndex * mChildWidth - scrollX;\n                smoothScrollBy(dx, 0);\n                Log.d(TAG, \"onTouchEvent: dx = \" + dx);\n                mVelocityTracker.clear();\n                break;\n            }\n            default:\n                break;\n        }\n\n        mLastX = x;\n        mLastY = y;\n        return true;\n    }\n\n    @Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n        int measuredWidth = 0;\n        int measuredHeight = 0;\n        final int childCount = getChildCount();\n        measureChildren(widthMeasureSpec, heightMeasureSpec);\n\n        int widthSpaceSize = MeasureSpec.getSize(widthMeasureSpec);\n        int widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);\n        int heightSpaceSize = MeasureSpec.getSize(heightMeasureSpec);\n        int heightSpecMode = MeasureSpec.getMode(heightMeasureSpec);\n        if (childCount == 0) {\n            setMeasuredDimension(0, 0);\n        } else if (heightSpecMode == MeasureSpec.AT_MOST) {\n            final View childView = getChildAt(0);\n            measuredHeight = childView.getMeasuredHeight();\n            setMeasuredDimension(widthSpaceSize, childView.getMeasuredHeight());\n        } else if (widthSpecMode == MeasureSpec.AT_MOST) {\n            final View childView = getChildAt(0);\n            measuredWidth = childView.getMeasuredWidth() * childCount;\n            setMeasuredDimension(measuredWidth, heightSpaceSize);\n        } else {\n            final View childView = getChildAt(0);\n            measuredWidth = childView.getMeasuredWidth() * childCount;\n            measuredHeight = childView.getMeasuredHeight();\n            setMeasuredDimension(measuredWidth, measuredHeight);\n        }\n    }\n\n    @Override\n    protected void onLayout(boolean changed, int l, int t, int r, int b) {\n        int childLeft = 0;\n        final int childCount = getChildCount();\n        mChildrenSize = childCount;\n\n        for (int i = 0; i < childCount; i++) {\n            final View childView = getChildAt(i);\n            if (childView.getVisibility() != View.GONE) {\n                final int childWidth = childView.getMeasuredWidth();\n                mChildWidth = childWidth;\n                childView.layout(childLeft, 0, childLeft + childWidth,\n                        childView.getMeasuredHeight());\n                childLeft += childWidth;\n            }\n        }\n    }\n\n    private void smoothScrollBy(int dx, int dy) {\n        mScroller.startScroll(getScrollX(), 0, dx, 0, 500);\n        invalidate();\n    }\n\n    @Override\n    public void computeScroll() {\n        if (mScroller.computeScrollOffset()) {\n            scrollTo(mScroller.getCurrX(), mScroller.getCurrY());\n            postInvalidate();\n        }\n    }\n\n    @Override\n    protected void onDetachedFromWindow() {\n        mVelocityTracker.recycle();\n        super.onDetachedFromWindow();\n    }\n}\n```\n\n欢迎转载，转载请注明出处[]()","source":"_posts/View的滑动冲突.md","raw":"title: View的滑动冲突\ncategories:\n- Android\n- Android开发艺术探索笔记\ntags:\n- Android\n- View\n- 滑动冲突\n---\n相信开发Android的人都会有这种体会：从网上下载的demo运行的好好的，但是只要出现了滑动冲突，Demo就无法正常工作了。但是不用担心，解决滑动冲突有固定的模式，常见的有内部拦截和外部拦截两种，只要按照这个模式来就可以顺利解决。\n<!-- more -->\n#介绍\n相信开发Android的人都会有这种体会：从网上下载的demo运行的好好的，但是只要出现了滑动冲突，Demo就无法正常工作了。但是不用担心，解决滑动冲突有固定的模式，常见的有内部拦截和外部拦截两种，只要按照这个模式来就可以顺利解决。本文会涉及到View事件分发的相关知识，关于事件分发请参考[http://blog.csdn.net/l664675249/article/details/50738102](http://blog.csdn.net/l664675249/article/details/50738102)\n\n#常见的滑动冲突场景\n\n[图片](http://)\n\n#示例\n\n\n#处理规则\n对于场景1，处理规则为：当用户左右滑动时，让外部的View拦截点击事件，当用户上下滑动时，让内部的View拦截点击事件。当产生滑动时，根据滑动的起始点与终点坐标位置，如果垂直方向滑动距离大，就判断为垂直滑动，否则判断为水平滑动。其他两种情况处理方法相似，**都是从业务需求上得出相应的规则。**\n\n#解决方法\n##外部拦截发\n所有的点击事件都先经过父容器拦截处理，如果父容器需要拦截就拦截，不需要就传给内部的View。伪代码如下\n```java\n  public boolean onInterceptTouchEvent(MotionEvent event) {\n        boolean intercepted = false;\n\n        switch (event.getAction()) {\n            case MotionEvent.ACTION_DOWN: {\n            \tintercepted = false;\n                break;\n            }\n            case MotionEvent.ACTION_MOVE: {\n                if (满足父容器的拦截要求) {\n                    intercepted = true;\n                } else {\n                    intercepted = false;\n                }\n                break;\n            }\n            case MotionEvent.ACTION_UP: {\n                intercepted = false;\n                break;\n            }\n            default:\n                break;\n        }\n        mLastXIntercept = x;\n        mLastYIntercept = y;\n        return intercepted;\n    }\n```\n\n**注：**\nACTION_DOWN这个事件是不能拦截的，因为一旦拦截后续的事件都会由父容器处理了。\n\n##内部拦截法\n父容器不拦截任何事件，所有事件都传给子元素。如果子元素需要此事件就直接消耗，否则就交给父容器进行处理。完成这个功能需要配合requestDisallowInterceptTouchEvent()方法才可。这个方法表示是否让父容器拦截事件。伪代码如下：\n\n```java\n public boolean dispatchTouchEvent(MotionEvent event) {\n        int x = (int) event.getX();\n        int y = (int) event.getY();\n\n        switch (event.getAction()) {\n        case MotionEvent.ACTION_DOWN: {\n            parent.requestDisallowInterceptTouchEvent(true);\n            break;\n        }\n        case MotionEvent.ACTION_MOVE: {\n            if (满足父容器的拦截要求) {\n                parent.requestDisallowInterceptTouchEvent(false);\n            }\n            break;\n        }\n        case MotionEvent.ACTION_UP: {\n            break;\n        }\n        default:\n            break;\n        }\n        mLastX = x;\n        mLastY = y;\n        return super.dispatchTouchEvent(event);\n    }\n```\n\n**注**\n父容器默认拦截除了ACTION_DOWN以外的其他事件，这样子当元素调用parent.requestDisallowInterceptTouchEvent(false)时，父元素才能拦截所需的事件。\n\n#总结\n\n- 解决滑动冲突有两种方法，推荐外部拦截法，实现起来简单。\n- 本文以场景1为例做了讲解，场景2,3的做法与1类似，都是根据业务需要制定处理规则。\n\n\n#示例效果的源码\n##Activity\n```java\npublic class DemoActivity_1 extends Activity {\n    private static final String TAG = \"DemoActivity_1\";\n\n    private HorizontalScrollViewEx mListContainer;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.demo_1);\n        Log.d(TAG, \"onCreate\");\n        initView();\n    }\n\n    private void initView() {\n        LayoutInflater inflater = getLayoutInflater();\n        mListContainer = (HorizontalScrollViewEx) findViewById(R.id.container);\n        final int screenWidth = MyUtils.getScreenMetrics(this).widthPixels;\n        final int screenHeight = MyUtils.getScreenMetrics(this).heightPixels;\n        for (int i = 0; i < 3; i++) {\n            ViewGroup layout = (ViewGroup) inflater.inflate(\n                    R.layout.content_layout, mListContainer, false);\n            layout.getLayoutParams().width = screenWidth;\n            TextView textView = (TextView) layout.findViewById(R.id.title);\n            textView.setText(\"page \" + (i + 1));\n            layout.setBackgroundColor(Color.rgb(255 / (i + 1), 255 / (i + 1), 0));\n            createList(layout);\n            mListContainer.addView(layout);\n        }\n    }\n\n    private void createList(ViewGroup layout) {\n        ListView listView = (ListView) layout.findViewById(R.id.list);\n        ArrayList<String> datas = new ArrayList<String>();\n        for (int i = 0; i < 50; i++) {\n            datas.add(\"name \" + i);\n        }\n\n        ArrayAdapter<String> adapter = new ArrayAdapter<String>(this,\n                R.layout.content_list_item, R.id.name, datas);\n        listView.setAdapter(adapter);\n        listView.setOnItemClickListener(new OnItemClickListener() {\n            @Override\n            public void onItemClick(AdapterView<?> parent, View view,\n                    int position, long id) {\n                Toast.makeText(DemoActivity_1.this, \"click item\",\n                        Toast.LENGTH_SHORT).show();\n\n            }\n        });\n    }\n}\n```\n##水平滑动的View\n```java\npublic class HorizontalScrollViewEx extends ViewGroup {\n    private static final String TAG = \"HorizontalScrollViewEx\";\n\n    private int mChildrenSize;\n    private int mChildWidth;\n    private int mChildIndex;\n\n    // 分别记录上次滑动的坐标\n    private int mLastX = 0;\n    private int mLastY = 0;\n    // 分别记录上次滑动的坐标(onInterceptTouchEvent)\n    private int mLastXIntercept = 0;\n    private int mLastYIntercept = 0;\n\n    private Scroller mScroller;\n    private VelocityTracker mVelocityTracker;\n\n    public HorizontalScrollViewEx(Context context) {\n        super(context);\n        init();\n    }\n\n    public HorizontalScrollViewEx(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        init();\n    }\n\n    public HorizontalScrollViewEx(Context context, AttributeSet attrs,\n                                  int defStyle) {\n        super(context, attrs, defStyle);\n        init();\n    }\n\n    private void init() {\n        mScroller = new Scroller(getContext());\n        mVelocityTracker = VelocityTracker.obtain();\n    }\n\n    @Override\n    public boolean onInterceptTouchEvent(MotionEvent event) {\n        boolean intercepted = false;\n        int x = (int) event.getX();\n        int y = (int) event.getY();\n\n        switch (event.getAction()) {\n            case MotionEvent.ACTION_DOWN: {\n                Log.d(TAG, \"onInterceptTouchEvent: ACTION_DOWN\");\n                intercepted = false;\n                if (!mScroller.isFinished()) {\n                    mScroller.abortAnimation();\n                    intercepted = true;\n                }\n                break;\n            }\n            case MotionEvent.ACTION_MOVE: {\n                Log.d(TAG, \"onInterceptTouchEvent: ACTION_MOVE\");\n                int deltaX = x - mLastXIntercept;\n                int deltaY = y - mLastYIntercept;\n                if (Math.abs(deltaX) > Math.abs(deltaY)) {\n                    intercepted = true;\n                } else {\n                    intercepted = false;\n                }\n                break;\n            }\n            case MotionEvent.ACTION_UP: {\n                intercepted = false;\n                break;\n            }\n            default:\n                break;\n        }\n\n        Log.d(TAG, \"intercepted=\" + intercepted);\n        mLastX = x;\n        mLastY = y;\n        mLastXIntercept = x;\n        mLastYIntercept = y;\n\n        return intercepted;\n    }\n\n    @Override\n    public boolean onTouchEvent(MotionEvent event) {\n        mVelocityTracker.addMovement(event);\n        int x = (int) event.getX();\n        int y = (int) event.getY();\n        switch (event.getAction()) {\n            case MotionEvent.ACTION_DOWN: {\n                Log.d(TAG, \"onTouchEvent: ACTION_DOWN\");\n                if (!mScroller.isFinished()) {\n                    mScroller.abortAnimation();\n                }\n                break;\n            }\n            case MotionEvent.ACTION_MOVE: {\n                Log.d(TAG, \"onTouchEvent: ACTION_MOVE\");\n                int deltaX = x - mLastX;\n                int deltaY = y - mLastY;\n                Log.d(TAG, \"onTouchEvent: deltaX\" + deltaX);\n                scrollBy(-deltaX, 0);\n                break;\n            }\n            case MotionEvent.ACTION_UP: {\n\n                int scrollX = getScrollX();\n                int scrollToChildIndex = scrollX / mChildWidth;\n                mVelocityTracker.computeCurrentVelocity(1000);\n                float xVelocity = mVelocityTracker.getXVelocity();\n\n                //滑的速度到达阈值就认为需要进入下一页\n                if (Math.abs(xVelocity) >= 100) {\n                    mChildIndex = xVelocity > 0 ? mChildIndex - 1 : mChildIndex + 1;\n                } else {\n                    //滑动的距离超过一半，就进入下一页\n                    mChildIndex = (scrollX + mChildWidth / 2) / mChildWidth;\n                }\n                //保证在0页和最后一页滑动时不会越界\n                mChildIndex = Math.max(0, Math.min(mChildIndex, mChildrenSize - 1));\n                //没有达到进入下一页的要求，恢复原样\n                int dx = mChildIndex * mChildWidth - scrollX;\n                smoothScrollBy(dx, 0);\n                Log.d(TAG, \"onTouchEvent: dx = \" + dx);\n                mVelocityTracker.clear();\n                break;\n            }\n            default:\n                break;\n        }\n\n        mLastX = x;\n        mLastY = y;\n        return true;\n    }\n\n    @Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n        int measuredWidth = 0;\n        int measuredHeight = 0;\n        final int childCount = getChildCount();\n        measureChildren(widthMeasureSpec, heightMeasureSpec);\n\n        int widthSpaceSize = MeasureSpec.getSize(widthMeasureSpec);\n        int widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);\n        int heightSpaceSize = MeasureSpec.getSize(heightMeasureSpec);\n        int heightSpecMode = MeasureSpec.getMode(heightMeasureSpec);\n        if (childCount == 0) {\n            setMeasuredDimension(0, 0);\n        } else if (heightSpecMode == MeasureSpec.AT_MOST) {\n            final View childView = getChildAt(0);\n            measuredHeight = childView.getMeasuredHeight();\n            setMeasuredDimension(widthSpaceSize, childView.getMeasuredHeight());\n        } else if (widthSpecMode == MeasureSpec.AT_MOST) {\n            final View childView = getChildAt(0);\n            measuredWidth = childView.getMeasuredWidth() * childCount;\n            setMeasuredDimension(measuredWidth, heightSpaceSize);\n        } else {\n            final View childView = getChildAt(0);\n            measuredWidth = childView.getMeasuredWidth() * childCount;\n            measuredHeight = childView.getMeasuredHeight();\n            setMeasuredDimension(measuredWidth, measuredHeight);\n        }\n    }\n\n    @Override\n    protected void onLayout(boolean changed, int l, int t, int r, int b) {\n        int childLeft = 0;\n        final int childCount = getChildCount();\n        mChildrenSize = childCount;\n\n        for (int i = 0; i < childCount; i++) {\n            final View childView = getChildAt(i);\n            if (childView.getVisibility() != View.GONE) {\n                final int childWidth = childView.getMeasuredWidth();\n                mChildWidth = childWidth;\n                childView.layout(childLeft, 0, childLeft + childWidth,\n                        childView.getMeasuredHeight());\n                childLeft += childWidth;\n            }\n        }\n    }\n\n    private void smoothScrollBy(int dx, int dy) {\n        mScroller.startScroll(getScrollX(), 0, dx, 0, 500);\n        invalidate();\n    }\n\n    @Override\n    public void computeScroll() {\n        if (mScroller.computeScrollOffset()) {\n            scrollTo(mScroller.getCurrX(), mScroller.getCurrY());\n            postInvalidate();\n        }\n    }\n\n    @Override\n    protected void onDetachedFromWindow() {\n        mVelocityTracker.recycle();\n        super.onDetachedFromWindow();\n    }\n}\n```\n\n欢迎转载，转载请注明出处[]()","slug":"View的滑动冲突","published":1,"date":"2016-03-12T05:28:32.363Z","updated":"2016-03-12T05:28:32.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilop1put000eqcmyaliz07x2","content":"<p>相信开发Android的人都会有这种体会：从网上下载的demo运行的好好的，但是只要出现了滑动冲突，Demo就无法正常工作了。但是不用担心，解决滑动冲突有固定的模式，常见的有内部拦截和外部拦截两种，只要按照这个模式来就可以顺利解决。<br><a id=\"more\"></a></p>\n<p>#介绍<br>相信开发Android的人都会有这种体会：从网上下载的demo运行的好好的，但是只要出现了滑动冲突，Demo就无法正常工作了。但是不用担心，解决滑动冲突有固定的模式，常见的有内部拦截和外部拦截两种，只要按照这个模式来就可以顺利解决。本文会涉及到View事件分发的相关知识，关于事件分发请参考<a href=\"http://blog.csdn.net/l664675249/article/details/50738102\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/l664675249/article/details/50738102</a></p>\n<p>#常见的滑动冲突场景</p>\n<p><a href=\"http://\" target=\"_blank\" rel=\"external\">图片</a></p>\n<p>#示例</p>\n<p>#处理规则<br>对于场景1，处理规则为：当用户左右滑动时，让外部的View拦截点击事件，当用户上下滑动时，让内部的View拦截点击事件。当产生滑动时，根据滑动的起始点与终点坐标位置，如果垂直方向滑动距离大，就判断为垂直滑动，否则判断为水平滑动。其他两种情况处理方法相似，<strong>都是从业务需求上得出相应的规则。</strong></p>\n<p>#解决方法</p>\n<p>##外部拦截发<br>所有的点击事件都先经过父容器拦截处理，如果父容器需要拦截就拦截，不需要就传给内部的View。伪代码如下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onInterceptTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">boolean</span> intercepted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (event.getAction()) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN: &#123;</span><br><span class=\"line\">          \tintercepted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">              <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE: &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (满足父容器的拦截要求) &#123;</span><br><span class=\"line\">                  intercepted = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                  intercepted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">case</span> MotionEvent.ACTION_UP: &#123;</span><br><span class=\"line\">              intercepted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">              <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">default</span>:</span><br><span class=\"line\">              <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      mLastXIntercept = x;</span><br><span class=\"line\">      mLastYIntercept = y;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> intercepted;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>注：</strong><br>ACTION_DOWN这个事件是不能拦截的，因为一旦拦截后续的事件都会由父容器处理了。</p>\n<p>##内部拦截法<br>父容器不拦截任何事件，所有事件都传给子元素。如果子元素需要此事件就直接消耗，否则就交给父容器进行处理。完成这个功能需要配合requestDisallowInterceptTouchEvent()方法才可。这个方法表示是否让父容器拦截事件。伪代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> x = (<span class=\"keyword\">int</span>) event.getX();</span><br><span class=\"line\">       <span class=\"keyword\">int</span> y = (<span class=\"keyword\">int</span>) event.getY();</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">switch</span> (event.getAction()) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN: &#123;</span><br><span class=\"line\">           parent.requestDisallowInterceptTouchEvent(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">           <span class=\"keyword\">break</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE: &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (满足父容器的拦截要求) &#123;</span><br><span class=\"line\">               parent.requestDisallowInterceptTouchEvent(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">break</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> MotionEvent.ACTION_UP: &#123;</span><br><span class=\"line\">           <span class=\"keyword\">break</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">default</span>:</span><br><span class=\"line\">           <span class=\"keyword\">break</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       mLastX = x;</span><br><span class=\"line\">       mLastY = y;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.dispatchTouchEvent(event);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注</strong><br>父容器默认拦截除了ACTION_DOWN以外的其他事件，这样子当元素调用parent.requestDisallowInterceptTouchEvent(false)时，父元素才能拦截所需的事件。</p>\n<p>#总结</p>\n<ul>\n<li>解决滑动冲突有两种方法，推荐外部拦截法，实现起来简单。</li>\n<li>本文以场景1为例做了讲解，场景2,3的做法与1类似，都是根据业务需要制定处理规则。</li>\n</ul>\n<p>#示例效果的源码</p>\n<p>##Activity<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoActivity_1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"DemoActivity_1\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HorizontalScrollViewEx mListContainer;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.demo_1);</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">\"onCreate\"</span>);</span><br><span class=\"line\">        initView();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initView</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        LayoutInflater inflater = getLayoutInflater();</span><br><span class=\"line\">        mListContainer = (HorizontalScrollViewEx) findViewById(R.id.container);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> screenWidth = MyUtils.getScreenMetrics(<span class=\"keyword\">this</span>).widthPixels;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> screenHeight = MyUtils.getScreenMetrics(<span class=\"keyword\">this</span>).heightPixels;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">            ViewGroup layout = (ViewGroup) inflater.inflate(</span><br><span class=\"line\">                    R.layout.content_layout, mListContainer, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">            layout.getLayoutParams().width = screenWidth;</span><br><span class=\"line\">            TextView textView = (TextView) layout.findViewById(R.id.title);</span><br><span class=\"line\">            textView.setText(<span class=\"string\">\"page \"</span> + (i + <span class=\"number\">1</span>));</span><br><span class=\"line\">            layout.setBackgroundColor(Color.rgb(<span class=\"number\">255</span> / (i + <span class=\"number\">1</span>), <span class=\"number\">255</span> / (i + <span class=\"number\">1</span>), <span class=\"number\">0</span>));</span><br><span class=\"line\">            createList(layout);</span><br><span class=\"line\">            mListContainer.addView(layout);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">createList</span><span class=\"params\">(ViewGroup layout)</span> </span>&#123;</span><br><span class=\"line\">        ListView listView = (ListView) layout.findViewById(R.id.list);</span><br><span class=\"line\">        ArrayList&lt;String&gt; datas = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">50</span>; i++) &#123;</span><br><span class=\"line\">            datas.add(<span class=\"string\">\"name \"</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        ArrayAdapter&lt;String&gt; adapter = <span class=\"keyword\">new</span> ArrayAdapter&lt;String&gt;(<span class=\"keyword\">this</span>,</span><br><span class=\"line\">                R.layout.content_list_item, R.id.name, datas);</span><br><span class=\"line\">        listView.setAdapter(adapter);</span><br><span class=\"line\">        listView.setOnItemClickListener(<span class=\"keyword\">new</span> OnItemClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onItemClick</span><span class=\"params\">(AdapterView&lt;?&gt; parent, View view,</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> position, <span class=\"keyword\">long</span> id)</span> </span>&#123;</span><br><span class=\"line\">                Toast.makeText(DemoActivity_1.<span class=\"keyword\">this</span>, <span class=\"string\">\"click item\"</span>,</span><br><span class=\"line\">                        Toast.LENGTH_SHORT).show();</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>##水平滑动的View<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HorizontalScrollViewEx</span> <span class=\"keyword\">extends</span> <span class=\"title\">ViewGroup</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"HorizontalScrollViewEx\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mChildrenSize;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mChildWidth;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mChildIndex;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 分别记录上次滑动的坐标</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mLastX = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mLastY = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 分别记录上次滑动的坐标(onInterceptTouchEvent)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mLastXIntercept = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mLastYIntercept = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Scroller mScroller;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> VelocityTracker mVelocityTracker;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HorizontalScrollViewEx</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context);</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HorizontalScrollViewEx</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HorizontalScrollViewEx</span><span class=\"params\">(Context context, AttributeSet attrs,</span><br><span class=\"line\">                                  <span class=\"keyword\">int</span> defStyle)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyle);</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mScroller = <span class=\"keyword\">new</span> Scroller(getContext());</span><br><span class=\"line\">        mVelocityTracker = VelocityTracker.obtain();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onInterceptTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> intercepted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = (<span class=\"keyword\">int</span>) event.getX();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> y = (<span class=\"keyword\">int</span>) event.getY();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (event.getAction()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN: &#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">\"onInterceptTouchEvent: ACTION_DOWN\"</span>);</span><br><span class=\"line\">                intercepted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!mScroller.isFinished()) &#123;</span><br><span class=\"line\">                    mScroller.abortAnimation();</span><br><span class=\"line\">                    intercepted = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE: &#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">\"onInterceptTouchEvent: ACTION_MOVE\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">int</span> deltaX = x - mLastXIntercept;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> deltaY = y - mLastYIntercept;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (Math.abs(deltaX) &gt; Math.abs(deltaY)) &#123;</span><br><span class=\"line\">                    intercepted = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    intercepted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_UP: &#123;</span><br><span class=\"line\">                intercepted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">\"intercepted=\"</span> + intercepted);</span><br><span class=\"line\">        mLastX = x;</span><br><span class=\"line\">        mLastY = y;</span><br><span class=\"line\">        mLastXIntercept = x;</span><br><span class=\"line\">        mLastYIntercept = y;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> intercepted;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">        mVelocityTracker.addMovement(event);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = (<span class=\"keyword\">int</span>) event.getX();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> y = (<span class=\"keyword\">int</span>) event.getY();</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (event.getAction()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN: &#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">\"onTouchEvent: ACTION_DOWN\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!mScroller.isFinished()) &#123;</span><br><span class=\"line\">                    mScroller.abortAnimation();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE: &#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">\"onTouchEvent: ACTION_MOVE\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">int</span> deltaX = x - mLastX;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> deltaY = y - mLastY;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">\"onTouchEvent: deltaX\"</span> + deltaX);</span><br><span class=\"line\">                scrollBy(-deltaX, <span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_UP: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">int</span> scrollX = getScrollX();</span><br><span class=\"line\">                <span class=\"keyword\">int</span> scrollToChildIndex = scrollX / mChildWidth;</span><br><span class=\"line\">                mVelocityTracker.computeCurrentVelocity(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                <span class=\"keyword\">float</span> xVelocity = mVelocityTracker.getXVelocity();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//滑的速度到达阈值就认为需要进入下一页</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (Math.abs(xVelocity) &gt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">                    mChildIndex = xVelocity &gt; <span class=\"number\">0</span> ? mChildIndex - <span class=\"number\">1</span> : mChildIndex + <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//滑动的距离超过一半，就进入下一页</span></span><br><span class=\"line\">                    mChildIndex = (scrollX + mChildWidth / <span class=\"number\">2</span>) / mChildWidth;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//保证在0页和最后一页滑动时不会越界</span></span><br><span class=\"line\">                mChildIndex = Math.max(<span class=\"number\">0</span>, Math.min(mChildIndex, mChildrenSize - <span class=\"number\">1</span>));</span><br><span class=\"line\">                <span class=\"comment\">//没有达到进入下一页的要求，恢复原样</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> dx = mChildIndex * mChildWidth - scrollX;</span><br><span class=\"line\">                smoothScrollBy(dx, <span class=\"number\">0</span>);</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">\"onTouchEvent: dx = \"</span> + dx);</span><br><span class=\"line\">                mVelocityTracker.clear();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        mLastX = x;</span><br><span class=\"line\">        mLastY = y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> measuredWidth = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> measuredHeight = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childCount = getChildCount();</span><br><span class=\"line\">        measureChildren(widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> widthSpaceSize = MeasureSpec.getSize(widthMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> heightSpaceSize = MeasureSpec.getSize(heightMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> heightSpecMode = MeasureSpec.getMode(heightMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childCount == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            setMeasuredDimension(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (heightSpecMode == MeasureSpec.AT_MOST) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> View childView = getChildAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">            measuredHeight = childView.getMeasuredHeight();</span><br><span class=\"line\">            setMeasuredDimension(widthSpaceSize, childView.getMeasuredHeight());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (widthSpecMode == MeasureSpec.AT_MOST) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> View childView = getChildAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">            measuredWidth = childView.getMeasuredWidth() * childCount;</span><br><span class=\"line\">            setMeasuredDimension(measuredWidth, heightSpaceSize);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> View childView = getChildAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">            measuredWidth = childView.getMeasuredWidth() * childCount;</span><br><span class=\"line\">            measuredHeight = childView.getMeasuredHeight();</span><br><span class=\"line\">            setMeasuredDimension(measuredWidth, measuredHeight);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> childLeft = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childCount = getChildCount();</span><br><span class=\"line\">        mChildrenSize = childCount;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; childCount; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> View childView = getChildAt(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (childView.getVisibility() != View.GONE) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidth = childView.getMeasuredWidth();</span><br><span class=\"line\">                mChildWidth = childWidth;</span><br><span class=\"line\">                childView.layout(childLeft, <span class=\"number\">0</span>, childLeft + childWidth,</span><br><span class=\"line\">                        childView.getMeasuredHeight());</span><br><span class=\"line\">                childLeft += childWidth;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">smoothScrollBy</span><span class=\"params\">(<span class=\"keyword\">int</span> dx, <span class=\"keyword\">int</span> dy)</span> </span>&#123;</span><br><span class=\"line\">        mScroller.startScroll(getScrollX(), <span class=\"number\">0</span>, dx, <span class=\"number\">0</span>, <span class=\"number\">500</span>);</span><br><span class=\"line\">        invalidate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">computeScroll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mScroller.computeScrollOffset()) &#123;</span><br><span class=\"line\">            scrollTo(mScroller.getCurrX(), mScroller.getCurrY());</span><br><span class=\"line\">            postInvalidate();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDetachedFromWindow</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mVelocityTracker.recycle();</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDetachedFromWindow();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>欢迎转载，转载请注明出处<a href=\"\"></a></p>\n","excerpt":"<p>相信开发Android的人都会有这种体会：从网上下载的demo运行的好好的，但是只要出现了滑动冲突，Demo就无法正常工作了。但是不用担心，解决滑动冲突有固定的模式，常见的有内部拦截和外部拦截两种，只要按照这个模式来就可以顺利解决。<br>","more":"</p>\n<p>#介绍<br>相信开发Android的人都会有这种体会：从网上下载的demo运行的好好的，但是只要出现了滑动冲突，Demo就无法正常工作了。但是不用担心，解决滑动冲突有固定的模式，常见的有内部拦截和外部拦截两种，只要按照这个模式来就可以顺利解决。本文会涉及到View事件分发的相关知识，关于事件分发请参考<a href=\"http://blog.csdn.net/l664675249/article/details/50738102\">http://blog.csdn.net/l664675249/article/details/50738102</a></p>\n<p>#常见的滑动冲突场景</p>\n<p><a href=\"http://\">图片</a></p>\n<p>#示例</p>\n<p>#处理规则<br>对于场景1，处理规则为：当用户左右滑动时，让外部的View拦截点击事件，当用户上下滑动时，让内部的View拦截点击事件。当产生滑动时，根据滑动的起始点与终点坐标位置，如果垂直方向滑动距离大，就判断为垂直滑动，否则判断为水平滑动。其他两种情况处理方法相似，<strong>都是从业务需求上得出相应的规则。</strong></p>\n<p>#解决方法</p>\n<p>##外部拦截发<br>所有的点击事件都先经过父容器拦截处理，如果父容器需要拦截就拦截，不需要就传给内部的View。伪代码如下<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onInterceptTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">boolean</span> intercepted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (event.getAction()) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN: &#123;</span><br><span class=\"line\">          \tintercepted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">              <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE: &#123;</span><br><span class=\"line\">              <span class=\"keyword\">if</span> (满足父容器的拦截要求) &#123;</span><br><span class=\"line\">                  intercepted = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">              &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                  intercepted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">              <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">case</span> MotionEvent.ACTION_UP: &#123;</span><br><span class=\"line\">              intercepted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">              <span class=\"keyword\">break</span>;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          <span class=\"keyword\">default</span>:</span><br><span class=\"line\">              <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      mLastXIntercept = x;</span><br><span class=\"line\">      mLastYIntercept = y;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> intercepted;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>注：</strong><br>ACTION_DOWN这个事件是不能拦截的，因为一旦拦截后续的事件都会由父容器处理了。</p>\n<p>##内部拦截法<br>父容器不拦截任何事件，所有事件都传给子元素。如果子元素需要此事件就直接消耗，否则就交给父容器进行处理。完成这个功能需要配合requestDisallowInterceptTouchEvent()方法才可。这个方法表示是否让父容器拦截事件。伪代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">dispatchTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">int</span> x = (<span class=\"keyword\">int</span>) event.getX();</span><br><span class=\"line\">       <span class=\"keyword\">int</span> y = (<span class=\"keyword\">int</span>) event.getY();</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">switch</span> (event.getAction()) &#123;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN: &#123;</span><br><span class=\"line\">           parent.requestDisallowInterceptTouchEvent(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">           <span class=\"keyword\">break</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE: &#123;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (满足父容器的拦截要求) &#123;</span><br><span class=\"line\">               parent.requestDisallowInterceptTouchEvent(<span class=\"keyword\">false</span>);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">break</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">case</span> MotionEvent.ACTION_UP: &#123;</span><br><span class=\"line\">           <span class=\"keyword\">break</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">default</span>:</span><br><span class=\"line\">           <span class=\"keyword\">break</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       mLastX = x;</span><br><span class=\"line\">       mLastY = y;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.dispatchTouchEvent(event);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>注</strong><br>父容器默认拦截除了ACTION_DOWN以外的其他事件，这样子当元素调用parent.requestDisallowInterceptTouchEvent(false)时，父元素才能拦截所需的事件。</p>\n<p>#总结</p>\n<ul>\n<li>解决滑动冲突有两种方法，推荐外部拦截法，实现起来简单。</li>\n<li>本文以场景1为例做了讲解，场景2,3的做法与1类似，都是根据业务需要制定处理规则。</li>\n</ul>\n<p>#示例效果的源码</p>\n<p>##Activity<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoActivity_1</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"DemoActivity_1\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> HorizontalScrollViewEx mListContainer;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.demo_1);</span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">\"onCreate\"</span>);</span><br><span class=\"line\">        initView();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initView</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        LayoutInflater inflater = getLayoutInflater();</span><br><span class=\"line\">        mListContainer = (HorizontalScrollViewEx) findViewById(R.id.container);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> screenWidth = MyUtils.getScreenMetrics(<span class=\"keyword\">this</span>).widthPixels;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> screenHeight = MyUtils.getScreenMetrics(<span class=\"keyword\">this</span>).heightPixels;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">            ViewGroup layout = (ViewGroup) inflater.inflate(</span><br><span class=\"line\">                    R.layout.content_layout, mListContainer, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">            layout.getLayoutParams().width = screenWidth;</span><br><span class=\"line\">            TextView textView = (TextView) layout.findViewById(R.id.title);</span><br><span class=\"line\">            textView.setText(<span class=\"string\">\"page \"</span> + (i + <span class=\"number\">1</span>));</span><br><span class=\"line\">            layout.setBackgroundColor(Color.rgb(<span class=\"number\">255</span> / (i + <span class=\"number\">1</span>), <span class=\"number\">255</span> / (i + <span class=\"number\">1</span>), <span class=\"number\">0</span>));</span><br><span class=\"line\">            createList(layout);</span><br><span class=\"line\">            mListContainer.addView(layout);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">createList</span><span class=\"params\">(ViewGroup layout)</span> </span>&#123;</span><br><span class=\"line\">        ListView listView = (ListView) layout.findViewById(R.id.list);</span><br><span class=\"line\">        ArrayList&lt;String&gt; datas = <span class=\"keyword\">new</span> ArrayList&lt;String&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">50</span>; i++) &#123;</span><br><span class=\"line\">            datas.add(<span class=\"string\">\"name \"</span> + i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        ArrayAdapter&lt;String&gt; adapter = <span class=\"keyword\">new</span> ArrayAdapter&lt;String&gt;(<span class=\"keyword\">this</span>,</span><br><span class=\"line\">                R.layout.content_list_item, R.id.name, datas);</span><br><span class=\"line\">        listView.setAdapter(adapter);</span><br><span class=\"line\">        listView.setOnItemClickListener(<span class=\"keyword\">new</span> OnItemClickListener() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onItemClick</span><span class=\"params\">(AdapterView&lt;?&gt; parent, View view,</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> position, <span class=\"keyword\">long</span> id)</span> </span>&#123;</span><br><span class=\"line\">                Toast.makeText(DemoActivity_1.<span class=\"keyword\">this</span>, <span class=\"string\">\"click item\"</span>,</span><br><span class=\"line\">                        Toast.LENGTH_SHORT).show();</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>##水平滑动的View<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HorizontalScrollViewEx</span> <span class=\"keyword\">extends</span> <span class=\"title\">ViewGroup</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"HorizontalScrollViewEx\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mChildrenSize;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mChildWidth;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mChildIndex;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 分别记录上次滑动的坐标</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mLastX = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mLastY = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 分别记录上次滑动的坐标(onInterceptTouchEvent)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mLastXIntercept = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mLastYIntercept = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Scroller mScroller;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> VelocityTracker mVelocityTracker;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HorizontalScrollViewEx</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context);</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HorizontalScrollViewEx</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HorizontalScrollViewEx</span><span class=\"params\">(Context context, AttributeSet attrs,</span><br><span class=\"line\">                                  <span class=\"keyword\">int</span> defStyle)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyle);</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mScroller = <span class=\"keyword\">new</span> Scroller(getContext());</span><br><span class=\"line\">        mVelocityTracker = VelocityTracker.obtain();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onInterceptTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> intercepted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = (<span class=\"keyword\">int</span>) event.getX();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> y = (<span class=\"keyword\">int</span>) event.getY();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (event.getAction()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN: &#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">\"onInterceptTouchEvent: ACTION_DOWN\"</span>);</span><br><span class=\"line\">                intercepted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!mScroller.isFinished()) &#123;</span><br><span class=\"line\">                    mScroller.abortAnimation();</span><br><span class=\"line\">                    intercepted = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE: &#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">\"onInterceptTouchEvent: ACTION_MOVE\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">int</span> deltaX = x - mLastXIntercept;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> deltaY = y - mLastYIntercept;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (Math.abs(deltaX) &gt; Math.abs(deltaY)) &#123;</span><br><span class=\"line\">                    intercepted = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    intercepted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_UP: &#123;</span><br><span class=\"line\">                intercepted = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Log.d(TAG, <span class=\"string\">\"intercepted=\"</span> + intercepted);</span><br><span class=\"line\">        mLastX = x;</span><br><span class=\"line\">        mLastY = y;</span><br><span class=\"line\">        mLastXIntercept = x;</span><br><span class=\"line\">        mLastYIntercept = y;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> intercepted;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">        mVelocityTracker.addMovement(event);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = (<span class=\"keyword\">int</span>) event.getX();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> y = (<span class=\"keyword\">int</span>) event.getY();</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (event.getAction()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN: &#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">\"onTouchEvent: ACTION_DOWN\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!mScroller.isFinished()) &#123;</span><br><span class=\"line\">                    mScroller.abortAnimation();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE: &#123;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">\"onTouchEvent: ACTION_MOVE\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">int</span> deltaX = x - mLastX;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> deltaY = y - mLastY;</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">\"onTouchEvent: deltaX\"</span> + deltaX);</span><br><span class=\"line\">                scrollBy(-deltaX, <span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_UP: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">int</span> scrollX = getScrollX();</span><br><span class=\"line\">                <span class=\"keyword\">int</span> scrollToChildIndex = scrollX / mChildWidth;</span><br><span class=\"line\">                mVelocityTracker.computeCurrentVelocity(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                <span class=\"keyword\">float</span> xVelocity = mVelocityTracker.getXVelocity();</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//滑的速度到达阈值就认为需要进入下一页</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (Math.abs(xVelocity) &gt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">                    mChildIndex = xVelocity &gt; <span class=\"number\">0</span> ? mChildIndex - <span class=\"number\">1</span> : mChildIndex + <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//滑动的距离超过一半，就进入下一页</span></span><br><span class=\"line\">                    mChildIndex = (scrollX + mChildWidth / <span class=\"number\">2</span>) / mChildWidth;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">//保证在0页和最后一页滑动时不会越界</span></span><br><span class=\"line\">                mChildIndex = Math.max(<span class=\"number\">0</span>, Math.min(mChildIndex, mChildrenSize - <span class=\"number\">1</span>));</span><br><span class=\"line\">                <span class=\"comment\">//没有达到进入下一页的要求，恢复原样</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> dx = mChildIndex * mChildWidth - scrollX;</span><br><span class=\"line\">                smoothScrollBy(dx, <span class=\"number\">0</span>);</span><br><span class=\"line\">                Log.d(TAG, <span class=\"string\">\"onTouchEvent: dx = \"</span> + dx);</span><br><span class=\"line\">                mVelocityTracker.clear();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        mLastX = x;</span><br><span class=\"line\">        mLastY = y;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> measuredWidth = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> measuredHeight = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childCount = getChildCount();</span><br><span class=\"line\">        measureChildren(widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> widthSpaceSize = MeasureSpec.getSize(widthMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> heightSpaceSize = MeasureSpec.getSize(heightMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> heightSpecMode = MeasureSpec.getMode(heightMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (childCount == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            setMeasuredDimension(<span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (heightSpecMode == MeasureSpec.AT_MOST) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> View childView = getChildAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">            measuredHeight = childView.getMeasuredHeight();</span><br><span class=\"line\">            setMeasuredDimension(widthSpaceSize, childView.getMeasuredHeight());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (widthSpecMode == MeasureSpec.AT_MOST) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> View childView = getChildAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">            measuredWidth = childView.getMeasuredWidth() * childCount;</span><br><span class=\"line\">            setMeasuredDimension(measuredWidth, heightSpaceSize);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> View childView = getChildAt(<span class=\"number\">0</span>);</span><br><span class=\"line\">            measuredWidth = childView.getMeasuredWidth() * childCount;</span><br><span class=\"line\">            measuredHeight = childView.getMeasuredHeight();</span><br><span class=\"line\">            setMeasuredDimension(measuredWidth, measuredHeight);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> childLeft = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childCount = getChildCount();</span><br><span class=\"line\">        mChildrenSize = childCount;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; childCount; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> View childView = getChildAt(i);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (childView.getVisibility() != View.GONE) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> childWidth = childView.getMeasuredWidth();</span><br><span class=\"line\">                mChildWidth = childWidth;</span><br><span class=\"line\">                childView.layout(childLeft, <span class=\"number\">0</span>, childLeft + childWidth,</span><br><span class=\"line\">                        childView.getMeasuredHeight());</span><br><span class=\"line\">                childLeft += childWidth;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">smoothScrollBy</span><span class=\"params\">(<span class=\"keyword\">int</span> dx, <span class=\"keyword\">int</span> dy)</span> </span>&#123;</span><br><span class=\"line\">        mScroller.startScroll(getScrollX(), <span class=\"number\">0</span>, dx, <span class=\"number\">0</span>, <span class=\"number\">500</span>);</span><br><span class=\"line\">        invalidate();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">computeScroll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mScroller.computeScrollOffset()) &#123;</span><br><span class=\"line\">            scrollTo(mScroller.getCurrX(), mScroller.getCurrY());</span><br><span class=\"line\">            postInvalidate();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDetachedFromWindow</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mVelocityTracker.recycle();</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDetachedFromWindow();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>欢迎转载，转载请注明出处<a href=\"\"></a></p>"},{"title":"属性动画","_content":"Animator最早出现在Android 3.0 中，和之前的Animation框架相比，Animator更加的灵活并且具有更多的功能，官方推荐使用Animator代替Animation。在3.0之前可以使用[nineoldandroids](http://nineoldandroids.com/)来实现相同的效果。\n<!-- more -->\n\nAnimator最早出现在Android 3.0 中，和之前的Animation框架相比，Animator更加的灵活并且具有更多的功能，官方推荐使用Animator代替Animation。在3.0之前可以使用[nineoldandroids](http://nineoldandroids.com/)来实现相同的效果。\n\n使用Animator前需要先了解几个概念：\n\n - Duration：动画播放时间\n - Time interpolation：属性值随着时间的改变情况，比如线性增长或者先快后慢\n - Repeat count：动画重复播放次数\n - Animator sets：动画集，可以使多个动画同时播放或者顺序播放\n - Frame refresh delay：动画每一帧的刷新时间，一般默认10ms刷新一次\n\n#Property Animation\nProperty Animation非常强大，他可以让你几乎在任何东西上播放动画。Property Animation的结构如下图：\n![](http://img.blog.csdn.net/20151207134608386)\n**ValueAnimator用来跟踪动画运行的时间和属性的值。其中TimeInterpolator指定了动画的 interpolation，如AccelerateDecelerateInterpolator。TypeEvaluator指定属性的值如何计算比如IntEvaluator.**\n\n#示例\n点击一个Button，Button的宽和高分别增加到500dp和400dp。\n![Click](http://img.blog.csdn.net/20160308214301229)\n\n#Property Animation与View Animation的区别\n\n - View Animation只能对View添加动画\n - View Animation只能改变如scale、rotation等值，不能改变background color等属性\n - View Animation改变的只是View画的位置，并不是真正的View，比如一个button从左到右移动，触发onClick方法的位置还是初试的位置。\n - View Animation实现起来比Property Animation简单\n\n# Evaluator\n以IntEvaluator为例，源码如下：\n```java\n   public Integer evaluate(float fraction, Integer startValue, Integer endValue) {\n        int startInt = startValue;\n        return (int)(startInt + fraction * (endValue - startInt));\n    }\n```\n很简单，就是根据初始值，结束值和当前时间与总时长的比例这三个值计算出当前某属性应该的值。\n\n#Animator\nAnimator提供了创建动画的基本结构，通常我们不直接使用它，而是使用它的子类。\n##ValueAnimator\n使用ofInt(), ofFloat(), 或者 ofObject()方法来获得ValueAnimator实例\n\n```java\nValueAnimator animation = ValueAnimator.ofFloat(0f, 1f);\nanimation.setDuration(1000);\nanimation.start();\n```\n当然也可以自定义类型\n\n```java\nValueAnimator animation = ValueAnimator.ofObject(new MyTypeEvaluator(), startPropertyValue, endPropertyValue);\nanimation.setDuration(1000);\nanimation.start();\n```\n###示例动画的源码\n```java\n  button.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                final IntEvaluator mEvaluator = new IntEvaluator();\n                ValueAnimator valueAnimator = ValueAnimator.ofInt(1, 100);\n                valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n                    @Override\n                    public void onAnimationUpdate(ValueAnimator valueAnimator) {\n                        float fraction = valueAnimator.getAnimatedFraction();\n                        button.getLayoutParams().width = mEvaluator.evaluate(fraction, button.getWidth(), 500);\n                        button.getLayoutParams().height = mEvaluator.evaluate(fraction, button.getHeight(), 400);\n                        button.requestLayout();\n                    }\n                });\n                valueAnimator.setDuration(1000).start();\n            }\n        });\n```\n\n**注：别忘了 button.requestLayout()和valueAnimator.setDuration(1000).start()。**\n\n##ObjectAnimator\nObjectAnimator是ValueAnimator 的子类。可以直接对目标属性计算。\n对foo这个对象的alpha属性做从0到1的变化，代码如下：\n\n```java\nObjectAnimator anim = ObjectAnimator.ofFloat(foo, \"alpha\", 0f, 1f);\nanim.setDuration(1000);\nanim.start();\n```\n为了使ObjectAnimator正常运行，还需要如下步骤：\n\n - 要修改的属性必须有set方法，如setFoo()\n - 如果你在values...参数中只指定了一个参数，默认为这是最后一个参数。参数必须有get方法，如getFoo()\n - 有些属性需要手动刷新，所以要在onAnimationUpdate() 中调用invalidate()。\n\n如果没有要修改的属性必须有set方法，有如下三个解决办法：\n\n - 如果有权限，添加set方法\n   但是很多情况下我们是没有的...\n - 使用这个类的wrapper class（包装类）\n   ObjectAnimator.ofFloat(wrapper, \"alpha\", 0f, 1f),在这个包装类的setAlph中对原来View的alpha属性值进行更改\n - 使用ValueAnimator\n\n#AnimatorSet\n\n一个Set中包含多个动画，使用起来也很方便，直接上代码。\n\n```java\nAnimatorSet bouncer = new AnimatorSet();\nbouncer.play(bounceAnim).before(squashAnim1);\nbouncer.play(squashAnim1).with(squashAnim2);\nbouncer.play(squashAnim1).with(stretchAnim1);\nbouncer.play(squashAnim1).with(stretchAnim2);\nbouncer.play(bounceBackAnim).after(stretchAnim2);\nValueAnimator fadeAnim = ObjectAnimator.ofFloat(newBall, \"alpha\", 1f, 0f);\nfadeAnim.setDuration(250);\nAnimatorSet animatorSet = new AnimatorSet();\nanimatorSet.play(bouncer).before(fadeAnim);\nanimatorSet.start();\n```\n#在XML中声明动画\n\n新建res/animator/目录\n每种Animator对应的标签\n\n - ValueAnimator - <animator>\n - ObjectAnimator - <objectAnimator>\n - AnimatorSet - <set>\n\n```html\n<set android:ordering=\"sequentially\">\n    <set>\n        <objectAnimator\n            android:propertyName=\"x\"\n            android:duration=\"500\"\n            android:valueTo=\"400\"\n            android:valueType=\"intType\"/>\n        <objectAnimator\n            android:propertyName=\"y\"\n            android:duration=\"500\"\n            android:valueTo=\"300\"\n            android:valueType=\"intType\"/>\n    </set>\n    <objectAnimator\n        android:propertyName=\"alpha\"\n        android:duration=\"500\"\n        android:valueTo=\"1f\"/>\n</set>\n```\n在Activity中调用\n\n```java\nAnimatorSet set = (AnimatorSet) AnimatorInflater.loadAnimator(myContext,\n    R.anim.property_animator);\nset.setTarget(myObject);\nset.start();\n```\n\n","source":"_posts/属性动画.md","raw":"title: 属性动画\ncategories:\n- Android\n- Android开发艺术探索笔记\ntags:\n- Android\n- View\n- 属性动画\n---\nAnimator最早出现在Android 3.0 中，和之前的Animation框架相比，Animator更加的灵活并且具有更多的功能，官方推荐使用Animator代替Animation。在3.0之前可以使用[nineoldandroids](http://nineoldandroids.com/)来实现相同的效果。\n<!-- more -->\n\nAnimator最早出现在Android 3.0 中，和之前的Animation框架相比，Animator更加的灵活并且具有更多的功能，官方推荐使用Animator代替Animation。在3.0之前可以使用[nineoldandroids](http://nineoldandroids.com/)来实现相同的效果。\n\n使用Animator前需要先了解几个概念：\n\n - Duration：动画播放时间\n - Time interpolation：属性值随着时间的改变情况，比如线性增长或者先快后慢\n - Repeat count：动画重复播放次数\n - Animator sets：动画集，可以使多个动画同时播放或者顺序播放\n - Frame refresh delay：动画每一帧的刷新时间，一般默认10ms刷新一次\n\n#Property Animation\nProperty Animation非常强大，他可以让你几乎在任何东西上播放动画。Property Animation的结构如下图：\n![](http://img.blog.csdn.net/20151207134608386)\n**ValueAnimator用来跟踪动画运行的时间和属性的值。其中TimeInterpolator指定了动画的 interpolation，如AccelerateDecelerateInterpolator。TypeEvaluator指定属性的值如何计算比如IntEvaluator.**\n\n#示例\n点击一个Button，Button的宽和高分别增加到500dp和400dp。\n![Click](http://img.blog.csdn.net/20160308214301229)\n\n#Property Animation与View Animation的区别\n\n - View Animation只能对View添加动画\n - View Animation只能改变如scale、rotation等值，不能改变background color等属性\n - View Animation改变的只是View画的位置，并不是真正的View，比如一个button从左到右移动，触发onClick方法的位置还是初试的位置。\n - View Animation实现起来比Property Animation简单\n\n# Evaluator\n以IntEvaluator为例，源码如下：\n```java\n   public Integer evaluate(float fraction, Integer startValue, Integer endValue) {\n        int startInt = startValue;\n        return (int)(startInt + fraction * (endValue - startInt));\n    }\n```\n很简单，就是根据初始值，结束值和当前时间与总时长的比例这三个值计算出当前某属性应该的值。\n\n#Animator\nAnimator提供了创建动画的基本结构，通常我们不直接使用它，而是使用它的子类。\n##ValueAnimator\n使用ofInt(), ofFloat(), 或者 ofObject()方法来获得ValueAnimator实例\n\n```java\nValueAnimator animation = ValueAnimator.ofFloat(0f, 1f);\nanimation.setDuration(1000);\nanimation.start();\n```\n当然也可以自定义类型\n\n```java\nValueAnimator animation = ValueAnimator.ofObject(new MyTypeEvaluator(), startPropertyValue, endPropertyValue);\nanimation.setDuration(1000);\nanimation.start();\n```\n###示例动画的源码\n```java\n  button.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                final IntEvaluator mEvaluator = new IntEvaluator();\n                ValueAnimator valueAnimator = ValueAnimator.ofInt(1, 100);\n                valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() {\n                    @Override\n                    public void onAnimationUpdate(ValueAnimator valueAnimator) {\n                        float fraction = valueAnimator.getAnimatedFraction();\n                        button.getLayoutParams().width = mEvaluator.evaluate(fraction, button.getWidth(), 500);\n                        button.getLayoutParams().height = mEvaluator.evaluate(fraction, button.getHeight(), 400);\n                        button.requestLayout();\n                    }\n                });\n                valueAnimator.setDuration(1000).start();\n            }\n        });\n```\n\n**注：别忘了 button.requestLayout()和valueAnimator.setDuration(1000).start()。**\n\n##ObjectAnimator\nObjectAnimator是ValueAnimator 的子类。可以直接对目标属性计算。\n对foo这个对象的alpha属性做从0到1的变化，代码如下：\n\n```java\nObjectAnimator anim = ObjectAnimator.ofFloat(foo, \"alpha\", 0f, 1f);\nanim.setDuration(1000);\nanim.start();\n```\n为了使ObjectAnimator正常运行，还需要如下步骤：\n\n - 要修改的属性必须有set方法，如setFoo()\n - 如果你在values...参数中只指定了一个参数，默认为这是最后一个参数。参数必须有get方法，如getFoo()\n - 有些属性需要手动刷新，所以要在onAnimationUpdate() 中调用invalidate()。\n\n如果没有要修改的属性必须有set方法，有如下三个解决办法：\n\n - 如果有权限，添加set方法\n   但是很多情况下我们是没有的...\n - 使用这个类的wrapper class（包装类）\n   ObjectAnimator.ofFloat(wrapper, \"alpha\", 0f, 1f),在这个包装类的setAlph中对原来View的alpha属性值进行更改\n - 使用ValueAnimator\n\n#AnimatorSet\n\n一个Set中包含多个动画，使用起来也很方便，直接上代码。\n\n```java\nAnimatorSet bouncer = new AnimatorSet();\nbouncer.play(bounceAnim).before(squashAnim1);\nbouncer.play(squashAnim1).with(squashAnim2);\nbouncer.play(squashAnim1).with(stretchAnim1);\nbouncer.play(squashAnim1).with(stretchAnim2);\nbouncer.play(bounceBackAnim).after(stretchAnim2);\nValueAnimator fadeAnim = ObjectAnimator.ofFloat(newBall, \"alpha\", 1f, 0f);\nfadeAnim.setDuration(250);\nAnimatorSet animatorSet = new AnimatorSet();\nanimatorSet.play(bouncer).before(fadeAnim);\nanimatorSet.start();\n```\n#在XML中声明动画\n\n新建res/animator/目录\n每种Animator对应的标签\n\n - ValueAnimator - <animator>\n - ObjectAnimator - <objectAnimator>\n - AnimatorSet - <set>\n\n```html\n<set android:ordering=\"sequentially\">\n    <set>\n        <objectAnimator\n            android:propertyName=\"x\"\n            android:duration=\"500\"\n            android:valueTo=\"400\"\n            android:valueType=\"intType\"/>\n        <objectAnimator\n            android:propertyName=\"y\"\n            android:duration=\"500\"\n            android:valueTo=\"300\"\n            android:valueType=\"intType\"/>\n    </set>\n    <objectAnimator\n        android:propertyName=\"alpha\"\n        android:duration=\"500\"\n        android:valueTo=\"1f\"/>\n</set>\n```\n在Activity中调用\n\n```java\nAnimatorSet set = (AnimatorSet) AnimatorInflater.loadAnimator(myContext,\n    R.anim.property_animator);\nset.setTarget(myObject);\nset.start();\n```\n\n","slug":"属性动画","published":1,"date":"2016-03-12T05:28:32.363Z","updated":"2016-03-12T05:28:32.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilop1pv9000gqcmyz3z8hvbg","content":"<p>Animator最早出现在Android 3.0 中，和之前的Animation框架相比，Animator更加的灵活并且具有更多的功能，官方推荐使用Animator代替Animation。在3.0之前可以使用<a href=\"http://nineoldandroids.com/\" target=\"_blank\" rel=\"external\">nineoldandroids</a>来实现相同的效果。<br><a id=\"more\"></a></p>\n<p>Animator最早出现在Android 3.0 中，和之前的Animation框架相比，Animator更加的灵活并且具有更多的功能，官方推荐使用Animator代替Animation。在3.0之前可以使用<a href=\"http://nineoldandroids.com/\" target=\"_blank\" rel=\"external\">nineoldandroids</a>来实现相同的效果。</p>\n<p>使用Animator前需要先了解几个概念：</p>\n<ul>\n<li>Duration：动画播放时间</li>\n<li>Time interpolation：属性值随着时间的改变情况，比如线性增长或者先快后慢</li>\n<li>Repeat count：动画重复播放次数</li>\n<li>Animator sets：动画集，可以使多个动画同时播放或者顺序播放</li>\n<li>Frame refresh delay：动画每一帧的刷新时间，一般默认10ms刷新一次</li>\n</ul>\n<p>#Property Animation<br>Property Animation非常强大，他可以让你几乎在任何东西上播放动画。Property Animation的结构如下图：<br><img src=\"http://img.blog.csdn.net/20151207134608386\" alt=\"\"><br><strong>ValueAnimator用来跟踪动画运行的时间和属性的值。其中TimeInterpolator指定了动画的 interpolation，如AccelerateDecelerateInterpolator。TypeEvaluator指定属性的值如何计算比如IntEvaluator.</strong></p>\n<p>#示例<br>点击一个Button，Button的宽和高分别增加到500dp和400dp。<br><img src=\"http://img.blog.csdn.net/20160308214301229\" alt=\"Click\"></p>\n<p>#Property Animation与View Animation的区别</p>\n<ul>\n<li>View Animation只能对View添加动画</li>\n<li>View Animation只能改变如scale、rotation等值，不能改变background color等属性</li>\n<li>View Animation改变的只是View画的位置，并不是真正的View，比如一个button从左到右移动，触发onClick方法的位置还是初试的位置。</li>\n<li>View Animation实现起来比Property Animation简单</li>\n</ul>\n<h1 id=\"Evaluator\"><a href=\"#Evaluator\" class=\"headerlink\" title=\"Evaluator\"></a>Evaluator</h1><p>以IntEvaluator为例，源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">evaluate</span><span class=\"params\">(<span class=\"keyword\">float</span> fraction, Integer startValue, Integer endValue)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">int</span> startInt = startValue;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>)(startInt + fraction * (endValue - startInt));</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>很简单，就是根据初始值，结束值和当前时间与总时长的比例这三个值计算出当前某属性应该的值。</p>\n<p>#Animator<br>Animator提供了创建动画的基本结构，通常我们不直接使用它，而是使用它的子类。</p>\n<p>##ValueAnimator<br>使用ofInt(), ofFloat(), 或者 ofObject()方法来获得ValueAnimator实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ValueAnimator animation = ValueAnimator.ofFloat(<span class=\"number\">0f</span>, <span class=\"number\">1f</span>);</span><br><span class=\"line\">animation.setDuration(<span class=\"number\">1000</span>);</span><br><span class=\"line\">animation.start();</span><br></pre></td></tr></table></figure>\n<p>当然也可以自定义类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ValueAnimator animation = ValueAnimator.ofObject(<span class=\"keyword\">new</span> MyTypeEvaluator(), startPropertyValue, endPropertyValue);</span><br><span class=\"line\">animation.setDuration(<span class=\"number\">1000</span>);</span><br><span class=\"line\">animation.start();</span><br></pre></td></tr></table></figure>\n<p>###示例动画的源码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">          <span class=\"meta\">@Override</span></span><br><span class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">              <span class=\"keyword\">final</span> IntEvaluator mEvaluator = <span class=\"keyword\">new</span> IntEvaluator();</span><br><span class=\"line\">              ValueAnimator valueAnimator = ValueAnimator.ofInt(<span class=\"number\">1</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">              valueAnimator.addUpdateListener(<span class=\"keyword\">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</span><br><span class=\"line\">                  <span class=\"meta\">@Override</span></span><br><span class=\"line\">                  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationUpdate</span><span class=\"params\">(ValueAnimator valueAnimator)</span> </span>&#123;</span><br><span class=\"line\">                      <span class=\"keyword\">float</span> fraction = valueAnimator.getAnimatedFraction();</span><br><span class=\"line\">                      button.getLayoutParams().width = mEvaluator.evaluate(fraction, button.getWidth(), <span class=\"number\">500</span>);</span><br><span class=\"line\">                      button.getLayoutParams().height = mEvaluator.evaluate(fraction, button.getHeight(), <span class=\"number\">400</span>);</span><br><span class=\"line\">                      button.requestLayout();</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">              valueAnimator.setDuration(<span class=\"number\">1000</span>).start();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;);</span><br></pre></td></tr></table></figure></p>\n<p><strong>注：别忘了 button.requestLayout()和valueAnimator.setDuration(1000).start()。</strong></p>\n<p>##ObjectAnimator<br>ObjectAnimator是ValueAnimator 的子类。可以直接对目标属性计算。<br>对foo这个对象的alpha属性做从0到1的变化，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ObjectAnimator anim = ObjectAnimator.ofFloat(foo, <span class=\"string\">\"alpha\"</span>, <span class=\"number\">0f</span>, <span class=\"number\">1f</span>);</span><br><span class=\"line\">anim.setDuration(<span class=\"number\">1000</span>);</span><br><span class=\"line\">anim.start();</span><br></pre></td></tr></table></figure>\n<p>为了使ObjectAnimator正常运行，还需要如下步骤：</p>\n<ul>\n<li>要修改的属性必须有set方法，如setFoo()</li>\n<li>如果你在values…参数中只指定了一个参数，默认为这是最后一个参数。参数必须有get方法，如getFoo()</li>\n<li>有些属性需要手动刷新，所以要在onAnimationUpdate() 中调用invalidate()。</li>\n</ul>\n<p>如果没有要修改的属性必须有set方法，有如下三个解决办法：</p>\n<ul>\n<li>如果有权限，添加set方法<br>但是很多情况下我们是没有的…</li>\n<li>使用这个类的wrapper class（包装类）<br>ObjectAnimator.ofFloat(wrapper, “alpha”, 0f, 1f),在这个包装类的setAlph中对原来View的alpha属性值进行更改</li>\n<li>使用ValueAnimator</li>\n</ul>\n<p>#AnimatorSet</p>\n<p>一个Set中包含多个动画，使用起来也很方便，直接上代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AnimatorSet bouncer = <span class=\"keyword\">new</span> AnimatorSet();</span><br><span class=\"line\">bouncer.play(bounceAnim).before(squashAnim1);</span><br><span class=\"line\">bouncer.play(squashAnim1).with(squashAnim2);</span><br><span class=\"line\">bouncer.play(squashAnim1).with(stretchAnim1);</span><br><span class=\"line\">bouncer.play(squashAnim1).with(stretchAnim2);</span><br><span class=\"line\">bouncer.play(bounceBackAnim).after(stretchAnim2);</span><br><span class=\"line\">ValueAnimator fadeAnim = ObjectAnimator.ofFloat(newBall, <span class=\"string\">\"alpha\"</span>, <span class=\"number\">1f</span>, <span class=\"number\">0f</span>);</span><br><span class=\"line\">fadeAnim.setDuration(<span class=\"number\">250</span>);</span><br><span class=\"line\">AnimatorSet animatorSet = <span class=\"keyword\">new</span> AnimatorSet();</span><br><span class=\"line\">animatorSet.play(bouncer).before(fadeAnim);</span><br><span class=\"line\">animatorSet.start();</span><br></pre></td></tr></table></figure>\n<p>#在XML中声明动画</p>\n<p>新建res/animator/目录<br>每种Animator对应的标签</p>\n<ul>\n<li>ValueAnimator - <animator></animator></li>\n<li>ObjectAnimator - <objectanimator></objectanimator></li>\n<li>AnimatorSet - <set></set></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">set</span> <span class=\"attr\">android:ordering</span>=<span class=\"string\">\"sequentially\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">set</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span><br><span class=\"line\">            <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"x\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:duration</span>=<span class=\"string\">\"500\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"400\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:valueType</span>=<span class=\"string\">\"intType\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span><br><span class=\"line\">            <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"y\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:duration</span>=<span class=\"string\">\"500\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"300\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:valueType</span>=<span class=\"string\">\"intType\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span><br><span class=\"line\">        <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"alpha\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"500\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"1f\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在Activity中调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AnimatorSet set = (AnimatorSet) AnimatorInflater.loadAnimator(myContext,</span><br><span class=\"line\">    R.anim.property_animator);</span><br><span class=\"line\">set.setTarget(myObject);</span><br><span class=\"line\">set.start();</span><br></pre></td></tr></table></figure>\n","excerpt":"<p>Animator最早出现在Android 3.0 中，和之前的Animation框架相比，Animator更加的灵活并且具有更多的功能，官方推荐使用Animator代替Animation。在3.0之前可以使用<a href=\"http://nineoldandroids.com/\">nineoldandroids</a>来实现相同的效果。<br>","more":"</p>\n<p>Animator最早出现在Android 3.0 中，和之前的Animation框架相比，Animator更加的灵活并且具有更多的功能，官方推荐使用Animator代替Animation。在3.0之前可以使用<a href=\"http://nineoldandroids.com/\">nineoldandroids</a>来实现相同的效果。</p>\n<p>使用Animator前需要先了解几个概念：</p>\n<ul>\n<li>Duration：动画播放时间</li>\n<li>Time interpolation：属性值随着时间的改变情况，比如线性增长或者先快后慢</li>\n<li>Repeat count：动画重复播放次数</li>\n<li>Animator sets：动画集，可以使多个动画同时播放或者顺序播放</li>\n<li>Frame refresh delay：动画每一帧的刷新时间，一般默认10ms刷新一次</li>\n</ul>\n<p>#Property Animation<br>Property Animation非常强大，他可以让你几乎在任何东西上播放动画。Property Animation的结构如下图：<br><img src=\"http://img.blog.csdn.net/20151207134608386\" alt=\"\"><br><strong>ValueAnimator用来跟踪动画运行的时间和属性的值。其中TimeInterpolator指定了动画的 interpolation，如AccelerateDecelerateInterpolator。TypeEvaluator指定属性的值如何计算比如IntEvaluator.</strong></p>\n<p>#示例<br>点击一个Button，Button的宽和高分别增加到500dp和400dp。<br><img src=\"http://img.blog.csdn.net/20160308214301229\" alt=\"Click\"></p>\n<p>#Property Animation与View Animation的区别</p>\n<ul>\n<li>View Animation只能对View添加动画</li>\n<li>View Animation只能改变如scale、rotation等值，不能改变background color等属性</li>\n<li>View Animation改变的只是View画的位置，并不是真正的View，比如一个button从左到右移动，触发onClick方法的位置还是初试的位置。</li>\n<li>View Animation实现起来比Property Animation简单</li>\n</ul>\n<h1 id=\"Evaluator\"><a href=\"#Evaluator\" class=\"headerlink\" title=\"Evaluator\"></a>Evaluator</h1><p>以IntEvaluator为例，源码如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">evaluate</span><span class=\"params\">(<span class=\"keyword\">float</span> fraction, Integer startValue, Integer endValue)</span> </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">int</span> startInt = startValue;</span><br><span class=\"line\">     <span class=\"keyword\">return</span> (<span class=\"keyword\">int</span>)(startInt + fraction * (endValue - startInt));</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<p>很简单，就是根据初始值，结束值和当前时间与总时长的比例这三个值计算出当前某属性应该的值。</p>\n<p>#Animator<br>Animator提供了创建动画的基本结构，通常我们不直接使用它，而是使用它的子类。</p>\n<p>##ValueAnimator<br>使用ofInt(), ofFloat(), 或者 ofObject()方法来获得ValueAnimator实例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ValueAnimator animation = ValueAnimator.ofFloat(<span class=\"number\">0f</span>, <span class=\"number\">1f</span>);</span><br><span class=\"line\">animation.setDuration(<span class=\"number\">1000</span>);</span><br><span class=\"line\">animation.start();</span><br></pre></td></tr></table></figure>\n<p>当然也可以自定义类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ValueAnimator animation = ValueAnimator.ofObject(<span class=\"keyword\">new</span> MyTypeEvaluator(), startPropertyValue, endPropertyValue);</span><br><span class=\"line\">animation.setDuration(<span class=\"number\">1000</span>);</span><br><span class=\"line\">animation.start();</span><br></pre></td></tr></table></figure>\n<p>###示例动画的源码<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button.setOnClickListener(<span class=\"keyword\">new</span> View.OnClickListener() &#123;</span><br><span class=\"line\">          <span class=\"meta\">@Override</span></span><br><span class=\"line\">          <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\">              <span class=\"keyword\">final</span> IntEvaluator mEvaluator = <span class=\"keyword\">new</span> IntEvaluator();</span><br><span class=\"line\">              ValueAnimator valueAnimator = ValueAnimator.ofInt(<span class=\"number\">1</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">              valueAnimator.addUpdateListener(<span class=\"keyword\">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</span><br><span class=\"line\">                  <span class=\"meta\">@Override</span></span><br><span class=\"line\">                  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onAnimationUpdate</span><span class=\"params\">(ValueAnimator valueAnimator)</span> </span>&#123;</span><br><span class=\"line\">                      <span class=\"keyword\">float</span> fraction = valueAnimator.getAnimatedFraction();</span><br><span class=\"line\">                      button.getLayoutParams().width = mEvaluator.evaluate(fraction, button.getWidth(), <span class=\"number\">500</span>);</span><br><span class=\"line\">                      button.getLayoutParams().height = mEvaluator.evaluate(fraction, button.getHeight(), <span class=\"number\">400</span>);</span><br><span class=\"line\">                      button.requestLayout();</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">              &#125;);</span><br><span class=\"line\">              valueAnimator.setDuration(<span class=\"number\">1000</span>).start();</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">      &#125;);</span><br></pre></td></tr></table></figure></p>\n<p><strong>注：别忘了 button.requestLayout()和valueAnimator.setDuration(1000).start()。</strong></p>\n<p>##ObjectAnimator<br>ObjectAnimator是ValueAnimator 的子类。可以直接对目标属性计算。<br>对foo这个对象的alpha属性做从0到1的变化，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ObjectAnimator anim = ObjectAnimator.ofFloat(foo, <span class=\"string\">\"alpha\"</span>, <span class=\"number\">0f</span>, <span class=\"number\">1f</span>);</span><br><span class=\"line\">anim.setDuration(<span class=\"number\">1000</span>);</span><br><span class=\"line\">anim.start();</span><br></pre></td></tr></table></figure>\n<p>为了使ObjectAnimator正常运行，还需要如下步骤：</p>\n<ul>\n<li>要修改的属性必须有set方法，如setFoo()</li>\n<li>如果你在values…参数中只指定了一个参数，默认为这是最后一个参数。参数必须有get方法，如getFoo()</li>\n<li>有些属性需要手动刷新，所以要在onAnimationUpdate() 中调用invalidate()。</li>\n</ul>\n<p>如果没有要修改的属性必须有set方法，有如下三个解决办法：</p>\n<ul>\n<li>如果有权限，添加set方法<br>但是很多情况下我们是没有的…</li>\n<li>使用这个类的wrapper class（包装类）<br>ObjectAnimator.ofFloat(wrapper, “alpha”, 0f, 1f),在这个包装类的setAlph中对原来View的alpha属性值进行更改</li>\n<li>使用ValueAnimator</li>\n</ul>\n<p>#AnimatorSet</p>\n<p>一个Set中包含多个动画，使用起来也很方便，直接上代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AnimatorSet bouncer = <span class=\"keyword\">new</span> AnimatorSet();</span><br><span class=\"line\">bouncer.play(bounceAnim).before(squashAnim1);</span><br><span class=\"line\">bouncer.play(squashAnim1).with(squashAnim2);</span><br><span class=\"line\">bouncer.play(squashAnim1).with(stretchAnim1);</span><br><span class=\"line\">bouncer.play(squashAnim1).with(stretchAnim2);</span><br><span class=\"line\">bouncer.play(bounceBackAnim).after(stretchAnim2);</span><br><span class=\"line\">ValueAnimator fadeAnim = ObjectAnimator.ofFloat(newBall, <span class=\"string\">\"alpha\"</span>, <span class=\"number\">1f</span>, <span class=\"number\">0f</span>);</span><br><span class=\"line\">fadeAnim.setDuration(<span class=\"number\">250</span>);</span><br><span class=\"line\">AnimatorSet animatorSet = <span class=\"keyword\">new</span> AnimatorSet();</span><br><span class=\"line\">animatorSet.play(bouncer).before(fadeAnim);</span><br><span class=\"line\">animatorSet.start();</span><br></pre></td></tr></table></figure>\n<p>#在XML中声明动画</p>\n<p>新建res/animator/目录<br>每种Animator对应的标签</p>\n<ul>\n<li>ValueAnimator - <animator></li>\n<li>ObjectAnimator - <objectAnimator></li>\n<li>AnimatorSet - <set></li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">set</span> <span class=\"attr\">android:ordering</span>=<span class=\"string\">\"sequentially\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">set</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span><br><span class=\"line\">            <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"x\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:duration</span>=<span class=\"string\">\"500\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"400\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:valueType</span>=<span class=\"string\">\"intType\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span><br><span class=\"line\">            <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"y\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:duration</span>=<span class=\"string\">\"500\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"300\"</span></span><br><span class=\"line\">            <span class=\"attr\">android:valueType</span>=<span class=\"string\">\"intType\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">objectAnimator</span></span><br><span class=\"line\">        <span class=\"attr\">android:propertyName</span>=<span class=\"string\">\"alpha\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:duration</span>=<span class=\"string\">\"500\"</span></span><br><span class=\"line\">        <span class=\"attr\">android:valueTo</span>=<span class=\"string\">\"1f\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">set</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在Activity中调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AnimatorSet set = (AnimatorSet) AnimatorInflater.loadAnimator(myContext,</span><br><span class=\"line\">    R.anim.property_animator);</span><br><span class=\"line\">set.setTarget(myObject);</span><br><span class=\"line\">set.start();</span><br></pre></td></tr></table></figure>"},{"title":"一个规范的自定义View","_content":"一个规范的自定义View\n<!-- more -->\n\n# 一个不规范的自定义View\n\n这个自定义的View很简单，就是画一个圆，实现一个圆形效果的自定义View。\n\n先看一个不规范的自定义View是怎么做的\n\n```java\npublic class CircleView extends View {\n\n    private int mColor = Color.RED;\n    private Paint mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n\n    public CircleView(Context context) {\n        super(context);\n        init();\n    }\n\n    public CircleView(Context context, AttributeSet attrs) {\n        this(context, attrs, 0);\n    }\n\n    public CircleView(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        init();\n    }\n\n    private void init() {\n        mPaint.setColor(mColor);\n    }\n    \n    @Override\n    protected void onDraw(Canvas canvas) {\n        int width = getWidth();\n        int height = getHeight();\n        int radius = Math.min(width, height) / 2;\n        canvas.drawCircle(width / 2, height / 2, radius, mPaint);\n    }\n}\n\n```\n\n对应的xml\n\n```xml\n<com.ryg.chapter_4.ui.CircleView\n    android:id=\"@+id/circleView1\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"100dp\"\n    android:layout_margin=\"20dp\"\n    android:background=\"#000000\"\n    />\n```\n\n这样虽然也能画出一个圆来，但是这并不是一个规范的自定义View，主要存在以下问题：\n\n- android:padding属性是不能使用的\n- 使用wrap_content就相当于使用match_partent\n\n# 一个规范的自定义View\n为了解决以上问题需要重写View的onMeasure和onDraw方法。\n\n完整代码如下：\n\n```java\npublic class CircleView extends View {\n\n    private int mColor = Color.RED;\n    private Paint mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n\n    public CircleView(Context context) {\n        super(context);\n        init();\n    }\n\n    public CircleView(Context context, AttributeSet attrs) {\n        this(context, attrs, 0);\n    }\n\n    public CircleView(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.CircleView);\n        mColor = a.getColor(R.styleable.CircleView_circle_color, Color.RED);\n        a.recycle();\n        init();\n    }\n\n    private void init() {\n        mPaint.setColor(mColor);\n    }\n\n    @Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n        int widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);\n        int widthSpecSize = MeasureSpec.getSize(widthMeasureSpec);\n        int heightSpecMode = MeasureSpec.getMode(heightMeasureSpec);\n        int heightSpecSize = MeasureSpec.getSize(heightMeasureSpec);\n        if (widthSpecMode == MeasureSpec.AT_MOST\n                && heightSpecMode == MeasureSpec.AT_MOST) {\n            setMeasuredDimension(200, 200);\n        } else if (widthSpecMode == MeasureSpec.AT_MOST) {\n            setMeasuredDimension(200, heightSpecSize);\n        } else if (heightSpecMode == MeasureSpec.AT_MOST) {\n            setMeasuredDimension(widthSpecSize, 200);\n        }\n    }\n\n    @Override\n    protected void onDraw(Canvas canvas) {\n        super.onDraw(canvas);\n        final int paddingLeft = getPaddingLeft();\n        final int paddingRight = getPaddingRight();\n        final int paddingTop = getPaddingTop();\n        final int paddingBottom = getPaddingBottom();\n        int width = getWidth() - paddingLeft - paddingRight;\n        int height = getHeight() - paddingTop - paddingBottom;\n        int radius = Math.min(width, height) / 2;\n        canvas.drawCircle(paddingLeft + width / 2, paddingTop + height / 2,\n                radius, mPaint);\n    }\n}\n```\n\n# 添加自定义属性\n1. 在values文件夹下添加attrs.xml \n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <declare-styleable name=\"CircleView\">\n        <attr name=\"circle_color\" format=\"color\" />\n    </declare-styleable>\n</resources>\n```\n自定义的属性集合CircleView，在这个属性集合里只定义了一个格式为color的属性circle_color。\n2. 在View的构造函数中解析自定义的属性\n```java\n public CircleView(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.CircleView);\n        mColor = a.getColor(R.styleable.CircleView_circle_color, Color.RED);\n        a.recycle();\n        init();\n    }\n```\n3. 在布局文件中使用自定义属性\n```xml\n   <com.ryg.chapter_4.ui.CircleView\n        android:id=\"@+id/circleView1\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"100dp\"\n        android:layout_margin=\"20dp\"\n        android:background=\"#000000\"\n        android:padding=\"20dp\"\n        app:circle_color=\"@color/light_green\" />\n```\n在使用自定义的属性时，要在schemas声明：xmlns:app=\"http://schemas.android.com/apk/res-auto\"，使用时与普通属性类似，app:circle_color=\"@color/light_green\" 。\n\n# 自定义View须知\n- 自定义的View中margin属性可以使用，因为它是由父容器控制的\n- 直接继承View或ViewGroup的需要自己处理wrap_content\n- View要在onDraw方法中要处理padding，而ViewGroup要在onMeasure和onLayout中处理padding和margin\n- View中的post方法可以取代handler\n- 在View的onDetachedFromWindow中停止动画，防止内存泄露\n- 有滑动嵌套情形时，注意滑动冲突处理\n- 关于上面涉及到的一些类和方法的详细解释请参考[http://blog.csdn.net/l664675249/article/details/50774617](http://blog.csdn.net/l664675249/article/details/50774617)\n\n想要自定义出漂亮的View并不容易，只有多读，多写，多测，才能更好的掌握。自己造一个轮子，然后再对比成熟的轮子去找差距和不足。\n\n","source":"_posts/一个规范的自定义View.md","raw":"title: 一个规范的自定义View\ncategories:\n- Android\n- Android开发艺术探索笔记\ntags:\n- Android\n- View\n- 自定义View\n---\n一个规范的自定义View\n<!-- more -->\n\n# 一个不规范的自定义View\n\n这个自定义的View很简单，就是画一个圆，实现一个圆形效果的自定义View。\n\n先看一个不规范的自定义View是怎么做的\n\n```java\npublic class CircleView extends View {\n\n    private int mColor = Color.RED;\n    private Paint mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n\n    public CircleView(Context context) {\n        super(context);\n        init();\n    }\n\n    public CircleView(Context context, AttributeSet attrs) {\n        this(context, attrs, 0);\n    }\n\n    public CircleView(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        init();\n    }\n\n    private void init() {\n        mPaint.setColor(mColor);\n    }\n    \n    @Override\n    protected void onDraw(Canvas canvas) {\n        int width = getWidth();\n        int height = getHeight();\n        int radius = Math.min(width, height) / 2;\n        canvas.drawCircle(width / 2, height / 2, radius, mPaint);\n    }\n}\n\n```\n\n对应的xml\n\n```xml\n<com.ryg.chapter_4.ui.CircleView\n    android:id=\"@+id/circleView1\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"100dp\"\n    android:layout_margin=\"20dp\"\n    android:background=\"#000000\"\n    />\n```\n\n这样虽然也能画出一个圆来，但是这并不是一个规范的自定义View，主要存在以下问题：\n\n- android:padding属性是不能使用的\n- 使用wrap_content就相当于使用match_partent\n\n# 一个规范的自定义View\n为了解决以上问题需要重写View的onMeasure和onDraw方法。\n\n完整代码如下：\n\n```java\npublic class CircleView extends View {\n\n    private int mColor = Color.RED;\n    private Paint mPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n\n    public CircleView(Context context) {\n        super(context);\n        init();\n    }\n\n    public CircleView(Context context, AttributeSet attrs) {\n        this(context, attrs, 0);\n    }\n\n    public CircleView(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.CircleView);\n        mColor = a.getColor(R.styleable.CircleView_circle_color, Color.RED);\n        a.recycle();\n        init();\n    }\n\n    private void init() {\n        mPaint.setColor(mColor);\n    }\n\n    @Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n        int widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);\n        int widthSpecSize = MeasureSpec.getSize(widthMeasureSpec);\n        int heightSpecMode = MeasureSpec.getMode(heightMeasureSpec);\n        int heightSpecSize = MeasureSpec.getSize(heightMeasureSpec);\n        if (widthSpecMode == MeasureSpec.AT_MOST\n                && heightSpecMode == MeasureSpec.AT_MOST) {\n            setMeasuredDimension(200, 200);\n        } else if (widthSpecMode == MeasureSpec.AT_MOST) {\n            setMeasuredDimension(200, heightSpecSize);\n        } else if (heightSpecMode == MeasureSpec.AT_MOST) {\n            setMeasuredDimension(widthSpecSize, 200);\n        }\n    }\n\n    @Override\n    protected void onDraw(Canvas canvas) {\n        super.onDraw(canvas);\n        final int paddingLeft = getPaddingLeft();\n        final int paddingRight = getPaddingRight();\n        final int paddingTop = getPaddingTop();\n        final int paddingBottom = getPaddingBottom();\n        int width = getWidth() - paddingLeft - paddingRight;\n        int height = getHeight() - paddingTop - paddingBottom;\n        int radius = Math.min(width, height) / 2;\n        canvas.drawCircle(paddingLeft + width / 2, paddingTop + height / 2,\n                radius, mPaint);\n    }\n}\n```\n\n# 添加自定义属性\n1. 在values文件夹下添加attrs.xml \n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<resources>\n    <declare-styleable name=\"CircleView\">\n        <attr name=\"circle_color\" format=\"color\" />\n    </declare-styleable>\n</resources>\n```\n自定义的属性集合CircleView，在这个属性集合里只定义了一个格式为color的属性circle_color。\n2. 在View的构造函数中解析自定义的属性\n```java\n public CircleView(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.CircleView);\n        mColor = a.getColor(R.styleable.CircleView_circle_color, Color.RED);\n        a.recycle();\n        init();\n    }\n```\n3. 在布局文件中使用自定义属性\n```xml\n   <com.ryg.chapter_4.ui.CircleView\n        android:id=\"@+id/circleView1\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"100dp\"\n        android:layout_margin=\"20dp\"\n        android:background=\"#000000\"\n        android:padding=\"20dp\"\n        app:circle_color=\"@color/light_green\" />\n```\n在使用自定义的属性时，要在schemas声明：xmlns:app=\"http://schemas.android.com/apk/res-auto\"，使用时与普通属性类似，app:circle_color=\"@color/light_green\" 。\n\n# 自定义View须知\n- 自定义的View中margin属性可以使用，因为它是由父容器控制的\n- 直接继承View或ViewGroup的需要自己处理wrap_content\n- View要在onDraw方法中要处理padding，而ViewGroup要在onMeasure和onLayout中处理padding和margin\n- View中的post方法可以取代handler\n- 在View的onDetachedFromWindow中停止动画，防止内存泄露\n- 有滑动嵌套情形时，注意滑动冲突处理\n- 关于上面涉及到的一些类和方法的详细解释请参考[http://blog.csdn.net/l664675249/article/details/50774617](http://blog.csdn.net/l664675249/article/details/50774617)\n\n想要自定义出漂亮的View并不容易，只有多读，多写，多测，才能更好的掌握。自己造一个轮子，然后再对比成熟的轮子去找差距和不足。\n\n","slug":"一个规范的自定义View","published":1,"date":"2016-03-12T05:28:32.363Z","updated":"2016-03-12T05:28:32.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilop1pv9000lqcmy20kmmsem","content":"<p>一个规范的自定义View<br><a id=\"more\"></a></p>\n<h1 id=\"一个不规范的自定义View\"><a href=\"#一个不规范的自定义View\" class=\"headerlink\" title=\"一个不规范的自定义View\"></a>一个不规范的自定义View</h1><p>这个自定义的View很简单，就是画一个圆，实现一个圆形效果的自定义View。</p>\n<p>先看一个不规范的自定义View是怎么做的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CircleView</span> <span class=\"keyword\">extends</span> <span class=\"title\">View</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mColor = Color.RED;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Paint mPaint = <span class=\"keyword\">new</span> Paint(Paint.ANTI_ALIAS_FLAG);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleView</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context);</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleView</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(context, attrs, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleView</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mPaint.setColor(mColor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> width = getWidth();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> height = getHeight();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> radius = Math.min(width, height) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        canvas.drawCircle(width / <span class=\"number\">2</span>, height / <span class=\"number\">2</span>, radius, mPaint);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对应的xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">com.ryg.chapter_4.ui.CircleView</span></span><br><span class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/circleView1\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"100dp\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"20dp\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:background</span>=<span class=\"string\">\"#000000\"</span></span><br><span class=\"line\">    /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这样虽然也能画出一个圆来，但是这并不是一个规范的自定义View，主要存在以下问题：</p>\n<ul>\n<li>android:padding属性是不能使用的</li>\n<li>使用wrap_content就相当于使用match_partent</li>\n</ul>\n<h1 id=\"一个规范的自定义View\"><a href=\"#一个规范的自定义View\" class=\"headerlink\" title=\"一个规范的自定义View\"></a>一个规范的自定义View</h1><p>为了解决以上问题需要重写View的onMeasure和onDraw方法。</p>\n<p>完整代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CircleView</span> <span class=\"keyword\">extends</span> <span class=\"title\">View</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mColor = Color.RED;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Paint mPaint = <span class=\"keyword\">new</span> Paint(Paint.ANTI_ALIAS_FLAG);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleView</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context);</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleView</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(context, attrs, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleView</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</span><br><span class=\"line\">        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.CircleView);</span><br><span class=\"line\">        mColor = a.getColor(R.styleable.CircleView_circle_color, Color.RED);</span><br><span class=\"line\">        a.recycle();</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mPaint.setColor(mColor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> widthSpecSize = MeasureSpec.getSize(widthMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> heightSpecMode = MeasureSpec.getMode(heightMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> heightSpecSize = MeasureSpec.getSize(heightMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (widthSpecMode == MeasureSpec.AT_MOST</span><br><span class=\"line\">                &amp;&amp; heightSpecMode == MeasureSpec.AT_MOST) &#123;</span><br><span class=\"line\">            setMeasuredDimension(<span class=\"number\">200</span>, <span class=\"number\">200</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (widthSpecMode == MeasureSpec.AT_MOST) &#123;</span><br><span class=\"line\">            setMeasuredDimension(<span class=\"number\">200</span>, heightSpecSize);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (heightSpecMode == MeasureSpec.AT_MOST) &#123;</span><br><span class=\"line\">            setMeasuredDimension(widthSpecSize, <span class=\"number\">200</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDraw(canvas);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> paddingLeft = getPaddingLeft();</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> paddingRight = getPaddingRight();</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> paddingTop = getPaddingTop();</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> paddingBottom = getPaddingBottom();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> width = getWidth() - paddingLeft - paddingRight;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> height = getHeight() - paddingTop - paddingBottom;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> radius = Math.min(width, height) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        canvas.drawCircle(paddingLeft + width / <span class=\"number\">2</span>, paddingTop + height / <span class=\"number\">2</span>,</span><br><span class=\"line\">                radius, mPaint);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"添加自定义属性\"><a href=\"#添加自定义属性\" class=\"headerlink\" title=\"添加自定义属性\"></a>添加自定义属性</h1><ol>\n<li>在values文件夹下添加attrs.xml <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">declare-styleable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"CircleView\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"color\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">declare-styleable</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>自定义的属性集合CircleView，在这个属性集合里只定义了一个格式为color的属性circle_color。</p>\n<ol>\n<li><p>在View的构造函数中解析自定义的属性</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleView</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</span><br><span class=\"line\">       TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.CircleView);</span><br><span class=\"line\">       mColor = a.getColor(R.styleable.CircleView_circle_color, Color.RED);</span><br><span class=\"line\">       a.recycle();</span><br><span class=\"line\">       init();</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在布局文件中使用自定义属性</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">com.ryg.chapter_4.ui.CircleView</span></span><br><span class=\"line\">     <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/circleView1\"</span></span><br><span class=\"line\">     <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">     <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"100dp\"</span></span><br><span class=\"line\">     <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"20dp\"</span></span><br><span class=\"line\">     <span class=\"attr\">android:background</span>=<span class=\"string\">\"#000000\"</span></span><br><span class=\"line\">     <span class=\"attr\">android:padding</span>=<span class=\"string\">\"20dp\"</span></span><br><span class=\"line\">     <span class=\"attr\">app:circle_color</span>=<span class=\"string\">\"@color/light_green\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在使用自定义的属性时，要在schemas声明：xmlns:app=”<a href=\"http://schemas.android.com/apk/res-auto&quot;，使用时与普通属性类似，app:circle_color=&quot;@color/light_green\" target=\"_blank\" rel=\"external\">http://schemas.android.com/apk/res-auto&quot;，使用时与普通属性类似，app:circle_color=&quot;@color/light_green</a>“ 。</p>\n<h1 id=\"自定义View须知\"><a href=\"#自定义View须知\" class=\"headerlink\" title=\"自定义View须知\"></a>自定义View须知</h1><ul>\n<li>自定义的View中margin属性可以使用，因为它是由父容器控制的</li>\n<li>直接继承View或ViewGroup的需要自己处理wrap_content</li>\n<li>View要在onDraw方法中要处理padding，而ViewGroup要在onMeasure和onLayout中处理padding和margin</li>\n<li>View中的post方法可以取代handler</li>\n<li>在View的onDetachedFromWindow中停止动画，防止内存泄露</li>\n<li>有滑动嵌套情形时，注意滑动冲突处理</li>\n<li>关于上面涉及到的一些类和方法的详细解释请参考<a href=\"http://blog.csdn.net/l664675249/article/details/50774617\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/l664675249/article/details/50774617</a></li>\n</ul>\n<p>想要自定义出漂亮的View并不容易，只有多读，多写，多测，才能更好的掌握。自己造一个轮子，然后再对比成熟的轮子去找差距和不足。</p>\n","excerpt":"<p>一个规范的自定义View<br>","more":"</p>\n<h1 id=\"一个不规范的自定义View\"><a href=\"#一个不规范的自定义View\" class=\"headerlink\" title=\"一个不规范的自定义View\"></a>一个不规范的自定义View</h1><p>这个自定义的View很简单，就是画一个圆，实现一个圆形效果的自定义View。</p>\n<p>先看一个不规范的自定义View是怎么做的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CircleView</span> <span class=\"keyword\">extends</span> <span class=\"title\">View</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mColor = Color.RED;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Paint mPaint = <span class=\"keyword\">new</span> Paint(Paint.ANTI_ALIAS_FLAG);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleView</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context);</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleView</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(context, attrs, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleView</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mPaint.setColor(mColor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> width = getWidth();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> height = getHeight();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> radius = Math.min(width, height) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        canvas.drawCircle(width / <span class=\"number\">2</span>, height / <span class=\"number\">2</span>, radius, mPaint);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对应的xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">com.ryg.chapter_4.ui.CircleView</span></span><br><span class=\"line\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/circleView1\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"100dp\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"20dp\"</span></span><br><span class=\"line\">    <span class=\"attr\">android:background</span>=<span class=\"string\">\"#000000\"</span></span><br><span class=\"line\">    /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>这样虽然也能画出一个圆来，但是这并不是一个规范的自定义View，主要存在以下问题：</p>\n<ul>\n<li>android:padding属性是不能使用的</li>\n<li>使用wrap_content就相当于使用match_partent</li>\n</ul>\n<h1 id=\"一个规范的自定义View\"><a href=\"#一个规范的自定义View\" class=\"headerlink\" title=\"一个规范的自定义View\"></a>一个规范的自定义View</h1><p>为了解决以上问题需要重写View的onMeasure和onDraw方法。</p>\n<p>完整代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CircleView</span> <span class=\"keyword\">extends</span> <span class=\"title\">View</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mColor = Color.RED;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Paint mPaint = <span class=\"keyword\">new</span> Paint(Paint.ANTI_ALIAS_FLAG);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleView</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context);</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleView</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>(context, attrs, <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleView</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</span><br><span class=\"line\">        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.CircleView);</span><br><span class=\"line\">        mColor = a.getColor(R.styleable.CircleView_circle_color, Color.RED);</span><br><span class=\"line\">        a.recycle();</span><br><span class=\"line\">        init();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mPaint.setColor(mColor);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> widthSpecMode = MeasureSpec.getMode(widthMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> widthSpecSize = MeasureSpec.getSize(widthMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> heightSpecMode = MeasureSpec.getMode(heightMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> heightSpecSize = MeasureSpec.getSize(heightMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (widthSpecMode == MeasureSpec.AT_MOST</span><br><span class=\"line\">                &amp;&amp; heightSpecMode == MeasureSpec.AT_MOST) &#123;</span><br><span class=\"line\">            setMeasuredDimension(<span class=\"number\">200</span>, <span class=\"number\">200</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (widthSpecMode == MeasureSpec.AT_MOST) &#123;</span><br><span class=\"line\">            setMeasuredDimension(<span class=\"number\">200</span>, heightSpecSize);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (heightSpecMode == MeasureSpec.AT_MOST) &#123;</span><br><span class=\"line\">            setMeasuredDimension(widthSpecSize, <span class=\"number\">200</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDraw</span><span class=\"params\">(Canvas canvas)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDraw(canvas);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> paddingLeft = getPaddingLeft();</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> paddingRight = getPaddingRight();</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> paddingTop = getPaddingTop();</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> paddingBottom = getPaddingBottom();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> width = getWidth() - paddingLeft - paddingRight;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> height = getHeight() - paddingTop - paddingBottom;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> radius = Math.min(width, height) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        canvas.drawCircle(paddingLeft + width / <span class=\"number\">2</span>, paddingTop + height / <span class=\"number\">2</span>,</span><br><span class=\"line\">                radius, mPaint);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"添加自定义属性\"><a href=\"#添加自定义属性\" class=\"headerlink\" title=\"添加自定义属性\"></a>添加自定义属性</h1><ol>\n<li>在values文件夹下添加attrs.xml <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">declare-styleable</span> <span class=\"attr\">name</span>=<span class=\"string\">\"CircleView\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">attr</span> <span class=\"attr\">name</span>=<span class=\"string\">\"circle_color\"</span> <span class=\"attr\">format</span>=<span class=\"string\">\"color\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">declare-styleable</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>自定义的属性集合CircleView，在这个属性集合里只定义了一个格式为color的属性circle_color。</p>\n<ol>\n<li><p>在View的构造函数中解析自定义的属性</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CircleView</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</span><br><span class=\"line\">       TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.CircleView);</span><br><span class=\"line\">       mColor = a.getColor(R.styleable.CircleView_circle_color, Color.RED);</span><br><span class=\"line\">       a.recycle();</span><br><span class=\"line\">       init();</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在布局文件中使用自定义属性</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">com.ryg.chapter_4.ui.CircleView</span></span><br><span class=\"line\">     <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/circleView1\"</span></span><br><span class=\"line\">     <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"wrap_content\"</span></span><br><span class=\"line\">     <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"100dp\"</span></span><br><span class=\"line\">     <span class=\"attr\">android:layout_margin</span>=<span class=\"string\">\"20dp\"</span></span><br><span class=\"line\">     <span class=\"attr\">android:background</span>=<span class=\"string\">\"#000000\"</span></span><br><span class=\"line\">     <span class=\"attr\">android:padding</span>=<span class=\"string\">\"20dp\"</span></span><br><span class=\"line\">     <span class=\"attr\">app:circle_color</span>=<span class=\"string\">\"@color/light_green\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>在使用自定义的属性时，要在schemas声明：xmlns:app=”<a href=\"http://schemas.android.com/apk/res-auto&quot;，使用时与普通属性类似，app:circle_color=&quot;@color/light_green\">http://schemas.android.com/apk/res-auto&quot;，使用时与普通属性类似，app:circle_color=&quot;@color/light_green</a>“ 。</p>\n<h1 id=\"自定义View须知\"><a href=\"#自定义View须知\" class=\"headerlink\" title=\"自定义View须知\"></a>自定义View须知</h1><ul>\n<li>自定义的View中margin属性可以使用，因为它是由父容器控制的</li>\n<li>直接继承View或ViewGroup的需要自己处理wrap_content</li>\n<li>View要在onDraw方法中要处理padding，而ViewGroup要在onMeasure和onLayout中处理padding和margin</li>\n<li>View中的post方法可以取代handler</li>\n<li>在View的onDetachedFromWindow中停止动画，防止内存泄露</li>\n<li>有滑动嵌套情形时，注意滑动冲突处理</li>\n<li>关于上面涉及到的一些类和方法的详细解释请参考<a href=\"http://blog.csdn.net/l664675249/article/details/50774617\">http://blog.csdn.net/l664675249/article/details/50774617</a></li>\n</ul>\n<p>想要自定义出漂亮的View并不容易，只有多读，多写，多测，才能更好的掌握。自己造一个轮子，然后再对比成熟的轮子去找差距和不足。</p>"},{"title":"Windows和WindowManager","_content":"Window表示一个窗口的概念，在某些特殊的时候，比如你需要在桌面或者锁屏上显示一些类似悬浮窗的东西时候就需要用到Window。Window是一个抽象类，Window的实现类是PhoneWindow。Window的具体实现位于WindowManagerService中，WindowManager和WindowManagerService的交互是一个IPC过程。Android中所有的视图都是通过Window来呈现的，不管是Activity、Dialog还是Toast，他们的视图实际上都是附加在Window上的。\n<!-- more -->\n\nWindow表示一个窗口的概念，在某些特殊的时候，比如你需要在桌面或者锁屏上显示一些类似悬浮窗的东西时候就需要用到Window。Window是一个抽象类，Window的实现类是PhoneWindow。Window的具体实现位于WindowManagerService中，WindowManager和WindowManagerService的交互是一个IPC过程。Android中所有的视图都是通过Window来呈现的，不管是Activity、Dialog还是Toast，他们的视图实际上都是附加在Window上的。\n\n#一个悬浮窗的例子\n\n点击Button按钮，将一个ImageView添加到坐标为（100,300）的位置上，并且可以随手拖动的。\n\n![示例](http://img.blog.csdn.net/20160310205856256)\n\n下面是这一段的源码，展示了如何使用WindowManager添加一个Window。\n\n```java\npublic class TestActivity extends Activity implements OnTouchListener {\n\n    private static final String TAG = \"TestActivity\";\n\n    private Button mCreateWindowButton;\n\n    private ImageView mImageView;\n    private WindowManager.LayoutParams mLayoutParams;\n    private WindowManager mWindowManager;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_test);\n        initView();\n    }\n\n    private void initView() {\n        mCreateWindowButton = (Button) findViewById(R.id.button1);\n        mWindowManager = (WindowManager) getSystemService(Context.WINDOW_SERVICE);\n    }\n\n    public void onButtonClick(View v) {\n\n        if (v == mCreateWindowButton) {\n            mImageView = new ImageView(this);\n            mImageView.setBackgroundResource(R.drawable.ic_launcher);\n            mLayoutParams = new WindowManager.LayoutParams(\n                    LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT, 0, 0,\n                    PixelFormat.TRANSPARENT);\n            mLayoutParams.flags = LayoutParams.FLAG_NOT_TOUCH_MODAL\n                    | LayoutParams.FLAG_NOT_FOCUSABLE\n                    | LayoutParams.FLAG_SHOW_WHEN_LOCKED;\n            mLayoutParams.type = LayoutParams.TYPE_SYSTEM_ERROR;\n            mLayoutParams.gravity = Gravity.TOP | Gravity.LEFT;\n            mLayoutParams.x = 100;\n            mLayoutParams.y = 300;\n            mImageView.setOnTouchListener(this);\n            mWindowManager.addView(mImageView, mLayoutParams);\n        }\n    }\n\n    @Override\n    public boolean onTouch(View v, MotionEvent event) {\n        int rawX = (int) event.getRawX();\n        int rawY = (int) event.getRawY();\n        int x = (int) event.getX();\n        int y = (int) event.getY();\n\n        switch (event.getAction()) {\n        case MotionEvent.ACTION_DOWN: {\n            break;\n        }\n        case MotionEvent.ACTION_MOVE: {\n            Log.d(TAG, \"onTouch: rawX \" + rawX);\n            Log.d(TAG, \"onTouch: rawY \" + rawY);\n            mLayoutParams.x = rawX;\n            mLayoutParams.y = rawY;\n            mWindowManager.updateViewLayout(mImageView, mLayoutParams);\n            break;\n        }\n        case MotionEvent.ACTION_UP: {\n            break;\n        }\n        default:\n            break;\n        }\n        return false;\n    }\n\n    @Override\n    protected void onDestroy() {\n        try {\n            mWindowManager.removeView(mImageView);\n        } catch (IllegalArgumentException e) {\n            e.printStackTrace();\n        }\n        super.onDestroy();\n    }\n}\n```\n\n\n#WindowManager.LayoutParams的Flag和Type\n##FLAG\n- FLAG_NOT_FOCUSABLE，当前Window不获取焦点，也不接收各种输入事件，会同时启用FLAG_NOT_TOUCH_MODAL，事件会传递给下层具有焦点的Window。\n- FLAG_NOT_TOUCH_MODAL，当前Window区域外的单击事件传递给底层，区域内的单击事件自己处理，一般都需要开启。 \n- FLAG_SHOW_WHEN_LOCKED，可以让Window显示在锁屏界面上。\n\n##Type\nType表示Window的类型，有应用Window、子Window和系统Window。\n- 应用Window，一般对应一个Activity。层级范围1～99。 \n- 子Window，不能单独存在，需要特定的父Window，比如一般的Dialog。层级范围1000～1999。\n- 系统Window，需要权限声明，比如Toast。层级范围2000～2999。\n\n一般可以选用WindowManager.LayoutParams.TYPE_SYSTEM_ERROR或者TYPE_SYSTEM_OVERLAY同时声明权限。使用WindowManager.LayoutParams.TYPE_SYSTEM_ERROR时，同时声明<uses-permission android:name=\"android.permission.SYSTEM_ALERT_WINDOW\" />\n\n#注\n- Window并不实际存在，以View的形式存在。每个Window对应着一个View和ViewRootImpl，Window和View通过ViewRootImpl建立联系。所以在实际使用中其实我们并不能访问到真正的Window，而只能通过WindowManager。\n- WindowManager常用的三个功能：addView，updateViewLayout，removeView\n- 别忘了onDestory()中的mWindowManager.removeView(mImageView)\n","source":"_posts/Windows和WindowManager.md","raw":"title: Windows和WindowManager\ncategories:\n- Android\n- Android开发艺术探索笔记\ntags:\n- Android\n- Window\n- WindowManager\n---\nWindow表示一个窗口的概念，在某些特殊的时候，比如你需要在桌面或者锁屏上显示一些类似悬浮窗的东西时候就需要用到Window。Window是一个抽象类，Window的实现类是PhoneWindow。Window的具体实现位于WindowManagerService中，WindowManager和WindowManagerService的交互是一个IPC过程。Android中所有的视图都是通过Window来呈现的，不管是Activity、Dialog还是Toast，他们的视图实际上都是附加在Window上的。\n<!-- more -->\n\nWindow表示一个窗口的概念，在某些特殊的时候，比如你需要在桌面或者锁屏上显示一些类似悬浮窗的东西时候就需要用到Window。Window是一个抽象类，Window的实现类是PhoneWindow。Window的具体实现位于WindowManagerService中，WindowManager和WindowManagerService的交互是一个IPC过程。Android中所有的视图都是通过Window来呈现的，不管是Activity、Dialog还是Toast，他们的视图实际上都是附加在Window上的。\n\n#一个悬浮窗的例子\n\n点击Button按钮，将一个ImageView添加到坐标为（100,300）的位置上，并且可以随手拖动的。\n\n![示例](http://img.blog.csdn.net/20160310205856256)\n\n下面是这一段的源码，展示了如何使用WindowManager添加一个Window。\n\n```java\npublic class TestActivity extends Activity implements OnTouchListener {\n\n    private static final String TAG = \"TestActivity\";\n\n    private Button mCreateWindowButton;\n\n    private ImageView mImageView;\n    private WindowManager.LayoutParams mLayoutParams;\n    private WindowManager mWindowManager;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_test);\n        initView();\n    }\n\n    private void initView() {\n        mCreateWindowButton = (Button) findViewById(R.id.button1);\n        mWindowManager = (WindowManager) getSystemService(Context.WINDOW_SERVICE);\n    }\n\n    public void onButtonClick(View v) {\n\n        if (v == mCreateWindowButton) {\n            mImageView = new ImageView(this);\n            mImageView.setBackgroundResource(R.drawable.ic_launcher);\n            mLayoutParams = new WindowManager.LayoutParams(\n                    LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT, 0, 0,\n                    PixelFormat.TRANSPARENT);\n            mLayoutParams.flags = LayoutParams.FLAG_NOT_TOUCH_MODAL\n                    | LayoutParams.FLAG_NOT_FOCUSABLE\n                    | LayoutParams.FLAG_SHOW_WHEN_LOCKED;\n            mLayoutParams.type = LayoutParams.TYPE_SYSTEM_ERROR;\n            mLayoutParams.gravity = Gravity.TOP | Gravity.LEFT;\n            mLayoutParams.x = 100;\n            mLayoutParams.y = 300;\n            mImageView.setOnTouchListener(this);\n            mWindowManager.addView(mImageView, mLayoutParams);\n        }\n    }\n\n    @Override\n    public boolean onTouch(View v, MotionEvent event) {\n        int rawX = (int) event.getRawX();\n        int rawY = (int) event.getRawY();\n        int x = (int) event.getX();\n        int y = (int) event.getY();\n\n        switch (event.getAction()) {\n        case MotionEvent.ACTION_DOWN: {\n            break;\n        }\n        case MotionEvent.ACTION_MOVE: {\n            Log.d(TAG, \"onTouch: rawX \" + rawX);\n            Log.d(TAG, \"onTouch: rawY \" + rawY);\n            mLayoutParams.x = rawX;\n            mLayoutParams.y = rawY;\n            mWindowManager.updateViewLayout(mImageView, mLayoutParams);\n            break;\n        }\n        case MotionEvent.ACTION_UP: {\n            break;\n        }\n        default:\n            break;\n        }\n        return false;\n    }\n\n    @Override\n    protected void onDestroy() {\n        try {\n            mWindowManager.removeView(mImageView);\n        } catch (IllegalArgumentException e) {\n            e.printStackTrace();\n        }\n        super.onDestroy();\n    }\n}\n```\n\n\n#WindowManager.LayoutParams的Flag和Type\n##FLAG\n- FLAG_NOT_FOCUSABLE，当前Window不获取焦点，也不接收各种输入事件，会同时启用FLAG_NOT_TOUCH_MODAL，事件会传递给下层具有焦点的Window。\n- FLAG_NOT_TOUCH_MODAL，当前Window区域外的单击事件传递给底层，区域内的单击事件自己处理，一般都需要开启。 \n- FLAG_SHOW_WHEN_LOCKED，可以让Window显示在锁屏界面上。\n\n##Type\nType表示Window的类型，有应用Window、子Window和系统Window。\n- 应用Window，一般对应一个Activity。层级范围1～99。 \n- 子Window，不能单独存在，需要特定的父Window，比如一般的Dialog。层级范围1000～1999。\n- 系统Window，需要权限声明，比如Toast。层级范围2000～2999。\n\n一般可以选用WindowManager.LayoutParams.TYPE_SYSTEM_ERROR或者TYPE_SYSTEM_OVERLAY同时声明权限。使用WindowManager.LayoutParams.TYPE_SYSTEM_ERROR时，同时声明<uses-permission android:name=\"android.permission.SYSTEM_ALERT_WINDOW\" />\n\n#注\n- Window并不实际存在，以View的形式存在。每个Window对应着一个View和ViewRootImpl，Window和View通过ViewRootImpl建立联系。所以在实际使用中其实我们并不能访问到真正的Window，而只能通过WindowManager。\n- WindowManager常用的三个功能：addView，updateViewLayout，removeView\n- 别忘了onDestory()中的mWindowManager.removeView(mImageView)\n","slug":"Windows和WindowManager","published":1,"date":"2016-03-12T05:28:32.363Z","updated":"2016-03-12T05:28:32.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cilop1pvp001xqcmy4fnx0zsu","content":"<p>Window表示一个窗口的概念，在某些特殊的时候，比如你需要在桌面或者锁屏上显示一些类似悬浮窗的东西时候就需要用到Window。Window是一个抽象类，Window的实现类是PhoneWindow。Window的具体实现位于WindowManagerService中，WindowManager和WindowManagerService的交互是一个IPC过程。Android中所有的视图都是通过Window来呈现的，不管是Activity、Dialog还是Toast，他们的视图实际上都是附加在Window上的。<br><a id=\"more\"></a></p>\n<p>Window表示一个窗口的概念，在某些特殊的时候，比如你需要在桌面或者锁屏上显示一些类似悬浮窗的东西时候就需要用到Window。Window是一个抽象类，Window的实现类是PhoneWindow。Window的具体实现位于WindowManagerService中，WindowManager和WindowManagerService的交互是一个IPC过程。Android中所有的视图都是通过Window来呈现的，不管是Activity、Dialog还是Toast，他们的视图实际上都是附加在Window上的。</p>\n<p>#一个悬浮窗的例子</p>\n<p>点击Button按钮，将一个ImageView添加到坐标为（100,300）的位置上，并且可以随手拖动的。</p>\n<p><img src=\"http://img.blog.csdn.net/20160310205856256\" alt=\"示例\"></p>\n<p>下面是这一段的源码，展示了如何使用WindowManager添加一个Window。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> <span class=\"keyword\">implements</span> <span class=\"title\">OnTouchListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"TestActivity\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Button mCreateWindowButton;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ImageView mImageView;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> WindowManager.LayoutParams mLayoutParams;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> WindowManager mWindowManager;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_test);</span><br><span class=\"line\">        initView();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initView</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mCreateWindowButton = (Button) findViewById(R.id.button1);</span><br><span class=\"line\">        mWindowManager = (WindowManager) getSystemService(Context.WINDOW_SERVICE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onButtonClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v == mCreateWindowButton) &#123;</span><br><span class=\"line\">            mImageView = <span class=\"keyword\">new</span> ImageView(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            mImageView.setBackgroundResource(R.drawable.ic_launcher);</span><br><span class=\"line\">            mLayoutParams = <span class=\"keyword\">new</span> WindowManager.LayoutParams(</span><br><span class=\"line\">                    LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">                    PixelFormat.TRANSPARENT);</span><br><span class=\"line\">            mLayoutParams.flags = LayoutParams.FLAG_NOT_TOUCH_MODAL</span><br><span class=\"line\">                    | LayoutParams.FLAG_NOT_FOCUSABLE</span><br><span class=\"line\">                    | LayoutParams.FLAG_SHOW_WHEN_LOCKED;</span><br><span class=\"line\">            mLayoutParams.type = LayoutParams.TYPE_SYSTEM_ERROR;</span><br><span class=\"line\">            mLayoutParams.gravity = Gravity.TOP | Gravity.LEFT;</span><br><span class=\"line\">            mLayoutParams.x = <span class=\"number\">100</span>;</span><br><span class=\"line\">            mLayoutParams.y = <span class=\"number\">300</span>;</span><br><span class=\"line\">            mImageView.setOnTouchListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            mWindowManager.addView(mImageView, mLayoutParams);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouch</span><span class=\"params\">(View v, MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rawX = (<span class=\"keyword\">int</span>) event.getRawX();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rawY = (<span class=\"keyword\">int</span>) event.getRawY();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = (<span class=\"keyword\">int</span>) event.getX();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> y = (<span class=\"keyword\">int</span>) event.getY();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (event.getAction()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN: &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE: &#123;</span><br><span class=\"line\">            Log.d(TAG, <span class=\"string\">\"onTouch: rawX \"</span> + rawX);</span><br><span class=\"line\">            Log.d(TAG, <span class=\"string\">\"onTouch: rawY \"</span> + rawY);</span><br><span class=\"line\">            mLayoutParams.x = rawX;</span><br><span class=\"line\">            mLayoutParams.y = rawY;</span><br><span class=\"line\">            mWindowManager.updateViewLayout(mImageView, mLayoutParams);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_UP: &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            mWindowManager.removeView(mImageView);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalArgumentException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>#WindowManager.LayoutParams的Flag和Type</p>\n<p>##FLAG</p>\n<ul>\n<li>FLAG_NOT_FOCUSABLE，当前Window不获取焦点，也不接收各种输入事件，会同时启用FLAG_NOT_TOUCH_MODAL，事件会传递给下层具有焦点的Window。</li>\n<li>FLAG_NOT_TOUCH_MODAL，当前Window区域外的单击事件传递给底层，区域内的单击事件自己处理，一般都需要开启。 </li>\n<li>FLAG_SHOW_WHEN_LOCKED，可以让Window显示在锁屏界面上。</li>\n</ul>\n<p>##Type<br>Type表示Window的类型，有应用Window、子Window和系统Window。</p>\n<ul>\n<li>应用Window，一般对应一个Activity。层级范围1～99。 </li>\n<li>子Window，不能单独存在，需要特定的父Window，比如一般的Dialog。层级范围1000～1999。</li>\n<li>系统Window，需要权限声明，比如Toast。层级范围2000～2999。</li>\n</ul>\n<p>一般可以选用WindowManager.LayoutParams.TYPE_SYSTEM_ERROR或者TYPE_SYSTEM_OVERLAY同时声明权限。使用WindowManager.LayoutParams.TYPE_SYSTEM_ERROR时，同时声明<uses-permission android:name=\"android.permission.SYSTEM_ALERT_WINDOW\"></uses-permission></p>\n<p>#注</p>\n<ul>\n<li>Window并不实际存在，以View的形式存在。每个Window对应着一个View和ViewRootImpl，Window和View通过ViewRootImpl建立联系。所以在实际使用中其实我们并不能访问到真正的Window，而只能通过WindowManager。</li>\n<li>WindowManager常用的三个功能：addView，updateViewLayout，removeView</li>\n<li>别忘了onDestory()中的mWindowManager.removeView(mImageView)</li>\n</ul>\n","excerpt":"<p>Window表示一个窗口的概念，在某些特殊的时候，比如你需要在桌面或者锁屏上显示一些类似悬浮窗的东西时候就需要用到Window。Window是一个抽象类，Window的实现类是PhoneWindow。Window的具体实现位于WindowManagerService中，WindowManager和WindowManagerService的交互是一个IPC过程。Android中所有的视图都是通过Window来呈现的，不管是Activity、Dialog还是Toast，他们的视图实际上都是附加在Window上的。<br>","more":"</p>\n<p>Window表示一个窗口的概念，在某些特殊的时候，比如你需要在桌面或者锁屏上显示一些类似悬浮窗的东西时候就需要用到Window。Window是一个抽象类，Window的实现类是PhoneWindow。Window的具体实现位于WindowManagerService中，WindowManager和WindowManagerService的交互是一个IPC过程。Android中所有的视图都是通过Window来呈现的，不管是Activity、Dialog还是Toast，他们的视图实际上都是附加在Window上的。</p>\n<p>#一个悬浮窗的例子</p>\n<p>点击Button按钮，将一个ImageView添加到坐标为（100,300）的位置上，并且可以随手拖动的。</p>\n<p><img src=\"http://img.blog.csdn.net/20160310205856256\" alt=\"示例\"></p>\n<p>下面是这一段的源码，展示了如何使用WindowManager添加一个Window。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Activity</span> <span class=\"keyword\">implements</span> <span class=\"title\">OnTouchListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"TestActivity\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Button mCreateWindowButton;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ImageView mImageView;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> WindowManager.LayoutParams mLayoutParams;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> WindowManager mWindowManager;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_test);</span><br><span class=\"line\">        initView();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">initView</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        mCreateWindowButton = (Button) findViewById(R.id.button1);</span><br><span class=\"line\">        mWindowManager = (WindowManager) getSystemService(Context.WINDOW_SERVICE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onButtonClick</span><span class=\"params\">(View v)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (v == mCreateWindowButton) &#123;</span><br><span class=\"line\">            mImageView = <span class=\"keyword\">new</span> ImageView(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            mImageView.setBackgroundResource(R.drawable.ic_launcher);</span><br><span class=\"line\">            mLayoutParams = <span class=\"keyword\">new</span> WindowManager.LayoutParams(</span><br><span class=\"line\">                    LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT, <span class=\"number\">0</span>, <span class=\"number\">0</span>,</span><br><span class=\"line\">                    PixelFormat.TRANSPARENT);</span><br><span class=\"line\">            mLayoutParams.flags = LayoutParams.FLAG_NOT_TOUCH_MODAL</span><br><span class=\"line\">                    | LayoutParams.FLAG_NOT_FOCUSABLE</span><br><span class=\"line\">                    | LayoutParams.FLAG_SHOW_WHEN_LOCKED;</span><br><span class=\"line\">            mLayoutParams.type = LayoutParams.TYPE_SYSTEM_ERROR;</span><br><span class=\"line\">            mLayoutParams.gravity = Gravity.TOP | Gravity.LEFT;</span><br><span class=\"line\">            mLayoutParams.x = <span class=\"number\">100</span>;</span><br><span class=\"line\">            mLayoutParams.y = <span class=\"number\">300</span>;</span><br><span class=\"line\">            mImageView.setOnTouchListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">            mWindowManager.addView(mImageView, mLayoutParams);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouch</span><span class=\"params\">(View v, MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rawX = (<span class=\"keyword\">int</span>) event.getRawX();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> rawY = (<span class=\"keyword\">int</span>) event.getRawY();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = (<span class=\"keyword\">int</span>) event.getX();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> y = (<span class=\"keyword\">int</span>) event.getY();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (event.getAction()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN: &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE: &#123;</span><br><span class=\"line\">            Log.d(TAG, <span class=\"string\">\"onTouch: rawX \"</span> + rawX);</span><br><span class=\"line\">            Log.d(TAG, <span class=\"string\">\"onTouch: rawY \"</span> + rawY);</span><br><span class=\"line\">            mLayoutParams.x = rawX;</span><br><span class=\"line\">            mLayoutParams.y = rawY;</span><br><span class=\"line\">            mWindowManager.updateViewLayout(mImageView, mLayoutParams);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> MotionEvent.ACTION_UP: &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            mWindowManager.removeView(mImageView);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IllegalArgumentException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>#WindowManager.LayoutParams的Flag和Type</p>\n<p>##FLAG</p>\n<ul>\n<li>FLAG_NOT_FOCUSABLE，当前Window不获取焦点，也不接收各种输入事件，会同时启用FLAG_NOT_TOUCH_MODAL，事件会传递给下层具有焦点的Window。</li>\n<li>FLAG_NOT_TOUCH_MODAL，当前Window区域外的单击事件传递给底层，区域内的单击事件自己处理，一般都需要开启。 </li>\n<li>FLAG_SHOW_WHEN_LOCKED，可以让Window显示在锁屏界面上。</li>\n</ul>\n<p>##Type<br>Type表示Window的类型，有应用Window、子Window和系统Window。</p>\n<ul>\n<li>应用Window，一般对应一个Activity。层级范围1～99。 </li>\n<li>子Window，不能单独存在，需要特定的父Window，比如一般的Dialog。层级范围1000～1999。</li>\n<li>系统Window，需要权限声明，比如Toast。层级范围2000～2999。</li>\n</ul>\n<p>一般可以选用WindowManager.LayoutParams.TYPE_SYSTEM_ERROR或者TYPE_SYSTEM_OVERLAY同时声明权限。使用WindowManager.LayoutParams.TYPE_SYSTEM_ERROR时，同时声明<uses-permission android:name=\"android.permission.SYSTEM_ALERT_WINDOW\" /></p>\n<p>#注</p>\n<ul>\n<li>Window并不实际存在，以View的形式存在。每个Window对应着一个View和ViewRootImpl，Window和View通过ViewRootImpl建立联系。所以在实际使用中其实我们并不能访问到真正的Window，而只能通过WindowManager。</li>\n<li>WindowManager常用的三个功能：addView，updateViewLayout，removeView</li>\n<li>别忘了onDestory()中的mWindowManager.removeView(mImageView)</li>\n</ul>"}],"PostAsset":[],"PostCategory":[{"post_id":"cilop1pty0000qcmythoned69","category_id":"cilop1pue0002qcmy8ed9ltin","_id":"cilop1pue0004qcmyznostk1j"},{"post_id":"cilop1put000aqcmybdg34k34","category_id":"cilop1pue0002qcmy8ed9ltin","_id":"cilop1pv9000fqcmy4l3ro40s"},{"post_id":"cilop1pue0005qcmy5u88picm","category_id":"cilop1pue0002qcmy8ed9ltin","_id":"cilop1pv9000jqcmy7ecmgjtc"},{"post_id":"cilop1pue0005qcmy5u88picm","category_id":"cilop1put0009qcmypkz7gfsz","_id":"cilop1pv9000mqcmyh5eqkieo"},{"post_id":"cilop1put000cqcmy73prmq5j","category_id":"cilop1pue0002qcmy8ed9ltin","_id":"cilop1pv9000pqcmybv9d0o5h"},{"post_id":"cilop1put000cqcmy73prmq5j","category_id":"cilop1put0009qcmypkz7gfsz","_id":"cilop1pv9000rqcmydre62jfm"},{"post_id":"cilop1put000eqcmyaliz07x2","category_id":"cilop1pue0002qcmy8ed9ltin","_id":"cilop1pv9000uqcmyu1ffymgs"},{"post_id":"cilop1put000eqcmyaliz07x2","category_id":"cilop1put0009qcmypkz7gfsz","_id":"cilop1pv9000vqcmy2b0z792k"},{"post_id":"cilop1pue0006qcmy5kvstmj7","category_id":"cilop1pue0002qcmy8ed9ltin","_id":"cilop1pv9000xqcmy74phhwoq"},{"post_id":"cilop1pue0006qcmy5kvstmj7","category_id":"cilop1put0009qcmypkz7gfsz","_id":"cilop1pv9000zqcmyipje9c7x"},{"post_id":"cilop1pv9000gqcmyz3z8hvbg","category_id":"cilop1pue0002qcmy8ed9ltin","_id":"cilop1pv90011qcmyuda9ull5"},{"post_id":"cilop1pv9000gqcmyz3z8hvbg","category_id":"cilop1put0009qcmypkz7gfsz","_id":"cilop1pv90014qcmywy7ostly"},{"post_id":"cilop1pv9000lqcmy20kmmsem","category_id":"cilop1pue0002qcmy8ed9ltin","_id":"cilop1pv90015qcmyb7ntvy1r"},{"post_id":"cilop1pv9000lqcmy20kmmsem","category_id":"cilop1put0009qcmypkz7gfsz","_id":"cilop1pv90017qcmyb6eibt0s"},{"post_id":"cilop1put0008qcmy0pt641u8","category_id":"cilop1pue0002qcmy8ed9ltin","_id":"cilop1pv90018qcmyvlm3et2s"},{"post_id":"cilop1put0008qcmy0pt641u8","category_id":"cilop1put0009qcmypkz7gfsz","_id":"cilop1pvp001aqcmyzerlrsgy"},{"post_id":"cilop1pvp001xqcmy4fnx0zsu","category_id":"cilop1pue0002qcmy8ed9ltin","_id":"cilop1pvp0020qcmyu70pl3a1"},{"post_id":"cilop1pvp001xqcmy4fnx0zsu","category_id":"cilop1put0009qcmypkz7gfsz","_id":"cilop1pvp0022qcmyaurygh7a"}],"PostTag":[{"post_id":"cilop1pty0000qcmythoned69","tag_id":"cilop1pue0001qcmy23cxauwz","_id":"cilop1pue0003qcmy7xx5sk94"},{"post_id":"cilop1pue0005qcmy5u88picm","tag_id":"cilop1put0007qcmylhnib9yx","_id":"cilop1pv9000kqcmy0x1wufgk"},{"post_id":"cilop1pue0005qcmy5u88picm","tag_id":"cilop1put000bqcmyq2f7dyqc","_id":"cilop1pv9000nqcmyop8pao5s"},{"post_id":"cilop1pue0006qcmy5kvstmj7","tag_id":"cilop1pue0001qcmy23cxauwz","_id":"cilop1pv9000qqcmy09gaidoy"},{"post_id":"cilop1pue0006qcmy5kvstmj7","tag_id":"cilop1pv9000hqcmy2dbsziys","_id":"cilop1pv9000sqcmyysau0h03"},{"post_id":"cilop1put0008qcmy0pt641u8","tag_id":"cilop1pue0001qcmy23cxauwz","_id":"cilop1pv9000yqcmyu26jb31g"},{"post_id":"cilop1put0008qcmy0pt641u8","tag_id":"cilop1pv9000hqcmy2dbsziys","_id":"cilop1pv90010qcmye0u98cdf"},{"post_id":"cilop1put0008qcmy0pt641u8","tag_id":"cilop1pv9000tqcmyl98hw2ti","_id":"cilop1pv90013qcmyy9ixvznp"},{"post_id":"cilop1put000aqcmybdg34k34","tag_id":"cilop1pue0001qcmy23cxauwz","_id":"cilop1pvp001bqcmynul2narf"},{"post_id":"cilop1put000aqcmybdg34k34","tag_id":"cilop1pv9000wqcmytn9xsekj","_id":"cilop1pvp001cqcmyy8c4aytb"},{"post_id":"cilop1put000aqcmybdg34k34","tag_id":"cilop1pv90012qcmyaiacxdmk","_id":"cilop1pvp001eqcmyw4toqopp"},{"post_id":"cilop1put000aqcmybdg34k34","tag_id":"cilop1pv90016qcmygdcgz3of","_id":"cilop1pvp001fqcmynk1k02iy"},{"post_id":"cilop1put000cqcmy73prmq5j","tag_id":"cilop1pue0001qcmy23cxauwz","_id":"cilop1pvp001hqcmywcvgqig8"},{"post_id":"cilop1put000cqcmy73prmq5j","tag_id":"cilop1pv9000hqcmy2dbsziys","_id":"cilop1pvp001iqcmyfzsxr5gj"},{"post_id":"cilop1put000cqcmy73prmq5j","tag_id":"cilop1pvp001dqcmyod310z7n","_id":"cilop1pvp001kqcmyo6iuvdma"},{"post_id":"cilop1put000eqcmyaliz07x2","tag_id":"cilop1pue0001qcmy23cxauwz","_id":"cilop1pvp001mqcmyhfns3pxf"},{"post_id":"cilop1put000eqcmyaliz07x2","tag_id":"cilop1pv9000hqcmy2dbsziys","_id":"cilop1pvp001nqcmy7v9xsf8q"},{"post_id":"cilop1put000eqcmyaliz07x2","tag_id":"cilop1pvp001jqcmyjya6ywnw","_id":"cilop1pvp001pqcmygbrp3tlr"},{"post_id":"cilop1pv9000gqcmyz3z8hvbg","tag_id":"cilop1pue0001qcmy23cxauwz","_id":"cilop1pvp001rqcmy546iakwb"},{"post_id":"cilop1pv9000gqcmyz3z8hvbg","tag_id":"cilop1pv9000hqcmy2dbsziys","_id":"cilop1pvp001sqcmy1pv8n63y"},{"post_id":"cilop1pv9000gqcmyz3z8hvbg","tag_id":"cilop1pvp001oqcmydvqnebeo","_id":"cilop1pvp001tqcmy4ntgt79o"},{"post_id":"cilop1pv9000lqcmy20kmmsem","tag_id":"cilop1pue0001qcmy23cxauwz","_id":"cilop1pvp001uqcmy77qblgs1"},{"post_id":"cilop1pv9000lqcmy20kmmsem","tag_id":"cilop1pv9000hqcmy2dbsziys","_id":"cilop1pvp001vqcmyrf98s0vj"},{"post_id":"cilop1pv9000lqcmy20kmmsem","tag_id":"cilop1pvp001qqcmydqn6i6ci","_id":"cilop1pvp001wqcmyixci25ct"},{"post_id":"cilop1pvp001xqcmy4fnx0zsu","tag_id":"cilop1pue0001qcmy23cxauwz","_id":"cilop1pvp0023qcmyqin32o1o"},{"post_id":"cilop1pvp001xqcmy4fnx0zsu","tag_id":"cilop1pvp001zqcmy9mgt1hr5","_id":"cilop1pvp0024qcmy5yvi5ld6"},{"post_id":"cilop1pvp001xqcmy4fnx0zsu","tag_id":"cilop1pvp0021qcmyb3jtlr0q","_id":"cilop1pvp0025qcmy9y7k7uv1"}],"Tag":[{"name":"Android","_id":"cilop1pue0001qcmy23cxauwz"},{"name":"AIDL","_id":"cilop1put0007qcmylhnib9yx"},{"name":"IPC","_id":"cilop1put000bqcmyq2f7dyqc"},{"name":"View","_id":"cilop1pv9000hqcmy2dbsziys"},{"name":"事件分发机制","_id":"cilop1pv9000tqcmyl98hw2ti"},{"name":"ViewRoot","_id":"cilop1pv9000wqcmytn9xsekj"},{"name":"DecorView","_id":"cilop1pv90012qcmyaiacxdmk"},{"name":"MeasureSpec和View的工作原理","_id":"cilop1pv90016qcmygdcgz3of"},{"name":"弹性滑动","_id":"cilop1pvp001dqcmyod310z7n"},{"name":"滑动冲突","_id":"cilop1pvp001jqcmyjya6ywnw"},{"name":"属性动画","_id":"cilop1pvp001oqcmydvqnebeo"},{"name":"自定义View","_id":"cilop1pvp001qqcmydqn6i6ci"},{"name":"Window","_id":"cilop1pvp001zqcmy9mgt1hr5"},{"name":"WindowManager","_id":"cilop1pvp0021qcmyb3jtlr0q"}]}}